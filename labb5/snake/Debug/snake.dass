
./Debug/snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4803      	ldr	r0, [pc, #12]	; (20000010 <startup+0x10>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa08 	bl	20000418 <_crt_init>
20000008:	f000 faf4 	bl	200005f4 <main>
2000000c:	e7fe      	b.n	2000000c <startup+0xc>
	" MOV SP,R0\n"
    " BL _crt_init\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000e:	46c0      	nop			; (mov r8, r8)
20000010:	20002c00 	andcs	r2, r0, r0, lsl #24

20000014 <ascii_ctrl_bit_set>:
#define BITMASK_E 0x40
#define BITMASK_SELECT 0x4
#define BITMASK_RW 0x2
#define BITMASK_RS 0x1

void ascii_ctrl_bit_set(unsigned char x) {
20000014:	b580      	push	{r7, lr}
20000016:	b084      	sub	sp, #16
20000018:	af00      	add	r7, sp, #0
2000001a:	0002      	movs	r2, r0
2000001c:	1dfb      	adds	r3, r7, #7
2000001e:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = GPIO_E->odr_low;
20000020:	4a0b      	ldr	r2, [pc, #44]	; (20000050 <ascii_ctrl_bit_set+0x3c>)
20000022:	210f      	movs	r1, #15
20000024:	187b      	adds	r3, r7, r1
20000026:	7d12      	ldrb	r2, [r2, #20]
20000028:	701a      	strb	r2, [r3, #0]
    c |= (BITMASK_SELECT | x);
2000002a:	1dfa      	adds	r2, r7, #7
2000002c:	187b      	adds	r3, r7, r1
2000002e:	7812      	ldrb	r2, [r2, #0]
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	4313      	orrs	r3, r2
20000034:	b2da      	uxtb	r2, r3
20000036:	0008      	movs	r0, r1
20000038:	187b      	adds	r3, r7, r1
2000003a:	2104      	movs	r1, #4
2000003c:	430a      	orrs	r2, r1
2000003e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000040:	4a03      	ldr	r2, [pc, #12]	; (20000050 <ascii_ctrl_bit_set+0x3c>)
20000042:	183b      	adds	r3, r7, r0
20000044:	781b      	ldrb	r3, [r3, #0]
20000046:	7513      	strb	r3, [r2, #20]
}
20000048:	46c0      	nop			; (mov r8, r8)
2000004a:	46bd      	mov	sp, r7
2000004c:	b004      	add	sp, #16
2000004e:	bd80      	pop	{r7, pc}
20000050:	40021000 	andmi	r1, r2, r0

20000054 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	0002      	movs	r2, r0
2000005c:	1dfb      	adds	r3, r7, #7
2000005e:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = GPIO_E->odr_low;
20000060:	4a0d      	ldr	r2, [pc, #52]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
20000062:	210f      	movs	r1, #15
20000064:	187b      	adds	r3, r7, r1
20000066:	7d12      	ldrb	r2, [r2, #20]
20000068:	701a      	strb	r2, [r3, #0]
    c &= (BITMASK_SELECT | ~x);
2000006a:	1dfb      	adds	r3, r7, #7
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	b25b      	sxtb	r3, r3
20000070:	43db      	mvns	r3, r3
20000072:	b25b      	sxtb	r3, r3
20000074:	2204      	movs	r2, #4
20000076:	4313      	orrs	r3, r2
20000078:	b25b      	sxtb	r3, r3
2000007a:	187a      	adds	r2, r7, r1
2000007c:	7812      	ldrb	r2, [r2, #0]
2000007e:	b252      	sxtb	r2, r2
20000080:	4013      	ands	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	187b      	adds	r3, r7, r1
20000086:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000088:	4a03      	ldr	r2, [pc, #12]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
2000008a:	187b      	adds	r3, r7, r1
2000008c:	781b      	ldrb	r3, [r3, #0]
2000008e:	7513      	strb	r3, [r2, #20]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}
20000098:	40021000 	andmi	r1, r2, r0

2000009c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
2000009c:	b580      	push	{r7, lr}
2000009e:	b082      	sub	sp, #8
200000a0:	af00      	add	r7, sp, #0
200000a2:	0002      	movs	r2, r0
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_E);
200000a8:	2040      	movs	r0, #64	; 0x40
200000aa:	f7ff ffb3 	bl	20000014 <ascii_ctrl_bit_set>
    GPIO_E->odr_high = byte;
200000ae:	4a06      	ldr	r2, [pc, #24]	; (200000c8 <ascii_write_controller+0x2c>)
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	7553      	strb	r3, [r2, #21]
    ascii_ctrl_bit_clear(BITMASK_E);
200000b6:	2040      	movs	r0, #64	; 0x40
200000b8:	f7ff ffcc 	bl	20000054 <ascii_ctrl_bit_clear>
    delay_250ns();
200000bc:	f000 fe3c 	bl	20000d38 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	b002      	add	sp, #8
200000c6:	bd80      	pop	{r7, pc}
200000c8:	40021000 	andmi	r1, r2, r0

200000cc <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(BITMASK_E);
200000d2:	2040      	movs	r0, #64	; 0x40
200000d4:	f7ff ff9e 	bl	20000014 <ascii_ctrl_bit_set>
    delay_250ns();
200000d8:	f000 fe2e 	bl	20000d38 <delay_250ns>
    delay_250ns();
200000dc:	f000 fe2c 	bl	20000d38 <delay_250ns>
    unsigned char rv = GPIO_E->idr_high;
200000e0:	4a06      	ldr	r2, [pc, #24]	; (200000fc <ascii_read_controller+0x30>)
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	7c52      	ldrb	r2, [r2, #17]
200000e6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_E);
200000e8:	2040      	movs	r0, #64	; 0x40
200000ea:	f7ff ffb3 	bl	20000054 <ascii_ctrl_bit_clear>
    return rv;
200000ee:	1dfb      	adds	r3, r7, #7
200000f0:	781b      	ldrb	r3, [r3, #0]
}
200000f2:	0018      	movs	r0, r3
200000f4:	46bd      	mov	sp, r7
200000f6:	b002      	add	sp, #8
200000f8:	bd80      	pop	{r7, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	40021000 	andmi	r1, r2, r0

20000100 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
2000010c:	2003      	movs	r0, #3
2000010e:	f7ff ffa1 	bl	20000054 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000112:	1dfb      	adds	r3, r7, #7
20000114:	781b      	ldrb	r3, [r3, #0]
20000116:	0018      	movs	r0, r3
20000118:	f7ff ffc0 	bl	2000009c <ascii_write_controller>
}
2000011c:	46c0      	nop			; (mov r8, r8)
2000011e:	46bd      	mov	sp, r7
20000120:	b002      	add	sp, #8
20000122:	bd80      	pop	{r7, pc}

20000124 <ascii_write_data>:

void ascii_write_data(unsigned char data) {
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_RS);
20000130:	2001      	movs	r0, #1
20000132:	f7ff ff6f 	bl	20000014 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(BITMASK_RW);
20000136:	2002      	movs	r0, #2
20000138:	f7ff ff8c 	bl	20000054 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	0018      	movs	r0, r3
20000142:	f7ff ffab 	bl	2000009c <ascii_write_controller>
}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	46bd      	mov	sp, r7
2000014a:	b002      	add	sp, #8
2000014c:	bd80      	pop	{r7, pc}

2000014e <ascii_read_status>:

unsigned char ascii_read_status(void) {
2000014e:	b590      	push	{r4, r7, lr}
20000150:	b083      	sub	sp, #12
20000152:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x00005555;
20000154:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x36>)
20000156:	4a0c      	ldr	r2, [pc, #48]	; (20000188 <ascii_read_status+0x3a>)
20000158:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_RS);
2000015a:	2001      	movs	r0, #1
2000015c:	f7ff ff7a 	bl	20000054 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(BITMASK_RW);
20000160:	2002      	movs	r0, #2
20000162:	f7ff ff57 	bl	20000014 <ascii_ctrl_bit_set>
    unsigned char c = ascii_read_controller();
20000166:	1dfc      	adds	r4, r7, #7
20000168:	f7ff ffb0 	bl	200000cc <ascii_read_controller>
2000016c:	0003      	movs	r3, r0
2000016e:	7023      	strb	r3, [r4, #0]
    GPIO_E->moder = 0x55555555;
20000170:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x36>)
20000172:	4a06      	ldr	r2, [pc, #24]	; (2000018c <ascii_read_status+0x3e>)
20000174:	601a      	str	r2, [r3, #0]
    return c;
20000176:	1dfb      	adds	r3, r7, #7
20000178:	781b      	ldrb	r3, [r3, #0]
}
2000017a:	0018      	movs	r0, r3
2000017c:	46bd      	mov	sp, r7
2000017e:	b003      	add	sp, #12
20000180:	bd90      	pop	{r4, r7, pc}
20000182:	46c0      	nop			; (mov r8, r8)
20000184:	40021000 	andmi	r1, r2, r0
20000188:	00005555 	andeq	r5, r0, r5, asr r5
2000018c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000190 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000190:	b590      	push	{r4, r7, lr}
20000192:	b083      	sub	sp, #12
20000194:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x00005555;
20000196:	4b0b      	ldr	r3, [pc, #44]	; (200001c4 <ascii_read_data+0x34>)
20000198:	4a0b      	ldr	r2, [pc, #44]	; (200001c8 <ascii_read_data+0x38>)
2000019a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_RS);
2000019c:	2001      	movs	r0, #1
2000019e:	f7ff ff39 	bl	20000014 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(BITMASK_RW);
200001a2:	2002      	movs	r0, #2
200001a4:	f7ff ff36 	bl	20000014 <ascii_ctrl_bit_set>
    unsigned char c = ascii_read_controller();
200001a8:	1dfc      	adds	r4, r7, #7
200001aa:	f7ff ff8f 	bl	200000cc <ascii_read_controller>
200001ae:	0003      	movs	r3, r0
200001b0:	7023      	strb	r3, [r4, #0]
    GPIO_E->moder = 0x55555555;
200001b2:	4b04      	ldr	r3, [pc, #16]	; (200001c4 <ascii_read_data+0x34>)
200001b4:	4a05      	ldr	r2, [pc, #20]	; (200001cc <ascii_read_data+0x3c>)
200001b6:	601a      	str	r2, [r3, #0]
    return c;
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	781b      	ldrb	r3, [r3, #0]
}
200001bc:	0018      	movs	r0, r3
200001be:	46bd      	mov	sp, r7
200001c0:	b003      	add	sp, #12
200001c2:	bd90      	pop	{r4, r7, pc}
200001c4:	40021000 	andmi	r1, r2, r0
200001c8:	00005555 	andeq	r5, r0, r5, asr r5
200001cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001d0 <ascii_write_cmd_delay>:

void ascii_write_cmd_delay(unsigned char cmd, unsigned int delay) {
200001d0:	b580      	push	{r7, lr}
200001d2:	b082      	sub	sp, #8
200001d4:	af00      	add	r7, sp, #0
200001d6:	0002      	movs	r2, r0
200001d8:	6039      	str	r1, [r7, #0]
200001da:	1dfb      	adds	r3, r7, #7
200001dc:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80);
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	f7ff ffb5 	bl	2000014e <ascii_read_status>
200001e4:	0003      	movs	r3, r0
200001e6:	001a      	movs	r2, r3
200001e8:	2380      	movs	r3, #128	; 0x80
200001ea:	4013      	ands	r3, r2
200001ec:	2b80      	cmp	r3, #128	; 0x80
200001ee:	d0f7      	beq.n	200001e0 <ascii_write_cmd_delay+0x10>
    delay_micros(8);
200001f0:	2008      	movs	r0, #8
200001f2:	f000 fdc5 	bl	20000d80 <delay_micros>
    ascii_write_cmd(cmd);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	0018      	movs	r0, r3
200001fc:	f7ff ff80 	bl	20000100 <ascii_write_cmd>
    delay_micros(delay);
20000200:	683b      	ldr	r3, [r7, #0]
20000202:	0018      	movs	r0, r3
20000204:	f000 fdbc 	bl	20000d80 <delay_micros>
}
20000208:	46c0      	nop			; (mov r8, r8)
2000020a:	46bd      	mov	sp, r7
2000020c:	b002      	add	sp, #8
2000020e:	bd80      	pop	{r7, pc}

20000210 <ascii_write_data_delay>:

void ascii_write_data_delay(unsigned char data, unsigned int delay) {
20000210:	b580      	push	{r7, lr}
20000212:	b082      	sub	sp, #8
20000214:	af00      	add	r7, sp, #0
20000216:	0002      	movs	r2, r0
20000218:	6039      	str	r1, [r7, #0]
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80);
2000021e:	46c0      	nop			; (mov r8, r8)
20000220:	f7ff ff95 	bl	2000014e <ascii_read_status>
20000224:	0003      	movs	r3, r0
20000226:	001a      	movs	r2, r3
20000228:	2380      	movs	r3, #128	; 0x80
2000022a:	4013      	ands	r3, r2
2000022c:	2b80      	cmp	r3, #128	; 0x80
2000022e:	d0f7      	beq.n	20000220 <ascii_write_data_delay+0x10>
    delay_micros(8);
20000230:	2008      	movs	r0, #8
20000232:	f000 fda5 	bl	20000d80 <delay_micros>
    ascii_write_data(data);
20000236:	1dfb      	adds	r3, r7, #7
20000238:	781b      	ldrb	r3, [r3, #0]
2000023a:	0018      	movs	r0, r3
2000023c:	f7ff ff72 	bl	20000124 <ascii_write_data>
    delay_micros(delay);
20000240:	683b      	ldr	r3, [r7, #0]
20000242:	0018      	movs	r0, r3
20000244:	f000 fd9c 	bl	20000d80 <delay_micros>
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b002      	add	sp, #8
2000024e:	bd80      	pop	{r7, pc}

20000250 <ascii_init>:

void ascii_init(void) {
20000250:	b580      	push	{r7, lr}
20000252:	af00      	add	r7, sp, #0
    ascii_write_cmd_delay(1, 2000); // Clear display
20000254:	23fa      	movs	r3, #250	; 0xfa
20000256:	00db      	lsls	r3, r3, #3
20000258:	0019      	movs	r1, r3
2000025a:	2001      	movs	r0, #1
2000025c:	f7ff ffb8 	bl	200001d0 <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0x38, 40);// 2 rows, 5x8px chars
20000260:	2128      	movs	r1, #40	; 0x28
20000262:	2038      	movs	r0, #56	; 0x38
20000264:	f7ff ffb4 	bl	200001d0 <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0xE, 40); // Turn on display, always show cursor
20000268:	2128      	movs	r1, #40	; 0x28
2000026a:	200e      	movs	r0, #14
2000026c:	f7ff ffb0 	bl	200001d0 <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0x6, 40); // Adress using increment, no shifting of adress buffer
20000270:	2128      	movs	r1, #40	; 0x28
20000272:	2006      	movs	r0, #6
20000274:	f7ff ffac 	bl	200001d0 <ascii_write_cmd_delay>
}
20000278:	46c0      	nop			; (mov r8, r8)
2000027a:	46bd      	mov	sp, r7
2000027c:	bd80      	pop	{r7, pc}

2000027e <ascii_gotoxy>:


void ascii_gotoxy(unsigned char row, unsigned char column) {
2000027e:	b580      	push	{r7, lr}
20000280:	b084      	sub	sp, #16
20000282:	af00      	add	r7, sp, #0
20000284:	0002      	movs	r2, r0
20000286:	1dfb      	adds	r3, r7, #7
20000288:	701a      	strb	r2, [r3, #0]
2000028a:	1dbb      	adds	r3, r7, #6
2000028c:	1c0a      	adds	r2, r1, #0
2000028e:	701a      	strb	r2, [r3, #0]
    unsigned char adress = row - 1;
20000290:	210f      	movs	r1, #15
20000292:	187b      	adds	r3, r7, r1
20000294:	1dfa      	adds	r2, r7, #7
20000296:	7812      	ldrb	r2, [r2, #0]
20000298:	3a01      	subs	r2, #1
2000029a:	701a      	strb	r2, [r3, #0]
    if (column > 1) {
2000029c:	1dbb      	adds	r3, r7, #6
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	2b01      	cmp	r3, #1
200002a2:	d904      	bls.n	200002ae <ascii_gotoxy+0x30>
        adress += 0x40;
200002a4:	187b      	adds	r3, r7, r1
200002a6:	187a      	adds	r2, r7, r1
200002a8:	7812      	ldrb	r2, [r2, #0]
200002aa:	3240      	adds	r2, #64	; 0x40
200002ac:	701a      	strb	r2, [r3, #0]
    }
    ascii_write_cmd_delay(0x80 | adress, 40);
200002ae:	230f      	movs	r3, #15
200002b0:	18fb      	adds	r3, r7, r3
200002b2:	781b      	ldrb	r3, [r3, #0]
200002b4:	2280      	movs	r2, #128	; 0x80
200002b6:	4252      	negs	r2, r2
200002b8:	4313      	orrs	r3, r2
200002ba:	b2db      	uxtb	r3, r3
200002bc:	2128      	movs	r1, #40	; 0x28
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff86 	bl	200001d0 <ascii_write_cmd_delay>
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b004      	add	sp, #16
200002ca:	bd80      	pop	{r7, pc}

200002cc <ascii_write_char>:

void ascii_write_char(char c) {
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
    ascii_write_data_delay(c,43);
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	212b      	movs	r1, #43	; 0x2b
200002de:	0018      	movs	r0, r3
200002e0:	f7ff ff96 	bl	20000210 <ascii_write_data_delay>
}
200002e4:	46c0      	nop			; (mov r8, r8)
200002e6:	46bd      	mov	sp, r7
200002e8:	b002      	add	sp, #8
200002ea:	bd80      	pop	{r7, pc}

200002ec <ascii_write_string>:

void ascii_write_string(char *c) {
200002ec:	b580      	push	{r7, lr}
200002ee:	b082      	sub	sp, #8
200002f0:	af00      	add	r7, sp, #0
200002f2:	6078      	str	r0, [r7, #4]
    while(*c) {
200002f4:	e006      	b.n	20000304 <ascii_write_string+0x18>
        ascii_write_char(*c++);
200002f6:	687b      	ldr	r3, [r7, #4]
200002f8:	1c5a      	adds	r2, r3, #1
200002fa:	607a      	str	r2, [r7, #4]
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	0018      	movs	r0, r3
20000300:	f7ff ffe4 	bl	200002cc <ascii_write_char>
    while(*c) {
20000304:	687b      	ldr	r3, [r7, #4]
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	2b00      	cmp	r3, #0
2000030a:	d1f4      	bne.n	200002f6 <ascii_write_string+0xa>
    }
2000030c:	46c0      	nop			; (mov r8, r8)
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	46bd      	mov	sp, r7
20000312:	b002      	add	sp, #8
20000314:	bd80      	pop	{r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)

20000318 <nb_delay_micro>:
#include "nb_delay.h"

volatile bool systick_flag;
volatile int32_t delay_count;

void nb_delay_micro(void) {
20000318:	b580      	push	{r7, lr}
2000031a:	af00      	add	r7, sp, #0
    systick_flag = false;
2000031c:	4b08      	ldr	r3, [pc, #32]	; (20000340 <nb_delay_micro+0x28>)
2000031e:	2200      	movs	r2, #0
20000320:	701a      	strb	r2, [r3, #0]
    SysTick->ctrl = 0;
20000322:	4b08      	ldr	r3, [pc, #32]	; (20000344 <nb_delay_micro+0x2c>)
20000324:	2200      	movs	r2, #0
20000326:	601a      	str	r2, [r3, #0]
    SysTick->load = 168-1;
20000328:	4b06      	ldr	r3, [pc, #24]	; (20000344 <nb_delay_micro+0x2c>)
2000032a:	22a7      	movs	r2, #167	; 0xa7
2000032c:	605a      	str	r2, [r3, #4]
    SysTick->val = 0;
2000032e:	4b05      	ldr	r3, [pc, #20]	; (20000344 <nb_delay_micro+0x2c>)
20000330:	2200      	movs	r2, #0
20000332:	609a      	str	r2, [r3, #8]
    SysTick->ctrl = 7;
20000334:	4b03      	ldr	r3, [pc, #12]	; (20000344 <nb_delay_micro+0x2c>)
20000336:	2207      	movs	r2, #7
20000338:	601a      	str	r2, [r3, #0]
}
2000033a:	46c0      	nop			; (mov r8, r8)
2000033c:	46bd      	mov	sp, r7
2000033e:	bd80      	pop	{r7, pc}
20000340:	2000123c 	andcs	r1, r0, ip, lsr r2
20000344:	e000e010 	and	lr, r0, r0, lsl r0

20000348 <systick_irq_handler>:

void systick_irq_handler(void) {
20000348:	b580      	push	{r7, lr}
2000034a:	af00      	add	r7, sp, #0
    delay_count--;
2000034c:	4b08      	ldr	r3, [pc, #32]	; (20000370 <systick_irq_handler+0x28>)
2000034e:	681b      	ldr	r3, [r3, #0]
20000350:	1e5a      	subs	r2, r3, #1
20000352:	4b07      	ldr	r3, [pc, #28]	; (20000370 <systick_irq_handler+0x28>)
20000354:	601a      	str	r2, [r3, #0]
    if (delay_count) {
20000356:	4b06      	ldr	r3, [pc, #24]	; (20000370 <systick_irq_handler+0x28>)
20000358:	681b      	ldr	r3, [r3, #0]
2000035a:	2b00      	cmp	r3, #0
2000035c:	d002      	beq.n	20000364 <systick_irq_handler+0x1c>
        nb_delay_micro();
2000035e:	f7ff ffdb 	bl	20000318 <nb_delay_micro>
    }else {
        systick_flag = true;
    }
}
20000362:	e002      	b.n	2000036a <systick_irq_handler+0x22>
        systick_flag = true;
20000364:	4b03      	ldr	r3, [pc, #12]	; (20000374 <systick_irq_handler+0x2c>)
20000366:	2201      	movs	r2, #1
20000368:	701a      	strb	r2, [r3, #0]
}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	46bd      	mov	sp, r7
2000036e:	bd80      	pop	{r7, pc}
20000370:	20001238 	andcs	r1, r0, r8, lsr r2
20000374:	2000123c 	andcs	r1, r0, ip, lsr r2

20000378 <nb_init_delay>:

void nb_init_delay(void) {
20000378:	b580      	push	{r7, lr}
2000037a:	af00      	add	r7, sp, #0
    *((void (**)(void)) 0x2001C03C) = systick_irq_handler;
2000037c:	4b04      	ldr	r3, [pc, #16]	; (20000390 <nb_init_delay+0x18>)
2000037e:	4a05      	ldr	r2, [pc, #20]	; (20000394 <nb_init_delay+0x1c>)
20000380:	601a      	str	r2, [r3, #0]
    systick_flag = false;
20000382:	4b05      	ldr	r3, [pc, #20]	; (20000398 <nb_init_delay+0x20>)
20000384:	2200      	movs	r2, #0
20000386:	701a      	strb	r2, [r3, #0]
}
20000388:	46c0      	nop			; (mov r8, r8)
2000038a:	46bd      	mov	sp, r7
2000038c:	bd80      	pop	{r7, pc}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000394:	20000349 	andcs	r0, r0, r9, asr #6
20000398:	2000123c 	andcs	r1, r0, ip, lsr r2

2000039c <nb_delay>:

void nb_delay(uint32_t us) {
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	6078      	str	r0, [r7, #4]
    delay_count = us;
200003a4:	687a      	ldr	r2, [r7, #4]
200003a6:	4b04      	ldr	r3, [pc, #16]	; (200003b8 <nb_delay+0x1c>)
200003a8:	601a      	str	r2, [r3, #0]
    nb_delay_micro();
200003aa:	f7ff ffb5 	bl	20000318 <nb_delay_micro>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}
200003b6:	46c0      	nop			; (mov r8, r8)
200003b8:	20001238 	andcs	r1, r0, r8, lsr r2

200003bc <_sbrk>:

extern char heap_low;
extern char heap_top;
char* heap_end;

char* _sbrk(int incr) {
200003bc:	b580      	push	{r7, lr}
200003be:	b084      	sub	sp, #16
200003c0:	af00      	add	r7, sp, #0
200003c2:	6078      	str	r0, [r7, #4]
    char *prev_heap_end;
    if (heap_end == 0) {
200003c4:	4b11      	ldr	r3, [pc, #68]	; (2000040c <_sbrk+0x50>)
200003c6:	681b      	ldr	r3, [r3, #0]
200003c8:	2b00      	cmp	r3, #0
200003ca:	d102      	bne.n	200003d2 <_sbrk+0x16>
        heap_end = &heap_low;
200003cc:	4b0f      	ldr	r3, [pc, #60]	; (2000040c <_sbrk+0x50>)
200003ce:	4a10      	ldr	r2, [pc, #64]	; (20000410 <_sbrk+0x54>)
200003d0:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
200003d2:	4b0e      	ldr	r3, [pc, #56]	; (2000040c <_sbrk+0x50>)
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > &heap_top) {
200003d8:	4b0c      	ldr	r3, [pc, #48]	; (2000040c <_sbrk+0x50>)
200003da:	681a      	ldr	r2, [r3, #0]
200003dc:	687b      	ldr	r3, [r7, #4]
200003de:	18d2      	adds	r2, r2, r3
200003e0:	4b0c      	ldr	r3, [pc, #48]	; (20000414 <_sbrk+0x58>)
200003e2:	429a      	cmp	r2, r3
200003e4:	d907      	bls.n	200003f6 <_sbrk+0x3a>
        errno = ENOMEM;
200003e6:	f000 fcf3 	bl	20000dd0 <__errno>
200003ea:	0003      	movs	r3, r0
200003ec:	220c      	movs	r2, #12
200003ee:	601a      	str	r2, [r3, #0]
        return (char *)-1;
200003f0:	2301      	movs	r3, #1
200003f2:	425b      	negs	r3, r3
200003f4:	e006      	b.n	20000404 <_sbrk+0x48>
    }
    heap_end += incr;
200003f6:	4b05      	ldr	r3, [pc, #20]	; (2000040c <_sbrk+0x50>)
200003f8:	681a      	ldr	r2, [r3, #0]
200003fa:	687b      	ldr	r3, [r7, #4]
200003fc:	18d2      	adds	r2, r2, r3
200003fe:	4b03      	ldr	r3, [pc, #12]	; (2000040c <_sbrk+0x50>)
20000400:	601a      	str	r2, [r3, #0]
    return (char *) prev_heap_end;
20000402:	68fb      	ldr	r3, [r7, #12]
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b004      	add	sp, #16
2000040a:	bd80      	pop	{r7, pc}
2000040c:	20001244 	andcs	r1, r0, r4, asr #4
20000410:	20002000 	andcs	r2, r0, r0
20000414:	20002800 	andcs	r2, r0, r0, lsl #16

20000418 <_crt_init>:

static void _crt_init() {
20000418:	b580      	push	{r7, lr}
2000041a:	b082      	sub	sp, #8
2000041c:	af00      	add	r7, sp, #0
    extern char __bss_start__;
    extern char __bss_end__;
    char *s;
    heap_end = 0;
2000041e:	4b10      	ldr	r3, [pc, #64]	; (20000460 <_crt_init+0x48>)
20000420:	2200      	movs	r2, #0
20000422:	601a      	str	r2, [r3, #0]
    s = &__bss_start__;
20000424:	4b0f      	ldr	r3, [pc, #60]	; (20000464 <_crt_init+0x4c>)
20000426:	607b      	str	r3, [r7, #4]
    while (s < &__bss_end__) {
20000428:	e004      	b.n	20000434 <_crt_init+0x1c>
        *s++ = 0;
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	1c5a      	adds	r2, r3, #1
2000042e:	607a      	str	r2, [r7, #4]
20000430:	2200      	movs	r2, #0
20000432:	701a      	strb	r2, [r3, #0]
    while (s < &__bss_end__) {
20000434:	687a      	ldr	r2, [r7, #4]
20000436:	4b0c      	ldr	r3, [pc, #48]	; (20000468 <_crt_init+0x50>)
20000438:	429a      	cmp	r2, r3
2000043a:	d3f6      	bcc.n	2000042a <_crt_init+0x12>
    }
    s = &heap_low;
2000043c:	4b0b      	ldr	r3, [pc, #44]	; (2000046c <_crt_init+0x54>)
2000043e:	607b      	str	r3, [r7, #4]
    while (s < &heap_top) {
20000440:	e004      	b.n	2000044c <_crt_init+0x34>
        *s++ = 0;
20000442:	687b      	ldr	r3, [r7, #4]
20000444:	1c5a      	adds	r2, r3, #1
20000446:	607a      	str	r2, [r7, #4]
20000448:	2200      	movs	r2, #0
2000044a:	701a      	strb	r2, [r3, #0]
    while (s < &heap_top) {
2000044c:	687a      	ldr	r2, [r7, #4]
2000044e:	4b08      	ldr	r3, [pc, #32]	; (20000470 <_crt_init+0x58>)
20000450:	429a      	cmp	r2, r3
20000452:	d3f6      	bcc.n	20000442 <_crt_init+0x2a>
    }
}
20000454:	46c0      	nop			; (mov r8, r8)
20000456:	46c0      	nop			; (mov r8, r8)
20000458:	46bd      	mov	sp, r7
2000045a:	b002      	add	sp, #8
2000045c:	bd80      	pop	{r7, pc}
2000045e:	46c0      	nop			; (mov r8, r8)
20000460:	20001244 	andcs	r1, r0, r4, asr #4
20000464:	200012e0 	andcs	r1, r0, r0, ror #5
20000468:	200012e0 	andcs	r1, r0, r0, ror #5
2000046c:	20002000 	andcs	r2, r0, r0
20000470:	20002800 	andcs	r2, r0, r0, lsl #16

20000474 <SNEK_move>:
    void (*move)(struct snek*);
    void (*draw)(struct snek*);
}SNEK;


void SNEK_move(SNEK* self) {
20000474:	b580      	push	{r7, lr}
20000476:	b084      	sub	sp, #16
20000478:	af00      	add	r7, sp, #0
2000047a:	6078      	str	r0, [r7, #4]
    // Collision detection
    // Lägg till ditt förra huvud, som första noden i listan
    NODE* new_node = (NODE*) malloc(sizeof(NODE));
2000047c:	2008      	movs	r0, #8
2000047e:	f000 fcaf 	bl	20000de0 <malloc>
20000482:	0003      	movs	r3, r0
20000484:	60bb      	str	r3, [r7, #8]
    new_node->pos = self->head;
20000486:	68bb      	ldr	r3, [r7, #8]
20000488:	687a      	ldr	r2, [r7, #4]
2000048a:	2102      	movs	r1, #2
2000048c:	5a52      	ldrh	r2, [r2, r1]
2000048e:	801a      	strh	r2, [r3, #0]
    new_node->next = self->next;
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	685a      	ldr	r2, [r3, #4]
20000494:	68bb      	ldr	r3, [r7, #8]
20000496:	605a      	str	r2, [r3, #4]
    self->next = new_node;
20000498:	687b      	ldr	r3, [r7, #4]
2000049a:	68ba      	ldr	r2, [r7, #8]
2000049c:	605a      	str	r2, [r3, #4]
    // Gå fram ett steg rita ditt nya huvud
    self->head.x += self->velocity.x;
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	789a      	ldrb	r2, [r3, #2]
200004a2:	687b      	ldr	r3, [r7, #4]
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	18d3      	adds	r3, r2, r3
200004a8:	b2da      	uxtb	r2, r3
200004aa:	687b      	ldr	r3, [r7, #4]
200004ac:	709a      	strb	r2, [r3, #2]
    self->head.y += self->velocity.y;
200004ae:	687b      	ldr	r3, [r7, #4]
200004b0:	78da      	ldrb	r2, [r3, #3]
200004b2:	687b      	ldr	r3, [r7, #4]
200004b4:	785b      	ldrb	r3, [r3, #1]
200004b6:	18d3      	adds	r3, r2, r3
200004b8:	b2da      	uxtb	r2, r3
200004ba:	687b      	ldr	r3, [r7, #4]
200004bc:	70da      	strb	r2, [r3, #3]
    pixel(self->head.x, self->head.y, true);
200004be:	687b      	ldr	r3, [r7, #4]
200004c0:	7898      	ldrb	r0, [r3, #2]
200004c2:	687b      	ldr	r3, [r7, #4]
200004c4:	78db      	ldrb	r3, [r3, #3]
200004c6:	2201      	movs	r2, #1
200004c8:	0019      	movs	r1, r3
200004ca:	f000 fa4f 	bl	2000096c <pixel>
    // Ta bort sista elementet i listan, cleara den pixeln
    NODE* iterator = self->next;
200004ce:	687b      	ldr	r3, [r7, #4]
200004d0:	685b      	ldr	r3, [r3, #4]
200004d2:	60fb      	str	r3, [r7, #12]
    while (iterator->next->next != (NODE*) -1) {
200004d4:	e002      	b.n	200004dc <SNEK_move+0x68>
        iterator = iterator->next;
200004d6:	68fb      	ldr	r3, [r7, #12]
200004d8:	685b      	ldr	r3, [r3, #4]
200004da:	60fb      	str	r3, [r7, #12]
    while (iterator->next->next != (NODE*) -1) {
200004dc:	68fb      	ldr	r3, [r7, #12]
200004de:	685b      	ldr	r3, [r3, #4]
200004e0:	685b      	ldr	r3, [r3, #4]
200004e2:	3301      	adds	r3, #1
200004e4:	d1f7      	bne.n	200004d6 <SNEK_move+0x62>
    }
    pixel(iterator->next->pos.x, iterator->next->pos.y, false);
200004e6:	68fb      	ldr	r3, [r7, #12]
200004e8:	685b      	ldr	r3, [r3, #4]
200004ea:	7818      	ldrb	r0, [r3, #0]
200004ec:	68fb      	ldr	r3, [r7, #12]
200004ee:	685b      	ldr	r3, [r3, #4]
200004f0:	785b      	ldrb	r3, [r3, #1]
200004f2:	2200      	movs	r2, #0
200004f4:	0019      	movs	r1, r3
200004f6:	f000 fa39 	bl	2000096c <pixel>
    free(iterator->next);
200004fa:	68fb      	ldr	r3, [r7, #12]
200004fc:	685b      	ldr	r3, [r3, #4]
200004fe:	0018      	movs	r0, r3
20000500:	f000 fc7e 	bl	20000e00 <free>
    iterator->next = (NODE*) -1;
20000504:	68fb      	ldr	r3, [r7, #12]
20000506:	2201      	movs	r2, #1
20000508:	4252      	negs	r2, r2
2000050a:	605a      	str	r2, [r3, #4]
        
}
2000050c:	46c0      	nop			; (mov r8, r8)
2000050e:	46bd      	mov	sp, r7
20000510:	b004      	add	sp, #16
20000512:	bd80      	pop	{r7, pc}

20000514 <SNEK_draw>:

void SNEK_draw(SNEK* self) {
20000514:	b580      	push	{r7, lr}
20000516:	b084      	sub	sp, #16
20000518:	af00      	add	r7, sp, #0
2000051a:	6078      	str	r0, [r7, #4]
    pixel(self->head.x, self->head.y, true);
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	7898      	ldrb	r0, [r3, #2]
20000520:	687b      	ldr	r3, [r7, #4]
20000522:	78db      	ldrb	r3, [r3, #3]
20000524:	2201      	movs	r2, #1
20000526:	0019      	movs	r1, r3
20000528:	f000 fa20 	bl	2000096c <pixel>
    for (NODE* iter = self->next; iter->next != (NODE*) -1; iter = iter->next) {
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	685b      	ldr	r3, [r3, #4]
20000530:	60fb      	str	r3, [r7, #12]
20000532:	e00a      	b.n	2000054a <SNEK_draw+0x36>
        pixel(iter->pos.x, iter->pos.y, true); 
20000534:	68fb      	ldr	r3, [r7, #12]
20000536:	7818      	ldrb	r0, [r3, #0]
20000538:	68fb      	ldr	r3, [r7, #12]
2000053a:	785b      	ldrb	r3, [r3, #1]
2000053c:	2201      	movs	r2, #1
2000053e:	0019      	movs	r1, r3
20000540:	f000 fa14 	bl	2000096c <pixel>
    for (NODE* iter = self->next; iter->next != (NODE*) -1; iter = iter->next) {
20000544:	68fb      	ldr	r3, [r7, #12]
20000546:	685b      	ldr	r3, [r3, #4]
20000548:	60fb      	str	r3, [r7, #12]
2000054a:	68fb      	ldr	r3, [r7, #12]
2000054c:	685b      	ldr	r3, [r3, #4]
2000054e:	3301      	adds	r3, #1
20000550:	d1f0      	bne.n	20000534 <SNEK_draw+0x20>
    }
}
20000552:	46c0      	nop			; (mov r8, r8)
20000554:	46c0      	nop			; (mov r8, r8)
20000556:	46bd      	mov	sp, r7
20000558:	b004      	add	sp, #16
2000055a:	bd80      	pop	{r7, pc}

2000055c <snek_init>:

extern volatile bool systick_flag;

SNEK* player;

void snek_init(void) {
2000055c:	b590      	push	{r4, r7, lr}
2000055e:	b085      	sub	sp, #20
20000560:	af00      	add	r7, sp, #0
    player->head = (POINT) {64,32};
20000562:	4b15      	ldr	r3, [pc, #84]	; (200005b8 <snek_init+0x5c>)
20000564:	681b      	ldr	r3, [r3, #0]
20000566:	2102      	movs	r1, #2
20000568:	4a14      	ldr	r2, [pc, #80]	; (200005bc <snek_init+0x60>)
2000056a:	8812      	ldrh	r2, [r2, #0]
2000056c:	525a      	strh	r2, [r3, r1]
    player->next = malloc(sizeof (NODE));
2000056e:	4b12      	ldr	r3, [pc, #72]	; (200005b8 <snek_init+0x5c>)
20000570:	681c      	ldr	r4, [r3, #0]
20000572:	2008      	movs	r0, #8
20000574:	f000 fc34 	bl	20000de0 <malloc>
20000578:	0003      	movs	r3, r0
2000057a:	6063      	str	r3, [r4, #4]
    player->next->pos = (POINT) {64,31};
2000057c:	4b0e      	ldr	r3, [pc, #56]	; (200005b8 <snek_init+0x5c>)
2000057e:	681b      	ldr	r3, [r3, #0]
20000580:	685b      	ldr	r3, [r3, #4]
20000582:	4a0f      	ldr	r2, [pc, #60]	; (200005c0 <snek_init+0x64>)
20000584:	8812      	ldrh	r2, [r2, #0]
20000586:	801a      	strh	r2, [r3, #0]
    player->next->next = (NODE*) -1;
20000588:	4b0b      	ldr	r3, [pc, #44]	; (200005b8 <snek_init+0x5c>)
2000058a:	681b      	ldr	r3, [r3, #0]
2000058c:	685b      	ldr	r3, [r3, #4]
2000058e:	2201      	movs	r2, #1
20000590:	4252      	negs	r2, r2
20000592:	605a      	str	r2, [r3, #4]
    player->draw = SNEK_draw;
20000594:	4b08      	ldr	r3, [pc, #32]	; (200005b8 <snek_init+0x5c>)
20000596:	681b      	ldr	r3, [r3, #0]
20000598:	4a0a      	ldr	r2, [pc, #40]	; (200005c4 <snek_init+0x68>)
2000059a:	60da      	str	r2, [r3, #12]
    player->move = SNEK_move;
2000059c:	4b06      	ldr	r3, [pc, #24]	; (200005b8 <snek_init+0x5c>)
2000059e:	681b      	ldr	r3, [r3, #0]
200005a0:	4a09      	ldr	r2, [pc, #36]	; (200005c8 <snek_init+0x6c>)
200005a2:	609a      	str	r2, [r3, #8]
    player->velocity = (POINT) {1,0};
200005a4:	4b04      	ldr	r3, [pc, #16]	; (200005b8 <snek_init+0x5c>)
200005a6:	681b      	ldr	r3, [r3, #0]
200005a8:	2201      	movs	r2, #1
200005aa:	701a      	strb	r2, [r3, #0]
200005ac:	2200      	movs	r2, #0
200005ae:	705a      	strb	r2, [r3, #1]
}
200005b0:	46c0      	nop			; (mov r8, r8)
200005b2:	46bd      	mov	sp, r7
200005b4:	b005      	add	sp, #20
200005b6:	bd90      	pop	{r4, r7, pc}
200005b8:	20001240 	andcs	r1, r0, r0, asr #4
200005bc:	200012b0 			; <UNDEFINED> instruction: 0x200012b0
200005c0:	200012b4 			; <UNDEFINED> instruction: 0x200012b4
200005c4:	20000515 	andcs	r0, r0, r5, lsl r5
200005c8:	20000475 	andcs	r0, r0, r5, ror r4

200005cc <app_init>:

void app_init(void) {
200005cc:	b580      	push	{r7, lr}
200005ce:	af00      	add	r7, sp, #0
    GPIO_output(GPIO_D);
200005d0:	4b07      	ldr	r3, [pc, #28]	; (200005f0 <app_init+0x24>)
200005d2:	0018      	movs	r0, r3
200005d4:	f000 fadc 	bl	20000b90 <GPIO_output>
    nb_init_delay();
200005d8:	f7ff fece 	bl	20000378 <nb_init_delay>
    snek_init();
200005dc:	f7ff ffbe 	bl	2000055c <snek_init>
    graphic_init();
200005e0:	f000 fa94 	bl	20000b0c <graphic_init>
    graphic_clear_screen();
200005e4:	f000 fa5e 	bl	20000aa4 <graphic_clear_screen>
}
200005e8:	46c0      	nop			; (mov r8, r8)
200005ea:	46bd      	mov	sp, r7
200005ec:	bd80      	pop	{r7, pc}
200005ee:	46c0      	nop			; (mov r8, r8)
200005f0:	40020c00 	andmi	r0, r2, r0, lsl #24

200005f4 <main>:

int main(void)
{
200005f4:	b580      	push	{r7, lr}
200005f6:	b084      	sub	sp, #16
200005f8:	af00      	add	r7, sp, #0
    char *dbuf1, *dbuf2, *dbuf3;
    dbuf1 = malloc(100);
200005fa:	2064      	movs	r0, #100	; 0x64
200005fc:	f000 fbf0 	bl	20000de0 <malloc>
20000600:	0003      	movs	r3, r0
20000602:	60fb      	str	r3, [r7, #12]
    dbuf2 = malloc(150);
20000604:	2096      	movs	r0, #150	; 0x96
20000606:	f000 fbeb 	bl	20000de0 <malloc>
2000060a:	0003      	movs	r3, r0
2000060c:	60bb      	str	r3, [r7, #8]
    dbuf3 = malloc(15);
2000060e:	200f      	movs	r0, #15
20000610:	f000 fbe6 	bl	20000de0 <malloc>
20000614:	0003      	movs	r3, r0
20000616:	607b      	str	r3, [r7, #4]
    free(dbuf2);
20000618:	68bb      	ldr	r3, [r7, #8]
2000061a:	0018      	movs	r0, r3
2000061c:	f000 fbf0 	bl	20000e00 <free>
    dbuf2 = malloc(50);
20000620:	2032      	movs	r0, #50	; 0x32
20000622:	f000 fbdd 	bl	20000de0 <malloc>
20000626:	0003      	movs	r3, r0
20000628:	60bb      	str	r3, [r7, #8]
    free(dbuf1);
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	0018      	movs	r0, r3
2000062e:	f000 fbe7 	bl	20000e00 <free>
    free(dbuf2);
20000632:	68bb      	ldr	r3, [r7, #8]
20000634:	0018      	movs	r0, r3
20000636:	f000 fbe3 	bl	20000e00 <free>
    free(dbuf3);
2000063a:	687b      	ldr	r3, [r7, #4]
2000063c:	0018      	movs	r0, r3
2000063e:	f000 fbdf 	bl	20000e00 <free>
    
    while (true) {
        // Grejer som ska göras varje gametick
        
        
        nb_delay(DELAY_COUNT); // Calla inte delay efter det här
20000642:	2064      	movs	r0, #100	; 0x64
20000644:	f7ff feaa 	bl	2000039c <nb_delay>
        while (true) {
            // Grejer som kan göras medans delay är igång (INTE GREJER SOM KRÄVER DELAY)
            if (systick_flag) {
20000648:	4b03      	ldr	r3, [pc, #12]	; (20000658 <main+0x64>)
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	b2db      	uxtb	r3, r3
2000064e:	2b00      	cmp	r3, #0
20000650:	d100      	bne.n	20000654 <main+0x60>
20000652:	e7f9      	b.n	20000648 <main+0x54>
                break;
20000654:	46c0      	nop			; (mov r8, r8)
        nb_delay(DELAY_COUNT); // Calla inte delay efter det här
20000656:	e7f4      	b.n	20000642 <main+0x4e>
20000658:	2000123c 	andcs	r1, r0, ip, lsr r2

2000065c <graphic_ctrl_bit_set>:
#define LCD_SET_PAGE 0xB8
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

// choose graphic display, and set the bits from x
void graphic_ctrl_bit_set(uint8_t x) {
2000065c:	b580      	push	{r7, lr}
2000065e:	b084      	sub	sp, #16
20000660:	af00      	add	r7, sp, #0
20000662:	0002      	movs	r2, r0
20000664:	1dfb      	adds	r3, r7, #7
20000666:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
20000668:	4a0c      	ldr	r2, [pc, #48]	; (2000069c <graphic_ctrl_bit_set+0x40>)
2000066a:	210f      	movs	r1, #15
2000066c:	187b      	adds	r3, r7, r1
2000066e:	7d12      	ldrb	r2, [r2, #20]
20000670:	701a      	strb	r2, [r3, #0]
    c |= (x & ~BITMASK_SELECT);
20000672:	1dfb      	adds	r3, r7, #7
20000674:	781b      	ldrb	r3, [r3, #0]
20000676:	b25b      	sxtb	r3, r3
20000678:	2204      	movs	r2, #4
2000067a:	4393      	bics	r3, r2
2000067c:	b25a      	sxtb	r2, r3
2000067e:	187b      	adds	r3, r7, r1
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	b25b      	sxtb	r3, r3
20000684:	4313      	orrs	r3, r2
20000686:	b25a      	sxtb	r2, r3
20000688:	187b      	adds	r3, r7, r1
2000068a:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
2000068c:	4a03      	ldr	r2, [pc, #12]	; (2000069c <graphic_ctrl_bit_set+0x40>)
2000068e:	187b      	adds	r3, r7, r1
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	7513      	strb	r3, [r2, #20]
}
20000694:	46c0      	nop			; (mov r8, r8)
20000696:	46bd      	mov	sp, r7
20000698:	b004      	add	sp, #16
2000069a:	bd80      	pop	{r7, pc}
2000069c:	40021000 	andmi	r1, r2, r0

200006a0 <graphic_ctrl_bit_clear>:
// Choose graphic display, and clear the bits from x
void graphic_ctrl_bit_clear(uint8_t x) {
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	0002      	movs	r2, r0
200006a8:	1dfb      	adds	r3, r7, #7
200006aa:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
200006ac:	4a0c      	ldr	r2, [pc, #48]	; (200006e0 <graphic_ctrl_bit_clear+0x40>)
200006ae:	210f      	movs	r1, #15
200006b0:	187b      	adds	r3, r7, r1
200006b2:	7d12      	ldrb	r2, [r2, #20]
200006b4:	701a      	strb	r2, [r3, #0]
    c &= (~x & ~BITMASK_SELECT); 
200006b6:	1dfb      	adds	r3, r7, #7
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	43db      	mvns	r3, r3
200006bc:	b2db      	uxtb	r3, r3
200006be:	187a      	adds	r2, r7, r1
200006c0:	7812      	ldrb	r2, [r2, #0]
200006c2:	4013      	ands	r3, r2
200006c4:	b2da      	uxtb	r2, r3
200006c6:	0008      	movs	r0, r1
200006c8:	187b      	adds	r3, r7, r1
200006ca:	2104      	movs	r1, #4
200006cc:	438a      	bics	r2, r1
200006ce:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
200006d0:	4a03      	ldr	r2, [pc, #12]	; (200006e0 <graphic_ctrl_bit_clear+0x40>)
200006d2:	183b      	adds	r3, r7, r0
200006d4:	781b      	ldrb	r3, [r3, #0]
200006d6:	7513      	strb	r3, [r2, #20]
}
200006d8:	46c0      	nop			; (mov r8, r8)
200006da:	46bd      	mov	sp, r7
200006dc:	b004      	add	sp, #16
200006de:	bd80      	pop	{r7, pc}
200006e0:	40021000 	andmi	r1, r2, r0

200006e4 <select_controller>:
// Select chip
void select_controller(uint8_t controller) {
200006e4:	b580      	push	{r7, lr}
200006e6:	b082      	sub	sp, #8
200006e8:	af00      	add	r7, sp, #0
200006ea:	0002      	movs	r2, r0
200006ec:	1dfb      	adds	r3, r7, #7
200006ee:	701a      	strb	r2, [r3, #0]
    switch (controller) {
200006f0:	1dfb      	adds	r3, r7, #7
200006f2:	781b      	ldrb	r3, [r3, #0]
200006f4:	2b18      	cmp	r3, #24
200006f6:	d01a      	beq.n	2000072e <select_controller+0x4a>
200006f8:	dc1d      	bgt.n	20000736 <select_controller+0x52>
200006fa:	2b10      	cmp	r3, #16
200006fc:	d010      	beq.n	20000720 <select_controller+0x3c>
200006fe:	dc1a      	bgt.n	20000736 <select_controller+0x52>
20000700:	2b00      	cmp	r3, #0
20000702:	d002      	beq.n	2000070a <select_controller+0x26>
20000704:	2b08      	cmp	r3, #8
20000706:	d004      	beq.n	20000712 <select_controller+0x2e>
            break;
        case BITMASK_CS1 | BITMASK_CS2:
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
            break;
    }
}
20000708:	e015      	b.n	20000736 <select_controller+0x52>
            graphic_ctrl_bit_clear (BITMASK_CS1 | BITMASK_CS2);
2000070a:	2018      	movs	r0, #24
2000070c:	f7ff ffc8 	bl	200006a0 <graphic_ctrl_bit_clear>
            break;
20000710:	e011      	b.n	20000736 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1);
20000712:	2008      	movs	r0, #8
20000714:	f7ff ffa2 	bl	2000065c <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS2);
20000718:	2010      	movs	r0, #16
2000071a:	f7ff ffc1 	bl	200006a0 <graphic_ctrl_bit_clear>
            break;
2000071e:	e00a      	b.n	20000736 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS2);
20000720:	2010      	movs	r0, #16
20000722:	f7ff ff9b 	bl	2000065c <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS1);
20000726:	2008      	movs	r0, #8
20000728:	f7ff ffba 	bl	200006a0 <graphic_ctrl_bit_clear>
            break;
2000072c:	e003      	b.n	20000736 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
2000072e:	2018      	movs	r0, #24
20000730:	f7ff ff94 	bl	2000065c <graphic_ctrl_bit_set>
            break;
20000734:	46c0      	nop			; (mov r8, r8)
}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	46bd      	mov	sp, r7
2000073a:	b002      	add	sp, #8
2000073c:	bd80      	pop	{r7, pc}

2000073e <graphic_wait_ready>:

void graphic_wait_ready() {
2000073e:	b580      	push	{r7, lr}
20000740:	b082      	sub	sp, #8
20000742:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(BITMASK_E);
20000744:	2040      	movs	r0, #64	; 0x40
20000746:	f7ff ffab 	bl	200006a0 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
2000074a:	4b15      	ldr	r3, [pc, #84]	; (200007a0 <graphic_wait_ready+0x62>)
2000074c:	4a15      	ldr	r2, [pc, #84]	; (200007a4 <graphic_wait_ready+0x66>)
2000074e:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RW);
20000750:	2002      	movs	r0, #2
20000752:	f7ff ff83 	bl	2000065c <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(BITMASK_RS);
20000756:	2001      	movs	r0, #1
20000758:	f7ff ffa2 	bl	200006a0 <graphic_ctrl_bit_clear>
    delay_500ns();
2000075c:	f000 fafe 	bl	20000d5c <delay_500ns>
    
    uint8_t c;
    do {
        graphic_ctrl_bit_set(BITMASK_E);
20000760:	2040      	movs	r0, #64	; 0x40
20000762:	f7ff ff7b 	bl	2000065c <graphic_ctrl_bit_set>
        delay_500ns();
20000766:	f000 faf9 	bl	20000d5c <delay_500ns>
        c = GPIO_E->idr_high & LCD_BUSY;
2000076a:	4b0d      	ldr	r3, [pc, #52]	; (200007a0 <graphic_wait_ready+0x62>)
2000076c:	7c5b      	ldrb	r3, [r3, #17]
2000076e:	b2da      	uxtb	r2, r3
20000770:	1dfb      	adds	r3, r7, #7
20000772:	217f      	movs	r1, #127	; 0x7f
20000774:	438a      	bics	r2, r1
20000776:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(BITMASK_E);
20000778:	2040      	movs	r0, #64	; 0x40
2000077a:	f7ff ff91 	bl	200006a0 <graphic_ctrl_bit_clear>
        delay_500ns();
2000077e:	f000 faed 	bl	20000d5c <delay_500ns>
    }while(c);
20000782:	1dfb      	adds	r3, r7, #7
20000784:	781b      	ldrb	r3, [r3, #0]
20000786:	2b00      	cmp	r3, #0
20000788:	d1ea      	bne.n	20000760 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(BITMASK_E);
2000078a:	2040      	movs	r0, #64	; 0x40
2000078c:	f7ff ff66 	bl	2000065c <graphic_ctrl_bit_set>
    GPIO_E->moder = 0x55555555;
20000790:	4b03      	ldr	r3, [pc, #12]	; (200007a0 <graphic_wait_ready+0x62>)
20000792:	4a05      	ldr	r2, [pc, #20]	; (200007a8 <graphic_wait_ready+0x6a>)
20000794:	601a      	str	r2, [r3, #0]
}
20000796:	46c0      	nop			; (mov r8, r8)
20000798:	46bd      	mov	sp, r7
2000079a:	b002      	add	sp, #8
2000079c:	bd80      	pop	{r7, pc}
2000079e:	46c0      	nop			; (mov r8, r8)
200007a0:	40021000 	andmi	r1, r2, r0
200007a4:	00005555 	andeq	r5, r0, r5, asr r5
200007a8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007ac <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
200007ac:	b580      	push	{r7, lr}
200007ae:	b084      	sub	sp, #16
200007b0:	af00      	add	r7, sp, #0
200007b2:	0002      	movs	r2, r0
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200007b8:	2040      	movs	r0, #64	; 0x40
200007ba:	f7ff ff71 	bl	200006a0 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
200007be:	4b1c      	ldr	r3, [pc, #112]	; (20000830 <graphic_read+0x84>)
200007c0:	4a1c      	ldr	r2, [pc, #112]	; (20000834 <graphic_read+0x88>)
200007c2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RS | BITMASK_RW);
200007c4:	2003      	movs	r0, #3
200007c6:	f7ff ff49 	bl	2000065c <graphic_ctrl_bit_set>
    select_controller(controller);
200007ca:	1dfb      	adds	r3, r7, #7
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	0018      	movs	r0, r3
200007d0:	f7ff ff88 	bl	200006e4 <select_controller>
    delay_500ns();
200007d4:	f000 fac2 	bl	20000d5c <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
200007d8:	2040      	movs	r0, #64	; 0x40
200007da:	f7ff ff3f 	bl	2000065c <graphic_ctrl_bit_set>
    delay_500ns();
200007de:	f000 fabd 	bl	20000d5c <delay_500ns>
    uint8_t returnvalue = GPIO_E->idr_high;
200007e2:	4a13      	ldr	r2, [pc, #76]	; (20000830 <graphic_read+0x84>)
200007e4:	230f      	movs	r3, #15
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	7c52      	ldrb	r2, [r2, #17]
200007ea:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200007ec:	2040      	movs	r0, #64	; 0x40
200007ee:	f7ff ff57 	bl	200006a0 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555;
200007f2:	4b0f      	ldr	r3, [pc, #60]	; (20000830 <graphic_read+0x84>)
200007f4:	4a10      	ldr	r2, [pc, #64]	; (20000838 <graphic_read+0x8c>)
200007f6:	601a      	str	r2, [r3, #0]
    if(controller & BITMASK_CS1) {
200007f8:	1dfb      	adds	r3, r7, #7
200007fa:	781b      	ldrb	r3, [r3, #0]
200007fc:	2208      	movs	r2, #8
200007fe:	4013      	ands	r3, r2
20000800:	d004      	beq.n	2000080c <graphic_read+0x60>
        select_controller(BITMASK_CS1);
20000802:	2008      	movs	r0, #8
20000804:	f7ff ff6e 	bl	200006e4 <select_controller>
        graphic_wait_ready();
20000808:	f7ff ff99 	bl	2000073e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	781b      	ldrb	r3, [r3, #0]
20000810:	2210      	movs	r2, #16
20000812:	4013      	ands	r3, r2
20000814:	d004      	beq.n	20000820 <graphic_read+0x74>
        select_controller(BITMASK_CS1);
20000816:	2008      	movs	r0, #8
20000818:	f7ff ff64 	bl	200006e4 <select_controller>
        graphic_wait_ready();
2000081c:	f7ff ff8f 	bl	2000073e <graphic_wait_ready>
    }
    return returnvalue;
20000820:	230f      	movs	r3, #15
20000822:	18fb      	adds	r3, r7, r3
20000824:	781b      	ldrb	r3, [r3, #0]
}
20000826:	0018      	movs	r0, r3
20000828:	46bd      	mov	sp, r7
2000082a:	b004      	add	sp, #16
2000082c:	bd80      	pop	{r7, pc}
2000082e:	46c0      	nop			; (mov r8, r8)
20000830:	40021000 	andmi	r1, r2, r0
20000834:	00005555 	andeq	r5, r0, r5, asr r5
20000838:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000083c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	0002      	movs	r2, r0
20000844:	1dfb      	adds	r3, r7, #7
20000846:	701a      	strb	r2, [r3, #0]
20000848:	1dbb      	adds	r3, r7, #6
2000084a:	1c0a      	adds	r2, r1, #0
2000084c:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_high = value;
2000084e:	4a1a      	ldr	r2, [pc, #104]	; (200008b8 <graphic_write+0x7c>)
20000850:	1dfb      	adds	r3, r7, #7
20000852:	781b      	ldrb	r3, [r3, #0]
20000854:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
20000856:	1dbb      	adds	r3, r7, #6
20000858:	781b      	ldrb	r3, [r3, #0]
2000085a:	0018      	movs	r0, r3
2000085c:	f7ff ff42 	bl	200006e4 <select_controller>
    delay_500ns();
20000860:	f000 fa7c 	bl	20000d5c <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000864:	2040      	movs	r0, #64	; 0x40
20000866:	f7ff fef9 	bl	2000065c <graphic_ctrl_bit_set>
    delay_500ns();
2000086a:	f000 fa77 	bl	20000d5c <delay_500ns>
    graphic_ctrl_bit_clear(BITMASK_E);
2000086e:	2040      	movs	r0, #64	; 0x40
20000870:	f7ff ff16 	bl	200006a0 <graphic_ctrl_bit_clear>
    if(controller & BITMASK_CS1) {
20000874:	1dbb      	adds	r3, r7, #6
20000876:	781b      	ldrb	r3, [r3, #0]
20000878:	2208      	movs	r2, #8
2000087a:	4013      	ands	r3, r2
2000087c:	d004      	beq.n	20000888 <graphic_write+0x4c>
        select_controller(BITMASK_CS1);
2000087e:	2008      	movs	r0, #8
20000880:	f7ff ff30 	bl	200006e4 <select_controller>
        graphic_wait_ready();
20000884:	f7ff ff5b 	bl	2000073e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
20000888:	1dbb      	adds	r3, r7, #6
2000088a:	781b      	ldrb	r3, [r3, #0]
2000088c:	2210      	movs	r2, #16
2000088e:	4013      	ands	r3, r2
20000890:	d004      	beq.n	2000089c <graphic_write+0x60>
        select_controller(BITMASK_CS2);
20000892:	2010      	movs	r0, #16
20000894:	f7ff ff26 	bl	200006e4 <select_controller>
        graphic_wait_ready();
20000898:	f7ff ff51 	bl	2000073e <graphic_wait_ready>
    }
    GPIO_E->odr_high = 0;
2000089c:	4b06      	ldr	r3, [pc, #24]	; (200008b8 <graphic_write+0x7c>)
2000089e:	2200      	movs	r2, #0
200008a0:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(BITMASK_E);
200008a2:	2040      	movs	r0, #64	; 0x40
200008a4:	f7ff feda 	bl	2000065c <graphic_ctrl_bit_set>
    select_controller(0);
200008a8:	2000      	movs	r0, #0
200008aa:	f7ff ff1b 	bl	200006e4 <select_controller>
}
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	46bd      	mov	sp, r7
200008b2:	b002      	add	sp, #8
200008b4:	bd80      	pop	{r7, pc}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	40021000 	andmi	r1, r2, r0

200008bc <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
200008bc:	b580      	push	{r7, lr}
200008be:	b082      	sub	sp, #8
200008c0:	af00      	add	r7, sp, #0
200008c2:	0002      	movs	r2, r0
200008c4:	1dfb      	adds	r3, r7, #7
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	1dbb      	adds	r3, r7, #6
200008ca:	1c0a      	adds	r2, r1, #0
200008cc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200008ce:	2040      	movs	r0, #64	; 0x40
200008d0:	f7ff fee6 	bl	200006a0 <graphic_ctrl_bit_clear>
    select_controller(controller);
200008d4:	1dbb      	adds	r3, r7, #6
200008d6:	781b      	ldrb	r3, [r3, #0]
200008d8:	0018      	movs	r0, r3
200008da:	f7ff ff03 	bl	200006e4 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
200008de:	2003      	movs	r0, #3
200008e0:	f7ff fede 	bl	200006a0 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
200008e4:	1dbb      	adds	r3, r7, #6
200008e6:	781a      	ldrb	r2, [r3, #0]
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	0011      	movs	r1, r2
200008ee:	0018      	movs	r0, r3
200008f0:	f7ff ffa4 	bl	2000083c <graphic_write>
}
200008f4:	46c0      	nop			; (mov r8, r8)
200008f6:	46bd      	mov	sp, r7
200008f8:	b002      	add	sp, #8
200008fa:	bd80      	pop	{r7, pc}

200008fc <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
200008fc:	b580      	push	{r7, lr}
200008fe:	b082      	sub	sp, #8
20000900:	af00      	add	r7, sp, #0
20000902:	0002      	movs	r2, r0
20000904:	1dfb      	adds	r3, r7, #7
20000906:	701a      	strb	r2, [r3, #0]
20000908:	1dbb      	adds	r3, r7, #6
2000090a:	1c0a      	adds	r2, r1, #0
2000090c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
2000090e:	2040      	movs	r0, #64	; 0x40
20000910:	f7ff fec6 	bl	200006a0 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000914:	1dbb      	adds	r3, r7, #6
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	0018      	movs	r0, r3
2000091a:	f7ff fee3 	bl	200006e4 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RW);
2000091e:	2002      	movs	r0, #2
20000920:	f7ff febe 	bl	200006a0 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(BITMASK_RS);
20000924:	2001      	movs	r0, #1
20000926:	f7ff fe99 	bl	2000065c <graphic_ctrl_bit_set>
    graphic_write(data, controller);
2000092a:	1dbb      	adds	r3, r7, #6
2000092c:	781a      	ldrb	r2, [r3, #0]
2000092e:	1dfb      	adds	r3, r7, #7
20000930:	781b      	ldrb	r3, [r3, #0]
20000932:	0011      	movs	r1, r2
20000934:	0018      	movs	r0, r3
20000936:	f7ff ff81 	bl	2000083c <graphic_write>
}
2000093a:	46c0      	nop			; (mov r8, r8)
2000093c:	46bd      	mov	sp, r7
2000093e:	b002      	add	sp, #8
20000940:	bd80      	pop	{r7, pc}

20000942 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
20000942:	b580      	push	{r7, lr}
20000944:	b082      	sub	sp, #8
20000946:	af00      	add	r7, sp, #0
20000948:	0002      	movs	r2, r0
2000094a:	1dfb      	adds	r3, r7, #7
2000094c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000094e:	1dfb      	adds	r3, r7, #7
20000950:	781b      	ldrb	r3, [r3, #0]
20000952:	0018      	movs	r0, r3
20000954:	f7ff ff2a 	bl	200007ac <graphic_read>
    return graphic_read(controller);
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	0018      	movs	r0, r3
2000095e:	f7ff ff25 	bl	200007ac <graphic_read>
20000962:	0003      	movs	r3, r0
}
20000964:	0018      	movs	r0, r3
20000966:	46bd      	mov	sp, r7
20000968:	b002      	add	sp, #8
2000096a:	bd80      	pop	{r7, pc}

2000096c <pixel>:

void pixel(uint8_t x, uint8_t y, bool set) {
2000096c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000096e:	b085      	sub	sp, #20
20000970:	af00      	add	r7, sp, #0
20000972:	0004      	movs	r4, r0
20000974:	0008      	movs	r0, r1
20000976:	0011      	movs	r1, r2
20000978:	1dfb      	adds	r3, r7, #7
2000097a:	1c22      	adds	r2, r4, #0
2000097c:	701a      	strb	r2, [r3, #0]
2000097e:	1dbb      	adds	r3, r7, #6
20000980:	1c02      	adds	r2, r0, #0
20000982:	701a      	strb	r2, [r3, #0]
20000984:	1d7b      	adds	r3, r7, #5
20000986:	1c0a      	adds	r2, r1, #0
20000988:	701a      	strb	r2, [r3, #0]
    // Create bitmask for the pixel
    uint8_t index, mask, controller;
    index = (y-1) / 8;
2000098a:	1dbb      	adds	r3, r7, #6
2000098c:	781b      	ldrb	r3, [r3, #0]
2000098e:	3b01      	subs	r3, #1
20000990:	2b00      	cmp	r3, #0
20000992:	da00      	bge.n	20000996 <pixel+0x2a>
20000994:	3307      	adds	r3, #7
20000996:	10db      	asrs	r3, r3, #3
20000998:	001a      	movs	r2, r3
2000099a:	230d      	movs	r3, #13
2000099c:	18fb      	adds	r3, r7, r3
2000099e:	701a      	strb	r2, [r3, #0]
    mask = 0x1 << ((y-1) % 8);
200009a0:	1dbb      	adds	r3, r7, #6
200009a2:	781b      	ldrb	r3, [r3, #0]
200009a4:	3b01      	subs	r3, #1
200009a6:	4a3e      	ldr	r2, [pc, #248]	; (20000aa0 <pixel+0x134>)
200009a8:	4013      	ands	r3, r2
200009aa:	d504      	bpl.n	200009b6 <pixel+0x4a>
200009ac:	3b01      	subs	r3, #1
200009ae:	2208      	movs	r2, #8
200009b0:	4252      	negs	r2, r2
200009b2:	4313      	orrs	r3, r2
200009b4:	3301      	adds	r3, #1
200009b6:	001a      	movs	r2, r3
200009b8:	2301      	movs	r3, #1
200009ba:	4093      	lsls	r3, r2
200009bc:	001a      	movs	r2, r3
200009be:	230f      	movs	r3, #15
200009c0:	18fb      	adds	r3, r7, r3
200009c2:	701a      	strb	r2, [r3, #0]
    if (x > 64) {
200009c4:	1dfb      	adds	r3, r7, #7
200009c6:	781b      	ldrb	r3, [r3, #0]
200009c8:	2b40      	cmp	r3, #64	; 0x40
200009ca:	d909      	bls.n	200009e0 <pixel+0x74>
        controller = BITMASK_CS2;
200009cc:	230e      	movs	r3, #14
200009ce:	18fb      	adds	r3, r7, r3
200009d0:	2210      	movs	r2, #16
200009d2:	701a      	strb	r2, [r3, #0]
        x -= 65;
200009d4:	1dfb      	adds	r3, r7, #7
200009d6:	1dfa      	adds	r2, r7, #7
200009d8:	7812      	ldrb	r2, [r2, #0]
200009da:	3a41      	subs	r2, #65	; 0x41
200009dc:	701a      	strb	r2, [r3, #0]
200009de:	e008      	b.n	200009f2 <pixel+0x86>
    }else {
        controller = BITMASK_CS1;
200009e0:	230e      	movs	r3, #14
200009e2:	18fb      	adds	r3, r7, r3
200009e4:	2208      	movs	r2, #8
200009e6:	701a      	strb	r2, [r3, #0]
        x--;
200009e8:	1dfb      	adds	r3, r7, #7
200009ea:	781a      	ldrb	r2, [r3, #0]
200009ec:	1dfb      	adds	r3, r7, #7
200009ee:	3a01      	subs	r2, #1
200009f0:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
200009f2:	1dfb      	adds	r3, r7, #7
200009f4:	781b      	ldrb	r3, [r3, #0]
200009f6:	2240      	movs	r2, #64	; 0x40
200009f8:	4313      	orrs	r3, r2
200009fa:	b2da      	uxtb	r2, r3
200009fc:	250e      	movs	r5, #14
200009fe:	197b      	adds	r3, r7, r5
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	0019      	movs	r1, r3
20000a04:	0010      	movs	r0, r2
20000a06:	f7ff ff59 	bl	200008bc <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000a0a:	230d      	movs	r3, #13
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	781b      	ldrb	r3, [r3, #0]
20000a10:	2248      	movs	r2, #72	; 0x48
20000a12:	4252      	negs	r2, r2
20000a14:	4313      	orrs	r3, r2
20000a16:	b2da      	uxtb	r2, r3
20000a18:	197b      	adds	r3, r7, r5
20000a1a:	781b      	ldrb	r3, [r3, #0]
20000a1c:	0019      	movs	r1, r3
20000a1e:	0010      	movs	r0, r2
20000a20:	f7ff ff4c 	bl	200008bc <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000a24:	260c      	movs	r6, #12
20000a26:	19bc      	adds	r4, r7, r6
20000a28:	197b      	adds	r3, r7, r5
20000a2a:	781b      	ldrb	r3, [r3, #0]
20000a2c:	0018      	movs	r0, r3
20000a2e:	f7ff ff88 	bl	20000942 <graphic_read_data>
20000a32:	0003      	movs	r3, r0
20000a34:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000a36:	1dfb      	adds	r3, r7, #7
20000a38:	781b      	ldrb	r3, [r3, #0]
20000a3a:	2240      	movs	r2, #64	; 0x40
20000a3c:	4313      	orrs	r3, r2
20000a3e:	b2da      	uxtb	r2, r3
20000a40:	197b      	adds	r3, r7, r5
20000a42:	781b      	ldrb	r3, [r3, #0]
20000a44:	0019      	movs	r1, r3
20000a46:	0010      	movs	r0, r2
20000a48:	f7ff ff38 	bl	200008bc <graphic_write_command>
    if (set) {
20000a4c:	1d7b      	adds	r3, r7, #5
20000a4e:	781b      	ldrb	r3, [r3, #0]
20000a50:	2b00      	cmp	r3, #0
20000a52:	d008      	beq.n	20000a66 <pixel+0xfa>
        mask |= temp;
20000a54:	220f      	movs	r2, #15
20000a56:	18bb      	adds	r3, r7, r2
20000a58:	18b9      	adds	r1, r7, r2
20000a5a:	19ba      	adds	r2, r7, r6
20000a5c:	7809      	ldrb	r1, [r1, #0]
20000a5e:	7812      	ldrb	r2, [r2, #0]
20000a60:	430a      	orrs	r2, r1
20000a62:	701a      	strb	r2, [r3, #0]
20000a64:	e00d      	b.n	20000a82 <pixel+0x116>
    }else {
        mask = ~mask & temp;
20000a66:	210f      	movs	r1, #15
20000a68:	187b      	adds	r3, r7, r1
20000a6a:	781b      	ldrb	r3, [r3, #0]
20000a6c:	b25b      	sxtb	r3, r3
20000a6e:	43db      	mvns	r3, r3
20000a70:	b25b      	sxtb	r3, r3
20000a72:	220c      	movs	r2, #12
20000a74:	18ba      	adds	r2, r7, r2
20000a76:	7812      	ldrb	r2, [r2, #0]
20000a78:	b252      	sxtb	r2, r2
20000a7a:	4013      	ands	r3, r2
20000a7c:	b25a      	sxtb	r2, r3
20000a7e:	187b      	adds	r3, r7, r1
20000a80:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000a82:	230e      	movs	r3, #14
20000a84:	18fb      	adds	r3, r7, r3
20000a86:	781a      	ldrb	r2, [r3, #0]
20000a88:	230f      	movs	r3, #15
20000a8a:	18fb      	adds	r3, r7, r3
20000a8c:	781b      	ldrb	r3, [r3, #0]
20000a8e:	0011      	movs	r1, r2
20000a90:	0018      	movs	r0, r3
20000a92:	f7ff ff33 	bl	200008fc <graphic_write_data>
}
20000a96:	46c0      	nop			; (mov r8, r8)
20000a98:	46bd      	mov	sp, r7
20000a9a:	b005      	add	sp, #20
20000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a9e:	46c0      	nop			; (mov r8, r8)
20000aa0:	80000007 	andhi	r0, r0, r7

20000aa4 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000aa4:	b580      	push	{r7, lr}
20000aa6:	b082      	sub	sp, #8
20000aa8:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++ ) {
20000aaa:	1dfb      	adds	r3, r7, #7
20000aac:	2200      	movs	r2, #0
20000aae:	701a      	strb	r2, [r3, #0]
20000ab0:	e023      	b.n	20000afa <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page, BITMASK_CS1 | BITMASK_CS2);
20000ab2:	1dfb      	adds	r3, r7, #7
20000ab4:	781b      	ldrb	r3, [r3, #0]
20000ab6:	2248      	movs	r2, #72	; 0x48
20000ab8:	4252      	negs	r2, r2
20000aba:	4313      	orrs	r3, r2
20000abc:	b2db      	uxtb	r3, r3
20000abe:	2118      	movs	r1, #24
20000ac0:	0018      	movs	r0, r3
20000ac2:	f7ff fefb 	bl	200008bc <graphic_write_command>
        graphic_write_command(LCD_SET_ADD  | 0, BITMASK_CS1 | BITMASK_CS2);
20000ac6:	2118      	movs	r1, #24
20000ac8:	2040      	movs	r0, #64	; 0x40
20000aca:	f7ff fef7 	bl	200008bc <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
20000ace:	1dbb      	adds	r3, r7, #6
20000ad0:	2200      	movs	r2, #0
20000ad2:	701a      	strb	r2, [r3, #0]
20000ad4:	e008      	b.n	20000ae8 <graphic_clear_screen+0x44>
            graphic_write_data(0, BITMASK_CS1 | BITMASK_CS2);
20000ad6:	2118      	movs	r1, #24
20000ad8:	2000      	movs	r0, #0
20000ada:	f7ff ff0f 	bl	200008fc <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
20000ade:	1dbb      	adds	r3, r7, #6
20000ae0:	781a      	ldrb	r2, [r3, #0]
20000ae2:	1dbb      	adds	r3, r7, #6
20000ae4:	3201      	adds	r2, #1
20000ae6:	701a      	strb	r2, [r3, #0]
20000ae8:	1dbb      	adds	r3, r7, #6
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	2b3f      	cmp	r3, #63	; 0x3f
20000aee:	d9f2      	bls.n	20000ad6 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++ ) {
20000af0:	1dfb      	adds	r3, r7, #7
20000af2:	781a      	ldrb	r2, [r3, #0]
20000af4:	1dfb      	adds	r3, r7, #7
20000af6:	3201      	adds	r2, #1
20000af8:	701a      	strb	r2, [r3, #0]
20000afa:	1dfb      	adds	r3, r7, #7
20000afc:	781b      	ldrb	r3, [r3, #0]
20000afe:	2b07      	cmp	r3, #7
20000b00:	d9d7      	bls.n	20000ab2 <graphic_clear_screen+0xe>
        }
    }
}
20000b02:	46c0      	nop			; (mov r8, r8)
20000b04:	46c0      	nop			; (mov r8, r8)
20000b06:	46bd      	mov	sp, r7
20000b08:	b002      	add	sp, #8
20000b0a:	bd80      	pop	{r7, pc}

20000b0c <graphic_init>:


void graphic_init(void) {
20000b0c:	b580      	push	{r7, lr}
20000b0e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(BITMASK_E);
20000b10:	2040      	movs	r0, #64	; 0x40
20000b12:	f7ff fda3 	bl	2000065c <graphic_ctrl_bit_set>
    delay_micros(10);
20000b16:	200a      	movs	r0, #10
20000b18:	f000 f932 	bl	20000d80 <delay_micros>
    graphic_ctrl_bit_clear(BITMASK_CS1 | BITMASK_CS2 | BITMASK_RESET | BITMASK_E);
20000b1c:	2078      	movs	r0, #120	; 0x78
20000b1e:	f7ff fdbf 	bl	200006a0 <graphic_ctrl_bit_clear>
    delay_millis(30);
20000b22:	201e      	movs	r0, #30
20000b24:	f000 f94a 	bl	20000dbc <delay_millis>
    graphic_ctrl_bit_set(BITMASK_RESET);
20000b28:	2020      	movs	r0, #32
20000b2a:	f7ff fd97 	bl	2000065c <graphic_ctrl_bit_set>
    
    // Toggle display
    graphic_write_command(LCD_OFF, BITMASK_CS1 | BITMASK_CS2);
20000b2e:	2118      	movs	r1, #24
20000b30:	203e      	movs	r0, #62	; 0x3e
20000b32:	f7ff fec3 	bl	200008bc <graphic_write_command>
    graphic_write_command(LCD_ON, BITMASK_CS1 | BITMASK_CS2);
20000b36:	2118      	movs	r1, #24
20000b38:	203f      	movs	r0, #63	; 0x3f
20000b3a:	f7ff febf 	bl	200008bc <graphic_write_command>
    //Start = 0
    graphic_write_command(LCD_DISP_START, BITMASK_CS1 | BITMASK_CS2);
20000b3e:	2118      	movs	r1, #24
20000b40:	20c0      	movs	r0, #192	; 0xc0
20000b42:	f7ff febb 	bl	200008bc <graphic_write_command>
    // Add = 0
    graphic_write_command(LCD_SET_ADD, BITMASK_CS1 | BITMASK_CS2);
20000b46:	2118      	movs	r1, #24
20000b48:	2040      	movs	r0, #64	; 0x40
20000b4a:	f7ff feb7 	bl	200008bc <graphic_write_command>
    // Page = 0
    graphic_write_command(LCD_SET_PAGE, BITMASK_CS1 | BITMASK_CS2);
20000b4e:	2118      	movs	r1, #24
20000b50:	20b8      	movs	r0, #184	; 0xb8
20000b52:	f7ff feb3 	bl	200008bc <graphic_write_command>
    // Deactivate both CS signals
    select_controller(0);
20000b56:	2000      	movs	r0, #0
20000b58:	f7ff fdc4 	bl	200006e4 <select_controller>
20000b5c:	46c0      	nop			; (mov r8, r8)
20000b5e:	46bd      	mov	sp, r7
20000b60:	bd80      	pop	{r7, pc}
20000b62:	46c0      	nop			; (mov r8, r8)

20000b64 <init_GPIO>:
20000b64:	6001      	str	r1, [r0, #0]
20000b66:	4770      	bx	lr

20000b68 <GPIO_split_mode>:
20000b68:	424b      	negs	r3, r1
20000b6a:	4159      	adcs	r1, r3
20000b6c:	4b05      	ldr	r3, [pc, #20]	; (20000b84 <GPIO_split_mode+0x1c>)
20000b6e:	4249      	negs	r1, r1
20000b70:	4019      	ands	r1, r3
20000b72:	4b05      	ldr	r3, [pc, #20]	; (20000b88 <GPIO_split_mode+0x20>)
20000b74:	469c      	mov	ip, r3
20000b76:	4461      	add	r1, ip
20000b78:	2a00      	cmp	r2, #0
20000b7a:	d001      	beq.n	20000b80 <GPIO_split_mode+0x18>
20000b7c:	4b03      	ldr	r3, [pc, #12]	; (20000b8c <GPIO_split_mode+0x24>)
20000b7e:	4319      	orrs	r1, r3
20000b80:	6001      	str	r1, [r0, #0]
20000b82:	4770      	bx	lr
20000b84:	aaab0000 	bge	1eac0b8c <startup-0x153f474>
20000b88:	55550000 	ldrbpl	r0, [r5, #-0]
20000b8c:	00005555 	andeq	r5, r0, r5, asr r5

20000b90 <GPIO_output>:
20000b90:	4b01      	ldr	r3, [pc, #4]	; (20000b98 <GPIO_output+0x8>)
20000b92:	6003      	str	r3, [r0, #0]
20000b94:	4770      	bx	lr
20000b96:	46c0      	nop			; (mov r8, r8)
20000b98:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000b9c <GPIO_input>:
20000b9c:	2300      	movs	r3, #0
20000b9e:	6003      	str	r3, [r0, #0]
20000ba0:	4770      	bx	lr
20000ba2:	46c0      	nop			; (mov r8, r8)

20000ba4 <GPIO_clock_start>:
20000ba4:	2218      	movs	r2, #24
20000ba6:	4b01      	ldr	r3, [pc, #4]	; (20000bac <GPIO_clock_start+0x8>)
20000ba8:	601a      	str	r2, [r3, #0]
20000baa:	4770      	bx	lr
20000bac:	40023830 	andmi	r3, r2, r0, lsr r8

20000bb0 <GPIO_init_keypad>:
20000bb0:	b570      	push	{r4, r5, r6, lr}
20000bb2:	2900      	cmp	r1, #0
20000bb4:	d113      	bne.n	20000bde <GPIO_init_keypad+0x2e>
20000bb6:	23ff      	movs	r3, #255	; 0xff
20000bb8:	26aa      	movs	r6, #170	; 0xaa
20000bba:	25aa      	movs	r5, #170	; 0xaa
20000bbc:	4c0c      	ldr	r4, [pc, #48]	; (20000bf0 <GPIO_init_keypad+0x40>)
20000bbe:	310f      	adds	r1, #15
20000bc0:	021b      	lsls	r3, r3, #8
20000bc2:	01f6      	lsls	r6, r6, #7
20000bc4:	6802      	ldr	r2, [r0, #0]
20000bc6:	4022      	ands	r2, r4
20000bc8:	4332      	orrs	r2, r6
20000bca:	6002      	str	r2, [r0, #0]
20000bcc:	8882      	ldrh	r2, [r0, #4]
20000bce:	401a      	ands	r2, r3
20000bd0:	430a      	orrs	r2, r1
20000bd2:	8082      	strh	r2, [r0, #4]
20000bd4:	68c3      	ldr	r3, [r0, #12]
20000bd6:	4023      	ands	r3, r4
20000bd8:	432b      	orrs	r3, r5
20000bda:	60c3      	str	r3, [r0, #12]
20000bdc:	bd70      	pop	{r4, r5, r6, pc}
20000bde:	21f0      	movs	r1, #240	; 0xf0
20000be0:	25aa      	movs	r5, #170	; 0xaa
20000be2:	26aa      	movs	r6, #170	; 0xaa
20000be4:	23ff      	movs	r3, #255	; 0xff
20000be6:	4c03      	ldr	r4, [pc, #12]	; (20000bf4 <GPIO_init_keypad+0x44>)
20000be8:	0109      	lsls	r1, r1, #4
20000bea:	042d      	lsls	r5, r5, #16
20000bec:	05f6      	lsls	r6, r6, #23
20000bee:	e7e9      	b.n	20000bc4 <GPIO_init_keypad+0x14>
20000bf0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20000bf4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000bf8 <activate_row>:
20000bf8:	2308      	movs	r3, #8
20000bfa:	4093      	lsls	r3, r2
20000bfc:	b2db      	uxtb	r3, r3
20000bfe:	2900      	cmp	r1, #0
20000c00:	d001      	beq.n	20000c06 <activate_row+0xe>
20000c02:	7543      	strb	r3, [r0, #21]
20000c04:	4770      	bx	lr
20000c06:	7503      	strb	r3, [r0, #20]
20000c08:	e7fc      	b.n	20000c04 <activate_row+0xc>
20000c0a:	46c0      	nop			; (mov r8, r8)

20000c0c <read_column>:
20000c0c:	2900      	cmp	r1, #0
20000c0e:	d00a      	beq.n	20000c26 <read_column+0x1a>
20000c10:	230f      	movs	r3, #15
20000c12:	7c42      	ldrb	r2, [r0, #17]
20000c14:	4013      	ands	r3, r2
20000c16:	2000      	movs	r0, #0
20000c18:	2b00      	cmp	r3, #0
20000c1a:	d003      	beq.n	20000c24 <read_column+0x18>
20000c1c:	3001      	adds	r0, #1
20000c1e:	b240      	sxtb	r0, r0
20000c20:	085b      	lsrs	r3, r3, #1
20000c22:	d1fb      	bne.n	20000c1c <read_column+0x10>
20000c24:	4770      	bx	lr
20000c26:	230f      	movs	r3, #15
20000c28:	7c02      	ldrb	r2, [r0, #16]
20000c2a:	4013      	ands	r3, r2
20000c2c:	e7f3      	b.n	20000c16 <read_column+0xa>
20000c2e:	46c0      	nop			; (mov r8, r8)

20000c30 <key_value>:
20000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000c32:	b085      	sub	sp, #20
20000c34:	466a      	mov	r2, sp
20000c36:	0014      	movs	r4, r2
20000c38:	4b0b      	ldr	r3, [pc, #44]	; (20000c68 <key_value+0x38>)
20000c3a:	3801      	subs	r0, #1
20000c3c:	cbe0      	ldmia	r3!, {r5, r6, r7}
20000c3e:	c4e0      	stmia	r4!, {r5, r6, r7}
20000c40:	681b      	ldr	r3, [r3, #0]
20000c42:	6023      	str	r3, [r4, #0]
20000c44:	b2c3      	uxtb	r3, r0
20000c46:	2b03      	cmp	r3, #3
20000c48:	d80a      	bhi.n	20000c60 <key_value+0x30>
20000c4a:	1e4b      	subs	r3, r1, #1
20000c4c:	b2db      	uxtb	r3, r3
20000c4e:	2b03      	cmp	r3, #3
20000c50:	d806      	bhi.n	20000c60 <key_value+0x30>
20000c52:	0080      	lsls	r0, r0, #2
20000c54:	1812      	adds	r2, r2, r0
20000c56:	2001      	movs	r0, #1
20000c58:	1852      	adds	r2, r2, r1
20000c5a:	4240      	negs	r0, r0
20000c5c:	5610      	ldrsb	r0, [r2, r0]
20000c5e:	e000      	b.n	20000c62 <key_value+0x32>
20000c60:	2000      	movs	r0, #0
20000c62:	b005      	add	sp, #20
20000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000c66:	46c0      	nop			; (mov r8, r8)
20000c68:	200012b8 			; <UNDEFINED> instruction: 0x200012b8

20000c6c <GPIO_read_keypad>:
20000c6c:	2301      	movs	r3, #1
20000c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
20000c70:	46c6      	mov	lr, r8
20000c72:	0005      	movs	r5, r0
20000c74:	469c      	mov	ip, r3
20000c76:	2708      	movs	r7, #8
20000c78:	260f      	movs	r6, #15
20000c7a:	b500      	push	{lr}
20000c7c:	b084      	sub	sp, #16
20000c7e:	003b      	movs	r3, r7
20000c80:	4662      	mov	r2, ip
20000c82:	4093      	lsls	r3, r2
20000c84:	b2db      	uxtb	r3, r3
20000c86:	2900      	cmp	r1, #0
20000c88:	d017      	beq.n	20000cba <GPIO_read_keypad+0x4e>
20000c8a:	756b      	strb	r3, [r5, #21]
20000c8c:	7c68      	ldrb	r0, [r5, #17]
20000c8e:	4030      	ands	r0, r6
20000c90:	2800      	cmp	r0, #0
20000c92:	d007      	beq.n	20000ca4 <GPIO_read_keypad+0x38>
20000c94:	2300      	movs	r3, #0
20000c96:	b2da      	uxtb	r2, r3
20000c98:	1c53      	adds	r3, r2, #1
20000c9a:	b25b      	sxtb	r3, r3
20000c9c:	0840      	lsrs	r0, r0, #1
20000c9e:	d1fa      	bne.n	20000c96 <GPIO_read_keypad+0x2a>
20000ca0:	2b00      	cmp	r3, #0
20000ca2:	d10e      	bne.n	20000cc2 <GPIO_read_keypad+0x56>
20000ca4:	2301      	movs	r3, #1
20000ca6:	4698      	mov	r8, r3
20000ca8:	44c4      	add	ip, r8
20000caa:	4663      	mov	r3, ip
20000cac:	2b05      	cmp	r3, #5
20000cae:	d1e6      	bne.n	20000c7e <GPIO_read_keypad+0x12>
20000cb0:	2010      	movs	r0, #16
20000cb2:	b004      	add	sp, #16
20000cb4:	bc04      	pop	{r2}
20000cb6:	4690      	mov	r8, r2
20000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000cba:	752b      	strb	r3, [r5, #20]
20000cbc:	7c28      	ldrb	r0, [r5, #16]
20000cbe:	4030      	ands	r0, r6
20000cc0:	e7e6      	b.n	20000c90 <GPIO_read_keypad+0x24>
20000cc2:	46e8      	mov	r8, sp
20000cc4:	4646      	mov	r6, r8
20000cc6:	4d07      	ldr	r5, [pc, #28]	; (20000ce4 <GPIO_read_keypad+0x78>)
20000cc8:	cd92      	ldmia	r5!, {r1, r4, r7}
20000cca:	c692      	stmia	r6!, {r1, r4, r7}
20000ccc:	682d      	ldr	r5, [r5, #0]
20000cce:	6035      	str	r5, [r6, #0]
20000cd0:	2a03      	cmp	r2, #3
20000cd2:	d8ee      	bhi.n	20000cb2 <GPIO_read_keypad+0x46>
20000cd4:	4664      	mov	r4, ip
20000cd6:	3c01      	subs	r4, #1
20000cd8:	00a4      	lsls	r4, r4, #2
20000cda:	4444      	add	r4, r8
20000cdc:	18e3      	adds	r3, r4, r3
20000cde:	3b01      	subs	r3, #1
20000ce0:	7818      	ldrb	r0, [r3, #0]
20000ce2:	e7e6      	b.n	20000cb2 <GPIO_read_keypad+0x46>
20000ce4:	200012b8 			; <UNDEFINED> instruction: 0x200012b8

20000ce8 <GPIO_init_seven_seg>:
20000ce8:	1e4b      	subs	r3, r1, #1
20000cea:	4199      	sbcs	r1, r3
20000cec:	4b03      	ldr	r3, [pc, #12]	; (20000cfc <GPIO_init_seven_seg+0x14>)
20000cee:	4249      	negs	r1, r1
20000cf0:	4019      	ands	r1, r3
20000cf2:	4b03      	ldr	r3, [pc, #12]	; (20000d00 <GPIO_init_seven_seg+0x18>)
20000cf4:	469c      	mov	ip, r3
20000cf6:	4461      	add	r1, ip
20000cf8:	6001      	str	r1, [r0, #0]
20000cfa:	4770      	bx	lr
20000cfc:	5554aaab 	ldrbpl	sl, [r4, #-2731]	; 0xfffff555
20000d00:	00005555 	andeq	r5, r0, r5, asr r5

20000d04 <GPIO_put_seven_seg>:
20000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
20000d06:	b085      	sub	sp, #20
20000d08:	466c      	mov	r4, sp
20000d0a:	468c      	mov	ip, r1
20000d0c:	0025      	movs	r5, r4
20000d0e:	4b09      	ldr	r3, [pc, #36]	; (20000d34 <GPIO_put_seven_seg+0x30>)
20000d10:	cbc2      	ldmia	r3!, {r1, r6, r7}
20000d12:	c5c2      	stmia	r5!, {r1, r6, r7}
20000d14:	4661      	mov	r1, ip
20000d16:	681b      	ldr	r3, [r3, #0]
20000d18:	602b      	str	r3, [r5, #0]
20000d1a:	1e4b      	subs	r3, r1, #1
20000d1c:	4199      	sbcs	r1, r3
20000d1e:	1841      	adds	r1, r0, r1
20000d20:	3114      	adds	r1, #20
20000d22:	2a0f      	cmp	r2, #15
20000d24:	d803      	bhi.n	20000d2e <GPIO_put_seven_seg+0x2a>
20000d26:	5ca3      	ldrb	r3, [r4, r2]
20000d28:	700b      	strb	r3, [r1, #0]
20000d2a:	b005      	add	sp, #20
20000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000d2e:	2300      	movs	r3, #0
20000d30:	700b      	strb	r3, [r1, #0]
20000d32:	e7fa      	b.n	20000d2a <GPIO_put_seven_seg+0x26>
20000d34:	200012c8 	andcs	r1, r0, r8, asr #5

20000d38 <delay_250ns>:
20000d38:	2300      	movs	r3, #0
20000d3a:	2129      	movs	r1, #41	; 0x29
20000d3c:	4a06      	ldr	r2, [pc, #24]	; (20000d58 <delay_250ns+0x20>)
20000d3e:	6013      	str	r3, [r2, #0]
20000d40:	6051      	str	r1, [r2, #4]
20000d42:	2180      	movs	r1, #128	; 0x80
20000d44:	6093      	str	r3, [r2, #8]
20000d46:	3305      	adds	r3, #5
20000d48:	6013      	str	r3, [r2, #0]
20000d4a:	0249      	lsls	r1, r1, #9
20000d4c:	6813      	ldr	r3, [r2, #0]
20000d4e:	420b      	tst	r3, r1
20000d50:	d0fc      	beq.n	20000d4c <delay_250ns+0x14>
20000d52:	2300      	movs	r3, #0
20000d54:	6013      	str	r3, [r2, #0]
20000d56:	4770      	bx	lr
20000d58:	e000e010 	and	lr, r0, r0, lsl r0

20000d5c <delay_500ns>:
20000d5c:	2300      	movs	r3, #0
20000d5e:	2153      	movs	r1, #83	; 0x53
20000d60:	4a06      	ldr	r2, [pc, #24]	; (20000d7c <delay_500ns+0x20>)
20000d62:	6013      	str	r3, [r2, #0]
20000d64:	6051      	str	r1, [r2, #4]
20000d66:	2180      	movs	r1, #128	; 0x80
20000d68:	6093      	str	r3, [r2, #8]
20000d6a:	3305      	adds	r3, #5
20000d6c:	6013      	str	r3, [r2, #0]
20000d6e:	0249      	lsls	r1, r1, #9
20000d70:	6813      	ldr	r3, [r2, #0]
20000d72:	420b      	tst	r3, r1
20000d74:	d0fc      	beq.n	20000d70 <delay_500ns+0x14>
20000d76:	2300      	movs	r3, #0
20000d78:	6013      	str	r3, [r2, #0]
20000d7a:	4770      	bx	lr
20000d7c:	e000e010 	and	lr, r0, r0, lsl r0

20000d80 <delay_micros>:
20000d80:	2280      	movs	r2, #128	; 0x80
20000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
20000d84:	2400      	movs	r4, #0
20000d86:	2700      	movs	r7, #0
20000d88:	2653      	movs	r6, #83	; 0x53
20000d8a:	2505      	movs	r5, #5
20000d8c:	4b0a      	ldr	r3, [pc, #40]	; (20000db8 <delay_micros+0x38>)
20000d8e:	0a80      	lsrs	r0, r0, #10
20000d90:	0252      	lsls	r2, r2, #9
20000d92:	601f      	str	r7, [r3, #0]
20000d94:	605e      	str	r6, [r3, #4]
20000d96:	609f      	str	r7, [r3, #8]
20000d98:	601d      	str	r5, [r3, #0]
20000d9a:	6819      	ldr	r1, [r3, #0]
20000d9c:	4211      	tst	r1, r2
20000d9e:	d0fc      	beq.n	20000d9a <delay_micros+0x1a>
20000da0:	601c      	str	r4, [r3, #0]
20000da2:	601c      	str	r4, [r3, #0]
20000da4:	605e      	str	r6, [r3, #4]
20000da6:	609c      	str	r4, [r3, #8]
20000da8:	601d      	str	r5, [r3, #0]
20000daa:	6819      	ldr	r1, [r3, #0]
20000dac:	4211      	tst	r1, r2
20000dae:	d0fc      	beq.n	20000daa <delay_micros+0x2a>
20000db0:	601c      	str	r4, [r3, #0]
20000db2:	3801      	subs	r0, #1
20000db4:	d2ed      	bcs.n	20000d92 <delay_micros+0x12>
20000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000db8:	e000e010 	and	lr, r0, r0, lsl r0

20000dbc <delay_millis>:
20000dbc:	0002      	movs	r2, r0
20000dbe:	b510      	push	{r4, lr}
20000dc0:	0140      	lsls	r0, r0, #5
20000dc2:	1a80      	subs	r0, r0, r2
20000dc4:	0080      	lsls	r0, r0, #2
20000dc6:	1880      	adds	r0, r0, r2
20000dc8:	00c0      	lsls	r0, r0, #3
20000dca:	f7ff ffd9 	bl	20000d80 <delay_micros>
20000dce:	bd10      	pop	{r4, pc}

20000dd0 <__errno>:
20000dd0:	e59f3004 	ldr	r3, [pc, #4]	; 20000ddc <__errno+0xc>
20000dd4:	e5930000 	ldr	r0, [r3]
20000dd8:	e12fff1e 	bx	lr
20000ddc:	2000124c 	andcs	r1, r0, ip, asr #4

20000de0 <malloc>:
20000de0:	e92d4010 	push	{r4, lr}
20000de4:	e59f3010 	ldr	r3, [pc, #16]	; 20000dfc <malloc+0x1c>
20000de8:	e1a01000 	mov	r1, r0
20000dec:	e5930000 	ldr	r0, [r3]
20000df0:	eb000050 	bl	20000f38 <_malloc_r>
20000df4:	e8bd4010 	pop	{r4, lr}
20000df8:	e12fff1e 	bx	lr
20000dfc:	2000124c 	andcs	r1, r0, ip, asr #4

20000e00 <free>:
20000e00:	e92d4010 	push	{r4, lr}
20000e04:	e59f3010 	ldr	r3, [pc, #16]	; 20000e1c <free+0x1c>
20000e08:	e1a01000 	mov	r1, r0
20000e0c:	e5930000 	ldr	r0, [r3]
20000e10:	eb000002 	bl	20000e20 <_free_r>
20000e14:	e8bd4010 	pop	{r4, lr}
20000e18:	e12fff1e 	bx	lr
20000e1c:	2000124c 	andcs	r1, r0, ip, asr #4

20000e20 <_free_r>:
20000e20:	e3510000 	cmp	r1, #0
20000e24:	012fff1e 	bxeq	lr
20000e28:	e5113004 	ldr	r3, [r1, #-4]
20000e2c:	e92d4070 	push	{r4, r5, r6, lr}
20000e30:	e3530000 	cmp	r3, #0
20000e34:	e2414004 	sub	r4, r1, #4
20000e38:	b0844003 	addlt	r4, r4, r3
20000e3c:	e1a05000 	mov	r5, r0
20000e40:	eb000098 	bl	200010a8 <__malloc_lock>
20000e44:	e59f20e8 	ldr	r2, [pc, #232]	; 20000f34 <_free_r+0x114>
20000e48:	e5923000 	ldr	r3, [r2]
20000e4c:	e3530000 	cmp	r3, #0
20000e50:	e1a00002 	mov	r0, r2
20000e54:	05843004 	streq	r3, [r4, #4]
20000e58:	05824000 	streq	r4, [r2]
20000e5c:	0a00000a 	beq	20000e8c <_free_r+0x6c>
20000e60:	e1530004 	cmp	r3, r4
20000e64:	9a00000d 	bls	20000ea0 <_free_r+0x80>
20000e68:	e5941000 	ldr	r1, [r4]
20000e6c:	e0842001 	add	r2, r4, r1
20000e70:	e1530002 	cmp	r3, r2
20000e74:	05932000 	ldreq	r2, [r3]
20000e78:	05933004 	ldreq	r3, [r3, #4]
20000e7c:	00822001 	addeq	r2, r2, r1
20000e80:	05842000 	streq	r2, [r4]
20000e84:	e5843004 	str	r3, [r4, #4]
20000e88:	e5804000 	str	r4, [r0]
20000e8c:	e1a00005 	mov	r0, r5
20000e90:	eb000085 	bl	200010ac <__malloc_unlock>
20000e94:	e8bd4070 	pop	{r4, r5, r6, lr}
20000e98:	e12fff1e 	bx	lr
20000e9c:	e1a03002 	mov	r3, r2
20000ea0:	e5932004 	ldr	r2, [r3, #4]
20000ea4:	e1520004 	cmp	r2, r4
20000ea8:	83a01000 	movhi	r1, #0
20000eac:	93a01001 	movls	r1, #1
20000eb0:	e3520000 	cmp	r2, #0
20000eb4:	03a01000 	moveq	r1, #0
20000eb8:	e3510000 	cmp	r1, #0
20000ebc:	1afffff6 	bne	20000e9c <_free_r+0x7c>
20000ec0:	e5931000 	ldr	r1, [r3]
20000ec4:	e0830001 	add	r0, r3, r1
20000ec8:	e1500004 	cmp	r0, r4
20000ecc:	1a00000b 	bne	20000f00 <_free_r+0xe0>
20000ed0:	e5940000 	ldr	r0, [r4]
20000ed4:	e0811000 	add	r1, r1, r0
20000ed8:	e1a00003 	mov	r0, r3
20000edc:	e6801001 	str	r1, [r0], r1
20000ee0:	e1520000 	cmp	r2, r0
20000ee4:	1affffe8 	bne	20000e8c <_free_r+0x6c>
20000ee8:	e5920000 	ldr	r0, [r2]
20000eec:	e5922004 	ldr	r2, [r2, #4]
20000ef0:	e0801001 	add	r1, r0, r1
20000ef4:	e5831000 	str	r1, [r3]
20000ef8:	e5832004 	str	r2, [r3, #4]
20000efc:	eaffffe2 	b	20000e8c <_free_r+0x6c>
20000f00:	83a0300c 	movhi	r3, #12
20000f04:	85853000 	strhi	r3, [r5]
20000f08:	8affffdf 	bhi	20000e8c <_free_r+0x6c>
20000f0c:	e5940000 	ldr	r0, [r4]
20000f10:	e0841000 	add	r1, r4, r0
20000f14:	e1520001 	cmp	r2, r1
20000f18:	05921000 	ldreq	r1, [r2]
20000f1c:	05922004 	ldreq	r2, [r2, #4]
20000f20:	00811000 	addeq	r1, r1, r0
20000f24:	05841000 	streq	r1, [r4]
20000f28:	e5842004 	str	r2, [r4, #4]
20000f2c:	e5834004 	str	r4, [r3, #4]
20000f30:	eaffffd5 	b	20000e8c <_free_r+0x6c>
20000f34:	20002c00 	andcs	r2, r0, r0, lsl #24

20000f38 <_malloc_r>:
20000f38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
20000f3c:	e2815003 	add	r5, r1, #3
20000f40:	e3c55003 	bic	r5, r5, #3
20000f44:	e2855008 	add	r5, r5, #8
20000f48:	e355000c 	cmp	r5, #12
20000f4c:	33a0500c 	movcc	r5, #12
20000f50:	e1510005 	cmp	r1, r5
20000f54:	93a01000 	movls	r1, #0
20000f58:	83a01001 	movhi	r1, #1
20000f5c:	e1913fa5 	orrs	r3, r1, r5, lsr #31
20000f60:	13a0300c 	movne	r3, #12
20000f64:	e1a06000 	mov	r6, r0
20000f68:	15803000 	strne	r3, [r0]
20000f6c:	1a000017 	bne	20000fd0 <_malloc_r+0x98>
20000f70:	eb00004c 	bl	200010a8 <__malloc_lock>
20000f74:	e59f30e8 	ldr	r3, [pc, #232]	; 20001064 <_malloc_r+0x12c>
20000f78:	e5932000 	ldr	r2, [r3]
20000f7c:	e1a01003 	mov	r1, r3
20000f80:	e1a04002 	mov	r4, r2
20000f84:	e3540000 	cmp	r4, #0
20000f88:	1a000013 	bne	20000fdc <_malloc_r+0xa4>
20000f8c:	e59f70d4 	ldr	r7, [pc, #212]	; 20001068 <_malloc_r+0x130>
20000f90:	e5973000 	ldr	r3, [r7]
20000f94:	e3530000 	cmp	r3, #0
20000f98:	1a000003 	bne	20000fac <_malloc_r+0x74>
20000f9c:	e1a01004 	mov	r1, r4
20000fa0:	e1a00006 	mov	r0, r6
20000fa4:	eb000030 	bl	2000106c <_sbrk_r>
20000fa8:	e5870000 	str	r0, [r7]
20000fac:	e1a01005 	mov	r1, r5
20000fb0:	e1a00006 	mov	r0, r6
20000fb4:	eb00002c 	bl	2000106c <_sbrk_r>
20000fb8:	e3700001 	cmn	r0, #1
20000fbc:	1a00001d 	bne	20001038 <_malloc_r+0x100>
20000fc0:	e3a0300c 	mov	r3, #12
20000fc4:	e1a00006 	mov	r0, r6
20000fc8:	e5863000 	str	r3, [r6]
20000fcc:	eb000036 	bl	200010ac <__malloc_unlock>
20000fd0:	e3a00000 	mov	r0, #0
20000fd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
20000fd8:	e12fff1e 	bx	lr
20000fdc:	e5943000 	ldr	r3, [r4]
20000fe0:	e0533005 	subs	r3, r3, r5
20000fe4:	4a000010 	bmi	2000102c <_malloc_r+0xf4>
20000fe8:	e353000b 	cmp	r3, #11
20000fec:	85843000 	strhi	r3, [r4]
20000ff0:	87a45003 	strhi	r5, [r4, r3]!
20000ff4:	8a000003 	bhi	20001008 <_malloc_r+0xd0>
20000ff8:	e5943004 	ldr	r3, [r4, #4]
20000ffc:	e1520004 	cmp	r2, r4
20001000:	05813000 	streq	r3, [r1]
20001004:	15823004 	strne	r3, [r2, #4]
20001008:	e1a00006 	mov	r0, r6
2000100c:	eb000026 	bl	200010ac <__malloc_unlock>
20001010:	e284000b 	add	r0, r4, #11
20001014:	e2843004 	add	r3, r4, #4
20001018:	e3c00007 	bic	r0, r0, #7
2000101c:	e0502003 	subs	r2, r0, r3
20001020:	10433000 	subne	r3, r3, r0
20001024:	17843002 	strne	r3, [r4, r2]
20001028:	eaffffe9 	b	20000fd4 <_malloc_r+0x9c>
2000102c:	e1a02004 	mov	r2, r4
20001030:	e5944004 	ldr	r4, [r4, #4]
20001034:	eaffffd2 	b	20000f84 <_malloc_r+0x4c>
20001038:	e2804003 	add	r4, r0, #3
2000103c:	e3c44003 	bic	r4, r4, #3
20001040:	e1500004 	cmp	r0, r4
20001044:	0a000004 	beq	2000105c <_malloc_r+0x124>
20001048:	e0441000 	sub	r1, r4, r0
2000104c:	e1a00006 	mov	r0, r6
20001050:	eb000005 	bl	2000106c <_sbrk_r>
20001054:	e3700001 	cmn	r0, #1
20001058:	0affffd8 	beq	20000fc0 <_malloc_r+0x88>
2000105c:	e5845000 	str	r5, [r4]
20001060:	eaffffe8 	b	20001008 <_malloc_r+0xd0>
20001064:	20002c00 	andcs	r2, r0, r0, lsl #24
20001068:	20002c04 	andcs	r2, r0, r4, lsl #24

2000106c <_sbrk_r>:
2000106c:	e3a03000 	mov	r3, #0
20001070:	e92d4070 	push	{r4, r5, r6, lr}
20001074:	e59f4028 	ldr	r4, [pc, #40]	; 200010a4 <_sbrk_r+0x38>
20001078:	e1a05000 	mov	r5, r0
2000107c:	e1a00001 	mov	r0, r1
20001080:	e5843000 	str	r3, [r4]
20001084:	eb000067 	bl	20001228 <___sbrk_from_arm>
20001088:	e3700001 	cmn	r0, #1
2000108c:	1a000002 	bne	2000109c <_sbrk_r+0x30>
20001090:	e5943000 	ldr	r3, [r4]
20001094:	e3530000 	cmp	r3, #0
20001098:	15853000 	strne	r3, [r5]
2000109c:	e8bd4070 	pop	{r4, r5, r6, lr}
200010a0:	e12fff1e 	bx	lr
200010a4:	20001248 	andcs	r1, r0, r8, asr #4

200010a8 <__malloc_lock>:
200010a8:	e12fff1e 	bx	lr

200010ac <__malloc_unlock>:
200010ac:	e12fff1e 	bx	lr

200010b0 <cleanup_glue>:
200010b0:	e92d4070 	push	{r4, r5, r6, lr}
200010b4:	e1a04001 	mov	r4, r1
200010b8:	e5911000 	ldr	r1, [r1]
200010bc:	e3510000 	cmp	r1, #0
200010c0:	e1a05000 	mov	r5, r0
200010c4:	1bfffff9 	blne	200010b0 <cleanup_glue>
200010c8:	e1a01004 	mov	r1, r4
200010cc:	e1a00005 	mov	r0, r5
200010d0:	ebffff52 	bl	20000e20 <_free_r>
200010d4:	e8bd4070 	pop	{r4, r5, r6, lr}
200010d8:	e12fff1e 	bx	lr

200010dc <_reclaim_reent>:
200010dc:	e59f313c 	ldr	r3, [pc, #316]	; 20001220 <_reclaim_reent+0x144>
200010e0:	e5933000 	ldr	r3, [r3]
200010e4:	e1530000 	cmp	r3, r0
200010e8:	012fff1e 	bxeq	lr
200010ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
200010f0:	e3530000 	cmp	r3, #0
200010f4:	e92d4070 	push	{r4, r5, r6, lr}
200010f8:	e1a04000 	mov	r4, r0
200010fc:	0a000008 	beq	20001124 <_reclaim_reent+0x48>
20001100:	e593300c 	ldr	r3, [r3, #12]
20001104:	e3530000 	cmp	r3, #0
20001108:	13a05000 	movne	r5, #0
2000110c:	1a000035 	bne	200011e8 <_reclaim_reent+0x10c>
20001110:	e5943024 	ldr	r3, [r4, #36]	; 0x24
20001114:	e5931000 	ldr	r1, [r3]
20001118:	e3510000 	cmp	r1, #0
2000111c:	11a00004 	movne	r0, r4
20001120:	1bffff3e 	blne	20000e20 <_free_r>
20001124:	e5941014 	ldr	r1, [r4, #20]
20001128:	e3510000 	cmp	r1, #0
2000112c:	11a00004 	movne	r0, r4
20001130:	1bffff3a 	blne	20000e20 <_free_r>
20001134:	e5941024 	ldr	r1, [r4, #36]	; 0x24
20001138:	e3510000 	cmp	r1, #0
2000113c:	11a00004 	movne	r0, r4
20001140:	1bffff36 	blne	20000e20 <_free_r>
20001144:	e5941038 	ldr	r1, [r4, #56]	; 0x38
20001148:	e3510000 	cmp	r1, #0
2000114c:	11a00004 	movne	r0, r4
20001150:	1bffff32 	blne	20000e20 <_free_r>
20001154:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
20001158:	e3510000 	cmp	r1, #0
2000115c:	11a00004 	movne	r0, r4
20001160:	1bffff2e 	blne	20000e20 <_free_r>
20001164:	e5941040 	ldr	r1, [r4, #64]	; 0x40
20001168:	e3510000 	cmp	r1, #0
2000116c:	11a00004 	movne	r0, r4
20001170:	1bffff2a 	blne	20000e20 <_free_r>
20001174:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
20001178:	e3510000 	cmp	r1, #0
2000117c:	11a00004 	movne	r0, r4
20001180:	1bffff26 	blne	20000e20 <_free_r>
20001184:	e5941058 	ldr	r1, [r4, #88]	; 0x58
20001188:	e3510000 	cmp	r1, #0
2000118c:	11a00004 	movne	r0, r4
20001190:	1bffff22 	blne	20000e20 <_free_r>
20001194:	e5941034 	ldr	r1, [r4, #52]	; 0x34
20001198:	e3510000 	cmp	r1, #0
2000119c:	11a00004 	movne	r0, r4
200011a0:	1bffff1e 	blne	20000e20 <_free_r>
200011a4:	e5943018 	ldr	r3, [r4, #24]
200011a8:	e3530000 	cmp	r3, #0
200011ac:	0a000019 	beq	20001218 <_reclaim_reent+0x13c>
200011b0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
200011b4:	e1a00004 	mov	r0, r4
200011b8:	e1a0e00f 	mov	lr, pc
200011bc:	e12fff13 	bx	r3
200011c0:	e5941048 	ldr	r1, [r4, #72]	; 0x48
200011c4:	e3510000 	cmp	r1, #0
200011c8:	0a000012 	beq	20001218 <_reclaim_reent+0x13c>
200011cc:	e1a00004 	mov	r0, r4
200011d0:	e8bd4070 	pop	{r4, r5, r6, lr}
200011d4:	eaffffb5 	b	200010b0 <cleanup_glue>
200011d8:	e7911005 	ldr	r1, [r1, r5]
200011dc:	e3510000 	cmp	r1, #0
200011e0:	1a000007 	bne	20001204 <_reclaim_reent+0x128>
200011e4:	e2855004 	add	r5, r5, #4
200011e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
200011ec:	e3550080 	cmp	r5, #128	; 0x80
200011f0:	e593100c 	ldr	r1, [r3, #12]
200011f4:	1afffff7 	bne	200011d8 <_reclaim_reent+0xfc>
200011f8:	e1a00004 	mov	r0, r4
200011fc:	ebffff07 	bl	20000e20 <_free_r>
20001200:	eaffffc2 	b	20001110 <_reclaim_reent+0x34>
20001204:	e5916000 	ldr	r6, [r1]
20001208:	e1a00004 	mov	r0, r4
2000120c:	ebffff03 	bl	20000e20 <_free_r>
20001210:	e1a01006 	mov	r1, r6
20001214:	eafffff0 	b	200011dc <_reclaim_reent+0x100>
20001218:	e8bd4070 	pop	{r4, r5, r6, lr}
2000121c:	e12fff1e 	bx	lr
20001220:	2000124c 	andcs	r1, r0, ip, asr #4
20001224:	00000000 	andeq	r0, r0, r0

20001228 <___sbrk_from_arm>:
20001228:	e59fc000 	ldr	ip, [pc]	; 20001230 <___sbrk_from_arm+0x8>
2000122c:	e12fff1c 	bx	ip
20001230:	200003bd 			; <UNDEFINED> instruction: 0x200003bd
20001234:	00000000 	andeq	r0, r0, r0

20001238 <delay_count>:
20001238:	00000000 	andeq	r0, r0, r0

2000123c <systick_flag>:
2000123c:	00000000 	andeq	r0, r0, r0

20001240 <player>:
20001240:	00000000 	andeq	r0, r0, r0

20001244 <heap_end>:
20001244:	00000000 	andeq	r0, r0, r0

20001248 <errno>:
20001248:	00000000 	andeq	r0, r0, r0

2000124c <_impure_ptr>:
2000124c:	20001250 	andcs	r1, r0, r0, asr r2

20001250 <impure_data>:
	...
200012b0:	00002040 	andeq	r2, r0, r0, asr #32
200012b4:	00001f40 	andeq	r1, r0, r0, asr #30
200012b8:	0a030201 	beq	200c1ac4 <__malloc_sbrk_start+0xbeec0>
200012bc:	0b060504 	bleq	201826d4 <__malloc_sbrk_start+0x17fad0>
200012c0:	0c090807 	stceq	8, cr0, [r9], {7}
200012c4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001294 <impure_data+0x44>
200012c8:	4f5b063f 	svcmi	0x005b063f
200012cc:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
200012d0:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
200012d4:	71795e39 	cmnvc	r9, r9, lsr lr
200012d8:	00000000 	andeq	r0, r0, r0

200012dc <_global_impure_ptr>:
200012dc:	20001250 	andcs	r1, r0, r0, asr r2

200012e0 <__bss_end__>:
	...

20002000 <heap_low>:
	...

20002800 <heap_top>:
	...

Disassembly of section .bss.__malloc_free_list:

20002c00 <__malloc_free_list>:
20002c00:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.__malloc_sbrk_start:

20002c04 <__malloc_sbrk_start>:
20002c04:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000008f 	andeq	r0, r0, pc, lsl #1
      10:	0001030c 	andeq	r0, r1, ip, lsl #6
      14:	0001c300 	andeq	ip, r1, r0, lsl #6
      18:	00001400 	andeq	r1, r0, r0, lsl #8
      1c:	00030220 	andeq	r0, r3, r0, lsr #4
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000180 	andeq	r0, r0, r0, lsl #3
      2c:	0000f303 	andeq	pc, r0, r3, lsl #6
      30:	182b0200 	stmdane	fp!, {r9}
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	7e080102 	adfvce	f0, f0, f2
      3c:	02000001 	andeq	r0, r0, #1
      40:	002a0502 	eoreq	r0, sl, r2, lsl #10
      44:	5a030000 	bpl	c004c <startup-0x1ff3ffb4>
      48:	02000000 	andeq	r0, r0, #0
      4c:	00521939 	subseq	r1, r2, r9, lsr r9
      50:	02020000 	andeq	r0, r2, #0
      54:	0001ab07 	andeq	sl, r1, r7, lsl #22
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000000d1 	ldrdeq	r0, [r0], -r1
      60:	00004f03 	andeq	r4, r0, r3, lsl #30
      64:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	99070402 	stmdbls	r7, {r1, sl}
      70:	02000001 	andeq	r0, r0, #1
      74:	00cc0508 	sbceq	r0, ip, r8, lsl #10
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00019407 	andeq	r9, r1, r7, lsl #8
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	9e070402 	cdpls	4, 0, cr0, cr7, cr2, {0}
      8c:	03000001 	movweq	r0, #1
      90:	000000f5 	strdeq	r0, [r0], -r5
      94:	2c131803 	ldccs	8, cr1, [r3], {3}
      98:	03000000 	movweq	r0, #0
      9c:	0000005c 	andeq	r0, r0, ip, asr r0
      a0:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
      a4:	03000000 	movweq	r0, #0
      a8:	00000051 	andeq	r0, r0, r1, asr r0
      ac:	60143003 	andsvs	r3, r4, r3
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	0000026d 	andeq	r0, r0, sp, ror #4
      b8:	100e0418 	andne	r0, lr, r8, lsl r4
      bc:	00000150 	andeq	r0, r0, r0, asr r1
      c0:	0000e206 	andeq	lr, r0, r6, lsl #4
      c4:	0e0f0400 	cfcpyseq	mvf0, mvf15
      c8:	000000a7 	andeq	r0, r0, r7, lsr #1
      cc:	00650600 	rsbeq	r0, r5, r0, lsl #12
      d0:	10040000 	andne	r0, r4, r0
      d4:	00009b0e 	andeq	r9, r0, lr, lsl #22
      d8:	82060400 	andhi	r0, r6, #0, 8
      dc:	04000002 	streq	r0, [r0], #-2
      e0:	009b0e11 	addseq	r0, fp, r1, lsl lr
      e4:	06060000 	streq	r0, [r6], -r0
      e8:	000000da 	ldrdeq	r0, [r0], -sl
      ec:	a70e1204 	strge	r1, [lr, -r4, lsl #4]
      f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      f4:	0000fd06 	andeq	pc, r0, r6, lsl #26
      f8:	0e130400 	cfmulseq	mvf0, mvf3, mvf0
      fc:	000000a7 	andeq	r0, r0, r7, lsr #1
     100:	018c060c 	orreq	r0, ip, ip, lsl #12
     104:	14040000 	strne	r0, [r4], #-0
     108:	00008f0d 	andeq	r8, r0, sp, lsl #30
     10c:	6c061000 	stcvs	0, cr1, [r6], {-0}
     110:	04000000 	streq	r0, [r0], #-0
     114:	008f0d15 	addeq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
     118:	06110000 	ldreq	r0, [r1], -r0
     11c:	00000082 	andeq	r0, r0, r2, lsl #1
     120:	9b0e1604 	blls	385938 <startup-0x1fc7a6c8>
     124:	12000000 	andne	r0, r0, #0
     128:	00004706 	andeq	r4, r0, r6, lsl #14
     12c:	0d170400 	cfldrseq	mvf0, [r7, #-0]
     130:	0000008f 	andeq	r0, r0, pc, lsl #1
     134:	023b0614 	eorseq	r0, fp, #20, 12	; 0x1400000
     138:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     13c:	00008f0d 	andeq	r8, r0, sp, lsl #30
     140:	00061500 	andeq	r1, r6, r0, lsl #10
     144:	04000000 	streq	r0, [r0], #-0
     148:	009b0e19 	addseq	r0, fp, r9, lsl lr
     14c:	00160000 	andseq	r0, r6, r0
     150:	0001be03 	andeq	fp, r1, r3, lsl #28
     154:	021a0400 	andseq	r0, sl, #0, 8
     158:	000000b3 	strheq	r0, [r0], -r3
     15c:	00015607 	andeq	r5, r1, r7, lsl #12
     160:	06670100 	strbteq	r0, [r7], -r0, lsl #2
     164:	200002ec 	andcs	r0, r0, ip, ror #5
     168:	0000002a 	andeq	r0, r0, sl, lsr #32
     16c:	01809c01 	orreq	r9, r0, r1, lsl #24
     170:	63080000 	movwvs	r0, #32768	; 0x8000
     174:	1f670100 	svcne	0x00670100
     178:	00000180 	andeq	r0, r0, r0, lsl #3
     17c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     180:	01860409 	orreq	r0, r6, r9, lsl #8
     184:	01020000 	mrseq	r0, (UNDEF: 2)
     188:	00018708 	andeq	r8, r1, r8, lsl #14
     18c:	01f70700 	mvnseq	r0, r0, lsl #14
     190:	63010000 	movwvs	r0, #4096	; 0x1000
     194:	0002cc06 	andeq	ip, r2, r6, lsl #24
     198:	00002020 	andeq	r2, r0, r0, lsr #32
     19c:	b19c0100 	orrslt	r0, ip, r0, lsl #2
     1a0:	08000001 	stmdaeq	r0, {r0}
     1a4:	63010063 	movwvs	r0, #4195	; 0x1063
     1a8:	0001861c 	andeq	r8, r1, ip, lsl r6
     1ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1b0:	00750700 	rsbseq	r0, r5, r0, lsl #14
     1b4:	5b010000 	blpl	401bc <startup-0x1ffbfe44>
     1b8:	00027e06 	andeq	r7, r2, r6, lsl #28
     1bc:	00004e20 	andeq	r4, r0, r0, lsr #28
     1c0:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
     1c4:	08000001 	stmdaeq	r0, {r0}
     1c8:	00776f72 	rsbseq	r6, r7, r2, ror pc
     1cc:	38215b01 	stmdacc	r1!, {r0, r8, r9, fp, ip, lr}
     1d0:	02000000 	andeq	r0, r0, #0
     1d4:	0d0a6f91 	stceq	15, cr6, [sl, #-580]	; 0xfffffdbc
     1d8:	01000000 	mrseq	r0, (UNDEF: 0)
     1dc:	0038345b 	eorseq	r3, r8, fp, asr r4
     1e0:	91020000 	mrsls	r0, (UNDEF: 2)
     1e4:	021e0b6e 	andseq	r0, lr, #112640	; 0x1b800
     1e8:	5c010000 	stcpl	0, cr0, [r1], {-0}
     1ec:	00003813 	andeq	r3, r0, r3, lsl r8
     1f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1f4:	00e80c00 	rsceq	r0, r8, r0, lsl #24
     1f8:	53010000 	movwpl	r0, #4096	; 0x1000
     1fc:	00025006 	andeq	r5, r2, r6
     200:	00002e20 	andeq	r2, r0, r0, lsr #28
     204:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     208:	0000013f 	andeq	r0, r0, pc, lsr r1
     20c:	10064c01 	andne	r4, r6, r1, lsl #24
     210:	40200002 	eormi	r0, r0, r2
     214:	01000000 	mrseq	r0, (UNDEF: 0)
     218:	00023c9c 	muleq	r2, ip, ip
     21c:	08f60a00 	ldmeq	r6!, {r9, fp}^
     220:	4c010000 	stcmi	0, cr0, [r1], {-0}
     224:	0000382b 	andeq	r3, r0, fp, lsr #16
     228:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     22c:	0001500a 	andeq	r5, r1, sl
     230:	3e4c0100 	dvfcce	f0, f4, f0
     234:	00000088 	andeq	r0, r0, r8, lsl #1
     238:	00709102 	rsbseq	r9, r0, r2, lsl #2
     23c:	00001407 	andeq	r1, r0, r7, lsl #8
     240:	06450100 	strbeq	r0, [r5], -r0, lsl #2
     244:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     248:	00000040 	andeq	r0, r0, r0, asr #32
     24c:	02719c01 	rsbseq	r9, r1, #256	; 0x100
     250:	63080000 	movwvs	r0, #32768	; 0x8000
     254:	0100646d 	tsteq	r0, sp, ror #8
     258:	00382a45 	eorseq	r2, r8, r5, asr #20
     25c:	91020000 	mrsls	r0, (UNDEF: 2)
     260:	01500a77 	cmpeq	r0, r7, ror sl
     264:	45010000 	strmi	r0, [r1, #-0]
     268:	0000883c 	andeq	r8, r0, ip, lsr r8
     26c:	70910200 	addsvc	r0, r1, r0, lsl #4
     270:	02720d00 	rsbseq	r0, r2, #0, 26
     274:	3c010000 	stccc	0, cr0, [r1], {-0}
     278:	0000380f 	andeq	r3, r0, pc, lsl #16
     27c:	00019000 	andeq	r9, r1, r0
     280:	00004020 	andeq	r4, r0, r0, lsr #32
     284:	999c0100 	ldmibls	ip, {r8}
     288:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     28c:	40010063 	andmi	r0, r1, r3, rrx
     290:	00003813 	andeq	r3, r0, r3, lsl r8
     294:	6f910200 	svcvs	0x00910200
     298:	02440d00 	subeq	r0, r4, #0, 26
     29c:	33010000 	movwcc	r0, #4096	; 0x1000
     2a0:	0000380f 	andeq	r3, r0, pc, lsl #16
     2a4:	00014e00 	andeq	r4, r1, r0, lsl #28
     2a8:	00004220 	andeq	r4, r0, r0, lsr #4
     2ac:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
     2b0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     2b4:	37010063 	strcc	r0, [r1, -r3, rrx]
     2b8:	00003813 	andeq	r3, r0, r3, lsl r8
     2bc:	6f910200 	svcvs	0x00910200
     2c0:	02250700 	eoreq	r0, r5, #0, 14
     2c4:	2d010000 	stccs	0, cr0, [r1, #-0]
     2c8:	00012406 	andeq	r2, r1, r6, lsl #8
     2cc:	00002a20 	andeq	r2, r0, r0, lsr #20
     2d0:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
     2d4:	0a000002 	beq	2e4 <startup-0x1ffffd1c>
     2d8:	000008f6 	strdeq	r0, [r0], -r6
     2dc:	38252d01 	stmdacc	r5!, {r0, r8, sl, fp, sp}
     2e0:	02000000 	andeq	r0, r0, #0
     2e4:	07007791 			; <UNDEFINED> instruction: 0x07007791
     2e8:	0000028e 	andeq	r0, r0, lr, lsl #5
     2ec:	00062801 	andeq	r2, r6, r1, lsl #16
     2f0:	24200001 	strtcs	r0, [r0], #-1
     2f4:	01000000 	mrseq	r0, (UNDEF: 0)
     2f8:	00030d9c 	muleq	r3, ip, sp
     2fc:	08dc0a00 	ldmeq	ip, {r9, fp}^
     300:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     304:	00003824 	andeq	r3, r0, r4, lsr #16
     308:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     30c:	02080d00 	andeq	r0, r8, #0, 26
     310:	1f010000 	svcne	0x00010000
     314:	0000380f 	andeq	r3, r0, pc, lsl #16
     318:	0000cc00 	andeq	ip, r0, r0, lsl #24
     31c:	00003420 	andeq	r3, r0, r0, lsr #8
     320:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     324:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     328:	01007672 	tsteq	r0, r2, ror r6
     32c:	00381323 	eorseq	r1, r8, r3, lsr #6
     330:	91020000 	mrsls	r0, (UNDEF: 2)
     334:	56070077 			; <UNDEFINED> instruction: 0x56070077
     338:	01000002 	tsteq	r0, r2
     33c:	009c0618 	addseq	r0, ip, r8, lsl r6
     340:	00302000 	eorseq	r2, r0, r0
     344:	9c010000 	stcls	0, cr0, [r1], {-0}
     348:	0000035c 	andeq	r0, r0, ip, asr r3
     34c:	0002360a 	andeq	r3, r2, sl, lsl #12
     350:	2b180100 	blcs	600758 <startup-0x1f9ff8a8>
     354:	00000038 	andeq	r0, r0, r8, lsr r0
     358:	00779102 	rsbseq	r9, r7, r2, lsl #2
     35c:	0001690f 	andeq	r6, r1, pc, lsl #18
     360:	06110100 	ldreq	r0, [r1], -r0, lsl #2
     364:	20000054 	andcs	r0, r0, r4, asr r0
     368:	00000048 	andeq	r0, r0, r8, asr #32
     36c:	038d9c01 	orreq	r9, sp, #256	; 0x100
     370:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     374:	29110100 	ldmdbcs	r1, {r8}
     378:	00000038 	andeq	r0, r0, r8, lsr r0
     37c:	0e6f9102 	lgneqe	f1, f2
     380:	12010063 	andne	r0, r1, #99	; 0x63
     384:	00003813 	andeq	r3, r0, r3, lsl r8
     388:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     38c:	00341000 	eorseq	r1, r4, r0
     390:	0a010000 	beq	40398 <startup-0x1ffbfc68>
     394:	00001406 	andeq	r1, r0, r6, lsl #8
     398:	00004020 	andeq	r4, r0, r0, lsr #32
     39c:	089c0100 	ldmeq	ip, {r8}
     3a0:	0a010078 	beq	40588 <startup-0x1ffbfa78>
     3a4:	00003827 	andeq	r3, r0, r7, lsr #16
     3a8:	6f910200 	svcvs	0x00910200
     3ac:	0100630e 	tsteq	r0, lr, lsl #6
     3b0:	0038130b 	eorseq	r1, r8, fp, lsl #6
     3b4:	91020000 	mrsls	r0, (UNDEF: 2)
     3b8:	72000077 	andvc	r0, r0, #119	; 0x77
     3bc:	04000001 	streq	r0, [r0], #-1
     3c0:	00013200 	andeq	r3, r1, r0, lsl #4
     3c4:	8f010400 	svchi	0x00010400
     3c8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3cc:	0000029e 	muleq	r0, lr, r2
     3d0:	000001c3 	andeq	r0, r0, r3, asr #3
     3d4:	20000318 	andcs	r0, r0, r8, lsl r3
     3d8:	000000a4 	andeq	r0, r0, r4, lsr #1
     3dc:	0000022d 	andeq	r0, r0, sp, lsr #4
     3e0:	80060102 	andhi	r0, r6, r2, lsl #2
     3e4:	02000001 	andeq	r0, r0, #1
     3e8:	017e0801 	cmneq	lr, r1, lsl #16
     3ec:	02020000 	andeq	r0, r2, #0
     3f0:	00002a05 	andeq	r2, r0, r5, lsl #20
     3f4:	07020200 	streq	r0, [r2, -r0, lsl #4]
     3f8:	000001ab 	andeq	r0, r0, fp, lsr #3
     3fc:	0002ec03 	andeq	lr, r2, r3, lsl #24
     400:	184d0200 	stmdane	sp, {r9}^
     404:	0000004d 	andeq	r0, r0, sp, asr #32
     408:	d1050402 	tstle	r5, r2, lsl #8
     40c:	03000000 	movweq	r0, #0
     410:	0000004f 	andeq	r0, r0, pc, asr #32
     414:	60194f02 	andsvs	r4, r9, r2, lsl #30
     418:	02000000 	andeq	r0, r0, #0
     41c:	01990704 	orrseq	r0, r9, r4, lsl #14
     420:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     424:	0000cc05 	andeq	ip, r0, r5, lsl #24
     428:	07080200 	streq	r0, [r8, -r0, lsl #4]
     42c:	00000194 	muleq	r0, r4, r1
     430:	69050404 	stmdbvs	r5, {r2, sl}
     434:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     438:	019e0704 	orrseq	r0, lr, r4, lsl #14
     43c:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
     440:	03000002 	movweq	r0, #2
     444:	0041132c 	subeq	r1, r1, ip, lsr #6
     448:	83050000 	movwhi	r0, #20480	; 0x5000
     44c:	03000000 	movweq	r0, #0
     450:	00000051 	andeq	r0, r0, r1, asr r0
     454:	54143003 	ldrpl	r3, [r4], #-3
     458:	06000000 	streq	r0, [r0], -r0
     45c:	09030410 	stmdbeq	r3, {r4, sl}
     460:	000000de 	ldrdeq	r0, [r0], -lr
     464:	00032a07 	andeq	r2, r3, r7, lsl #20
     468:	0e040400 	cfcpyseq	mvf0, mvf4
     46c:	00000094 	muleq	r0, r4, r0
     470:	033c0700 	teqeq	ip, #0, 14
     474:	05040000 	streq	r0, [r4, #-0]
     478:	0000940e 	andeq	r9, r0, lr, lsl #8
     47c:	76080400 	strvc	r0, [r8], -r0, lsl #8
     480:	04006c61 	streq	r6, [r0], #-3169	; 0xfffff39f
     484:	00940e06 	addseq	r0, r4, r6, lsl #28
     488:	07080000 	streq	r0, [r8, -r0]
     48c:	00000304 	andeq	r0, r0, r4, lsl #6
     490:	940e0704 	strls	r0, [lr], #-1796	; 0xfffff8fc
     494:	0c000000 	stceq	0, cr0, [r0], {-0}
     498:	54530900 	ldrbpl	r0, [r3], #-2304	; 0xfffff700
     49c:	0804004b 	stmdaeq	r4, {r0, r1, r3, r6}
     4a0:	0000a002 	andeq	sl, r0, r2
     4a4:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
     4a8:	05010000 	streq	r0, [r1, #-0]
     4ac:	0001030f 	andeq	r0, r1, pc, lsl #6
     4b0:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     4b4:	02200012 	eoreq	r0, r0, #18
     4b8:	034a0201 	movteq	r0, #41473	; 0xa201
     4bc:	fc050000 	stc2	0, cr0, [r5], {-0}
     4c0:	0a000000 	beq	4c8 <startup-0x1ffffb38>
     4c4:	0000031e 	andeq	r0, r0, lr, lsl r3
     4c8:	8f120601 	svchi	0x00120601
     4cc:	05000000 	streq	r0, [r0, #-0]
     4d0:	00123803 	andseq	r3, r2, r3, lsl #16
     4d4:	03410b20 	movteq	r0, #6944	; 0x1b20
     4d8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     4dc:	00039c06 	andeq	r9, r3, r6, lsl #24
     4e0:	00002020 	andeq	r2, r0, r0, lsr #32
     4e4:	3f9c0100 	svccc	0x009c0100
     4e8:	0c000001 	stceq	0, cr0, [r0], {1}
     4ec:	01007375 	tsteq	r0, r5, ror r3
     4f0:	0094181e 	addseq	r1, r4, lr, lsl r8
     4f4:	91020000 	mrsls	r0, (UNDEF: 2)
     4f8:	f60d0074 			; <UNDEFINED> instruction: 0xf60d0074
     4fc:	01000002 	tsteq	r0, r2
     500:	03780619 	cmneq	r8, #26214400	; 0x1900000
     504:	00242000 	eoreq	r2, r4, r0
     508:	9c010000 	stcls	0, cr0, [r1], {-0}
     50c:	00030a0e 	andeq	r0, r3, lr, lsl #20
     510:	06100100 	ldreq	r0, [r0], -r0, lsl #2
     514:	20000348 	andcs	r0, r0, r8, asr #6
     518:	00000030 	andeq	r0, r0, r0, lsr r0
     51c:	dd0d9c01 	stcle	12, cr9, [sp, #-4]
     520:	01000002 	tsteq	r0, r2
     524:	03180608 	tsteq	r8, #8, 12	; 0x800000
     528:	00302000 	eorseq	r2, r0, r0
     52c:	9c010000 	stcls	0, cr0, [r1], {-0}
     530:	000ce200 	andeq	lr, ip, r0, lsl #4
     534:	26000400 	strcs	r0, [r0], -r0, lsl #8
     538:	04000002 	streq	r0, [r0], #-2
     53c:	00008f01 	andeq	r8, r0, r1, lsl #30
     540:	036b0c00 	cmneq	fp, #0, 24
     544:	01c30000 	biceq	r0, r3, r0
	...
     550:	035d0000 	cmpeq	sp, #0
     554:	01020000 	mrseq	r0, (UNDEF: 2)
     558:	00018006 	andeq	r8, r1, r6
     55c:	00f30300 	rscseq	r0, r3, r0, lsl #6
     560:	2b020000 	blcs	80568 <startup-0x1ff7fa98>
     564:	00003818 	andeq	r3, r0, r8, lsl r8
     568:	08010200 	stmdaeq	r1, {r9}
     56c:	0000017e 	andeq	r0, r0, lr, ror r1
     570:	2a050202 	bcs	140d80 <startup-0x1febf280>
     574:	03000000 	movweq	r0, #0
     578:	0000005a 	andeq	r0, r0, sl, asr r0
     57c:	52193902 	andspl	r3, r9, #32768	; 0x8000
     580:	02000000 	andeq	r0, r0, #0
     584:	01ab0702 			; <UNDEFINED> instruction: 0x01ab0702
     588:	04020000 	streq	r0, [r2], #-0
     58c:	0000d105 	andeq	sp, r0, r5, lsl #2
     590:	004f0300 	subeq	r0, pc, r0, lsl #6
     594:	4f020000 	svcmi	0x00020000
     598:	00006c19 	andeq	r6, r0, r9, lsl ip
     59c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     5a0:	00000199 	muleq	r0, r9, r1
     5a4:	cc050802 	stcgt	8, cr0, [r5], {2}
     5a8:	02000000 	andeq	r0, r0, #0
     5ac:	01940708 	orrseq	r0, r4, r8, lsl #14
     5b0:	04040000 	streq	r0, [r4], #-0
     5b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     5b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     5bc:	0000019e 	muleq	r0, lr, r1
     5c0:	0000f503 	andeq	pc, r0, r3, lsl #10
     5c4:	13180300 	tstne	r8, #0, 6
     5c8:	0000002c 	andeq	r0, r0, ip, lsr #32
     5cc:	00005c03 	andeq	r5, r0, r3, lsl #24
     5d0:	14240300 	strtne	r0, [r4], #-768	; 0xfffffd00
     5d4:	00000046 	andeq	r0, r0, r6, asr #32
     5d8:	00005103 	andeq	r5, r0, r3, lsl #2
     5dc:	14300300 	ldrtne	r0, [r0], #-768	; 0xfffffd00
     5e0:	00000060 	andeq	r0, r0, r0, rrx
     5e4:	00026d05 	andeq	r6, r2, r5, lsl #26
     5e8:	0e041800 	cdpeq	8, 0, cr1, cr4, cr0, {0}
     5ec:	00015010 	andeq	r5, r1, r0, lsl r0
     5f0:	00e20600 	rsceq	r0, r2, r0, lsl #12
     5f4:	0f040000 	svceq	0x00040000
     5f8:	0000a70e 	andeq	sl, r0, lr, lsl #14
     5fc:	65060000 	strvs	r0, [r6, #-0]
     600:	04000000 	streq	r0, [r0], #-0
     604:	009b0e10 	addseq	r0, fp, r0, lsl lr
     608:	06040000 	streq	r0, [r4], -r0
     60c:	00000282 	andeq	r0, r0, r2, lsl #5
     610:	9b0e1104 	blls	384a28 <startup-0x1fc7b5d8>
     614:	06000000 	streq	r0, [r0], -r0
     618:	0000da06 	andeq	sp, r0, r6, lsl #20
     61c:	0e120400 	cfmulseq	mvf0, mvf2, mvf0
     620:	000000a7 	andeq	r0, r0, r7, lsr #1
     624:	00fd0608 	rscseq	r0, sp, r8, lsl #12
     628:	13040000 	movwne	r0, #16384	; 0x4000
     62c:	0000a70e 	andeq	sl, r0, lr, lsl #14
     630:	8c060c00 	stchi	12, cr0, [r6], {-0}
     634:	04000001 	streq	r0, [r0], #-1
     638:	008f0d14 	addeq	r0, pc, r4, lsl sp	; <UNPREDICTABLE>
     63c:	06100000 	ldreq	r0, [r0], -r0
     640:	0000006c 	andeq	r0, r0, ip, rrx
     644:	8f0d1504 	svchi	0x000d1504
     648:	11000000 	mrsne	r0, (UNDEF: 0)
     64c:	00008206 	andeq	r8, r0, r6, lsl #4
     650:	0e160400 	cfmulseq	mvf0, mvf6, mvf0
     654:	0000009b 	muleq	r0, fp, r0
     658:	00470612 	subeq	r0, r7, r2, lsl r6
     65c:	17040000 	strne	r0, [r4, -r0]
     660:	00008f0d 	andeq	r8, r0, sp, lsl #30
     664:	3b061400 	blcc	18566c <startup-0x1fe7a994>
     668:	04000002 	streq	r0, [r0], #-2
     66c:	008f0d18 	addeq	r0, pc, r8, lsl sp	; <UNPREDICTABLE>
     670:	06150000 	ldreq	r0, [r5], -r0
     674:	00000000 	andeq	r0, r0, r0
     678:	9b0e1904 	blls	386a90 <startup-0x1fc79570>
     67c:	16000000 	strne	r0, [r0], -r0
     680:	01be0300 			; <UNDEFINED> instruction: 0x01be0300
     684:	1a040000 	bne	10068c <startup-0x1feff974>
     688:	0000b302 	andeq	fp, r0, r2, lsl #6
     68c:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
     690:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     694:	00062b03 	andeq	r2, r6, r3, lsl #22
     698:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     69c:	00000081 	andeq	r0, r0, r1, lsl #1
     6a0:	00060803 	andeq	r0, r6, r3, lsl #16
     6a4:	0e2c0600 	cfmadda32eq	mvax0, mvax0, mvfx12, mvfx0
     6a8:	00000059 	andeq	r0, r0, r9, asr r0
     6ac:	00071003 	andeq	r1, r7, r3
     6b0:	0e720600 	cdpeq	6, 7, cr0, cr2, cr0, {0}
     6b4:	00000059 	andeq	r0, r0, r9, asr r0
     6b8:	00057d07 	andeq	r7, r5, r7, lsl #26
     6bc:	015e0700 	cmpeq	lr, r0, lsl #14
     6c0:	00008817 	andeq	r8, r0, r7, lsl r8
     6c4:	06040800 	streq	r0, [r4], -r0, lsl #16
     6c8:	01b603a6 			; <UNDEFINED> instruction: 0x01b603a6
     6cc:	77090000 	strvc	r0, [r9, -r0]
     6d0:	06000005 	streq	r0, [r0], -r5
     6d4:	01870ca8 	orreq	r0, r7, r8, lsr #25
     6d8:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
     6dc:	06000005 	streq	r0, [r0], -r5
     6e0:	01b613a9 			; <UNDEFINED> instruction: 0x01b613a9
     6e4:	0a000000 	beq	6ec <startup-0x1ffff914>
     6e8:	00000038 	andeq	r0, r0, r8, lsr r0
     6ec:	000001c6 	andeq	r0, r0, r6, asr #3
     6f0:	0000880b 	andeq	r8, r0, fp, lsl #16
     6f4:	0c000300 	stceq	3, cr0, [r0], {-0}
     6f8:	09a30608 	stmibeq	r3!, {r3, r9, sl}
     6fc:	000001ea 	andeq	r0, r0, sl, ror #3
     700:	00070206 	andeq	r0, r7, r6, lsl #4
     704:	07a50600 	streq	r0, [r5, r0, lsl #12]!
     708:	00000081 	andeq	r0, r0, r1, lsl #1
     70c:	07500600 	ldrbeq	r0, [r0, -r0, lsl #12]
     710:	aa060000 	bge	180718 <startup-0x1fe7f8e8>
     714:	00019405 	andeq	r9, r1, r5, lsl #8
     718:	03000400 	movweq	r0, #1024	; 0x400
     71c:	00000675 	andeq	r0, r0, r5, ror r6
     720:	c603ab06 	strgt	sl, [r3], -r6, lsl #22
     724:	03000001 	movweq	r0, #1
     728:	000004f2 	strdeq	r0, [r0], -r2
     72c:	631baf06 	tstvs	fp, #6, 30
     730:	0d000001 	stceq	0, cr0, [r0, #-4]
     734:	0a040e04 	beq	103f4c <startup-0x1fefc0b4>
     738:	02000002 	andeq	r0, r0, #2
     73c:	01870801 	orreq	r0, r7, r1, lsl #16
     740:	0a0f0000 	beq	3c0748 <startup-0x1fc3f8b8>
     744:	03000002 	movweq	r0, #2
     748:	00000766 	andeq	r0, r0, r6, ror #14
     74c:	6c191608 	ldcvs	6, cr1, [r9], {8}
     750:	05000000 	streq	r0, [r0, #-0]
     754:	00000503 	andeq	r0, r0, r3, lsl #10
     758:	082f0818 	stmdaeq	pc!, {r3, r4, fp}	; <UNPREDICTABLE>
     75c:	0000027c 	andeq	r0, r0, ip, ror r2
     760:	0006a506 	andeq	sl, r6, r6, lsl #10
     764:	13310800 	teqne	r1, #0, 16
     768:	0000027c 	andeq	r0, r0, ip, ror r2
     76c:	6b5f1000 	blvs	17c4774 <startup-0x1e83b88c>
     770:	07320800 	ldreq	r0, [r2, -r0, lsl #16]!
     774:	00000081 	andeq	r0, r0, r1, lsl #1
     778:	06ed0604 	strbteq	r0, [sp], r4, lsl #12
     77c:	32080000 	andcc	r0, r8, #0
     780:	0000810b 	andeq	r8, r0, fp, lsl #2
     784:	ec060800 	stc	8, cr0, [r6], {-0}
     788:	08000004 	stmdaeq	r0, {r2}
     78c:	00811432 	addeq	r1, r1, r2, lsr r4
     790:	060c0000 	streq	r0, [ip], -r0
     794:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
     798:	811b3208 	tsthi	fp, r8, lsl #4
     79c:	10000000 	andne	r0, r0, r0
     7a0:	00785f10 	rsbseq	r5, r8, r0, lsl pc
     7a4:	820b3308 	andhi	r3, fp, #8, 6	; 0x20000000
     7a8:	14000002 	strne	r0, [r0], #-2
     7ac:	22040e00 	andcs	r0, r4, #0, 28
     7b0:	0a000002 	beq	7c0 <startup-0x1ffff840>
     7b4:	00000216 	andeq	r0, r0, r6, lsl r2
     7b8:	00000292 	muleq	r0, r2, r2
     7bc:	0000880b 	andeq	r8, r0, fp, lsl #16
     7c0:	05000000 	streq	r0, [r0, #-0]
     7c4:	00000524 	andeq	r0, r0, r4, lsr #10
     7c8:	08370824 	ldmdaeq	r7!, {r2, r5, fp}
     7cc:	00000315 	andeq	r0, r0, r5, lsl r3
     7d0:	0007b206 	andeq	fp, r7, r6, lsl #4
     7d4:	09390800 	ldmdbeq	r9!, {fp}
     7d8:	00000081 	andeq	r0, r0, r1, lsl #1
     7dc:	07260600 	streq	r0, [r6, -r0, lsl #12]!
     7e0:	3a080000 	bcc	2007e8 <startup-0x1fdff818>
     7e4:	00008109 	andeq	r8, r0, r9, lsl #2
     7e8:	4b060400 	blmi	1817f0 <startup-0x1fe7e810>
     7ec:	08000004 	stmdaeq	r0, {r2}
     7f0:	0081093b 	addeq	r0, r1, fp, lsr r9
     7f4:	06080000 	streq	r0, [r8], -r0
     7f8:	0000083a 	andeq	r0, r0, sl, lsr r8
     7fc:	81093c08 	tsthi	r9, r8, lsl #24
     800:	0c000000 	stceq	0, cr0, [r0], {-0}
     804:	0005dd06 	andeq	sp, r5, r6, lsl #26
     808:	093d0800 	ldmdbeq	sp!, {fp}
     80c:	00000081 	andeq	r0, r0, r1, lsl #1
     810:	05a00610 	streq	r0, [r0, #1552]!	; 0x610
     814:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
     818:	00008109 	andeq	r8, r0, r9, lsl #2
     81c:	c0061400 	andgt	r1, r6, r0, lsl #8
     820:	08000007 	stmdaeq	r0, {r0, r1, r2}
     824:	0081093f 	addeq	r0, r1, pc, lsr r9
     828:	06180000 	ldreq	r0, [r8], -r0
     82c:	0000064b 	andeq	r0, r0, fp, asr #12
     830:	81094008 	tsthi	r9, r8
     834:	1c000000 	stcne	0, cr0, [r0], {-0}
     838:	0007fc06 	andeq	pc, r7, r6, lsl #24
     83c:	09410800 	stmdbeq	r1, {fp}^
     840:	00000081 	andeq	r0, r0, r1, lsl #1
     844:	18110020 	ldmdane	r1, {r5}
     848:	08000007 	stmdaeq	r0, {r0, r1, r2}
     84c:	084a0801 	stmdaeq	sl, {r0, fp}^
     850:	0000035a 	andeq	r0, r0, sl, asr r3
     854:	0004da06 	andeq	sp, r4, r6, lsl #20
     858:	0a4b0800 	beq	12c2860 <startup-0x1ed3d7a0>
     85c:	0000035a 	andeq	r0, r0, sl, asr r3
     860:	03500600 	cmpeq	r0, #0, 12
     864:	4c080000 	stcmi	0, cr0, [r8], {-0}
     868:	00035a09 	andeq	r5, r3, r9, lsl #20
     86c:	58128000 	ldmdapl	r2, {pc}
     870:	08000007 	stmdaeq	r0, {r0, r1, r2}
     874:	02160a4e 	andseq	r0, r6, #319488	; 0x4e000
     878:	01000000 	mrseq	r0, (UNDEF: 0)
     87c:	00047b12 	andeq	r7, r4, r2, lsl fp
     880:	0a510800 	beq	1442888 <startup-0x1ebbd778>
     884:	00000216 	andeq	r0, r0, r6, lsl r2
     888:	0a000104 	beq	ca0 <startup-0x1ffff360>
     88c:	00000202 	andeq	r0, r0, r2, lsl #4
     890:	0000036a 	andeq	r0, r0, sl, ror #6
     894:	0000880b 	andeq	r8, r0, fp, lsl #16
     898:	11001f00 	tstne	r0, r0, lsl #30
     89c:	000005eb 	andeq	r0, r0, fp, ror #11
     8a0:	5d080190 	stfpls	f0, [r8, #-576]	; 0xfffffdc0
     8a4:	0003ad08 	andeq	sl, r3, r8, lsl #26
     8a8:	06a50600 	strteq	r0, [r5], r0, lsl #12
     8ac:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
     8b0:	0003ad12 	andeq	sl, r3, r2, lsl sp
     8b4:	bd060000 	stclt	0, cr0, [r6, #-0]
     8b8:	08000006 	stmdaeq	r0, {r1, r2}
     8bc:	0081065f 	addeq	r0, r1, pc, asr r6
     8c0:	06040000 	streq	r0, [r4], -r0
     8c4:	000004e7 	andeq	r0, r0, r7, ror #9
     8c8:	b3096108 	movwlt	r6, #37128	; 0x9108
     8cc:	08000003 	stmdaeq	r0, {r0, r1}
     8d0:	00071806 	andeq	r1, r7, r6, lsl #16
     8d4:	1e620800 	cdpne	8, 6, cr0, cr2, cr0, {0}
     8d8:	00000315 	andeq	r0, r0, r5, lsl r3
     8dc:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
     8e0:	0000036a 	andeq	r0, r0, sl, ror #6
     8e4:	0003c30a 	andeq	ip, r3, sl, lsl #6
     8e8:	0003c300 	andeq	ip, r3, r0, lsl #6
     8ec:	00880b00 	addeq	r0, r8, r0, lsl #22
     8f0:	001f0000 	andseq	r0, pc, r0
     8f4:	03c9040e 	biceq	r0, r9, #234881024	; 0xe000000
     8f8:	05130000 	ldreq	r0, [r3, #-0]
     8fc:	00000661 	andeq	r0, r0, r1, ror #12
     900:	08750808 	ldmdaeq	r5!, {r3, fp}^
     904:	000003f2 	strdeq	r0, [r0], -r2
     908:	00044506 	andeq	r4, r4, r6, lsl #10
     90c:	11760800 	cmnne	r6, r0, lsl #16
     910:	000003f2 	strdeq	r0, [r0], -r2
     914:	035c0600 	cmpeq	ip, #0, 12
     918:	77080000 	strvc	r0, [r8, -r0]
     91c:	00008106 	andeq	r8, r0, r6, lsl #2
     920:	0e000400 	cfcpyseq	mvf0, mvf0
     924:	00003804 	andeq	r3, r0, r4, lsl #16
     928:	06850500 	streq	r0, [r5], r0, lsl #10
     92c:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
     930:	053b08b5 	ldreq	r0, [fp, #-2229]!	; 0xfffff74b
     934:	5f100000 	svcpl	0x00100000
     938:	b6080070 			; <UNDEFINED> instruction: 0xb6080070
     93c:	0003f212 	andeq	pc, r3, r2, lsl r2	; <UNPREDICTABLE>
     940:	5f100000 	svcpl	0x00100000
     944:	b7080072 	smlsdxlt	r8, r2, r0, r0
     948:	00008107 	andeq	r8, r0, r7, lsl #2
     94c:	5f100400 	svcpl	0x00100400
     950:	b8080077 	stmdalt	r8, {r0, r1, r2, r4, r5, r6}
     954:	00008107 	andeq	r8, r0, r7, lsl #2
     958:	74060800 	strvc	r0, [r6], #-2048	; 0xfffff800
     95c:	08000004 	stmdaeq	r0, {r2}
     960:	003f09b9 	ldrhteq	r0, [pc], -r9
     964:	060c0000 	streq	r0, [ip], -r0
     968:	00000540 	andeq	r0, r0, r0, asr #10
     96c:	3f09ba08 	svccc	0x0009ba08
     970:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     974:	66625f10 	uqadd16vs	r5, r2, r0
     978:	11bb0800 			; <UNDEFINED> instruction: 0x11bb0800
     97c:	000003ca 	andeq	r0, r0, sl, asr #7
     980:	03e60610 	mvneq	r0, #16, 12	; 0x1000000
     984:	bc080000 	stclt	0, cr0, [r8], {-0}
     988:	00008107 	andeq	r8, r0, r7, lsl #2
     98c:	5a061800 	bpl	186994 <startup-0x1fe7966c>
     990:	08000004 	stmdaeq	r0, {r2}
     994:	02020ac3 	andeq	r0, r2, #798720	; 0xc3000
     998:	061c0000 	ldreq	r0, [ip], -r0
     99c:	000008c8 	andeq	r0, r0, r8, asr #17
     9a0:	ad1dc508 	cfldr32ge	mvfx12, [sp, #-32]	; 0xffffffe0
     9a4:	20000006 	andcs	r0, r0, r6
     9a8:	00092c06 	andeq	r2, r9, r6, lsl #24
     9ac:	1dc70800 	stclne	8, cr0, [r7]
     9b0:	000006dc 	ldrdeq	r0, [r0], -ip
     9b4:	070a0624 	streq	r0, [sl, -r4, lsr #12]
     9b8:	ca080000 	bgt	2009c0 <startup-0x1fdff640>
     9bc:	0007000d 	andeq	r0, r7, sp
     9c0:	16062800 	strne	r2, [r6], -r0, lsl #16
     9c4:	08000008 	stmdaeq	r0, {r3}
     9c8:	071a09cb 	ldreq	r0, [sl, -fp, asr #19]
     9cc:	102c0000 	eorne	r0, ip, r0
     9d0:	0062755f 	rsbeq	r7, r2, pc, asr r5
     9d4:	ca11ce08 	bgt	4741fc <startup-0x1fb8be04>
     9d8:	30000003 	andcc	r0, r0, r3
     9dc:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
     9e0:	12cf0800 	sbcne	r0, pc, #0, 16
     9e4:	000003f2 	strdeq	r0, [r0], -r2
     9e8:	755f1038 	ldrbvc	r1, [pc, #-56]	; 9b8 <startup-0x1ffff648>
     9ec:	d0080072 	andle	r0, r8, r2, ror r0
     9f0:	00008107 	andeq	r8, r0, r7, lsl #2
     9f4:	3f063c00 	svccc	0x00063c00
     9f8:	08000004 	stmdaeq	r0, {r2}
     9fc:	072011d3 			; <UNDEFINED> instruction: 0x072011d3
     a00:	06400000 	strbeq	r0, [r0], -r0
     a04:	000007ee 	andeq	r0, r0, lr, ror #15
     a08:	3011d408 	andscc	sp, r1, r8, lsl #8
     a0c:	43000007 	movwmi	r0, #7
     a10:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
     a14:	11d70800 	bicsne	r0, r7, r0, lsl #16
     a18:	000003ca 	andeq	r0, r0, sl, asr #7
     a1c:	048a0644 	streq	r0, [sl], #1604	; 0x644
     a20:	da080000 	ble	200a28 <startup-0x1fdff5d8>
     a24:	00008107 	andeq	r8, r0, r7, lsl #2
     a28:	ad064c00 	stcge	12, cr4, [r6, #-0]
     a2c:	08000004 	stmdaeq	r0, {r2}
     a30:	016f0adb 	ldrdeq	r0, [pc, #-171]	; 98d <startup-0x1ffff673>
     a34:	06500000 	ldrbeq	r0, [r0], -r0
     a38:	000008f5 	strdeq	r0, [r0], -r5
     a3c:	5912de08 	ldmdbpl	r2, {r3, r9, sl, fp, ip, lr, pc}
     a40:	54000005 	strpl	r0, [r0], #-5
     a44:	00058406 	andeq	r8, r5, r6, lsl #8
     a48:	0ce20800 	stcleq	8, cr0, [r2]
     a4c:	000001f6 	strdeq	r0, [r0], -r6
     a50:	06970658 			; <UNDEFINED> instruction: 0x06970658
     a54:	e4080000 	str	r0, [r8], #-0
     a58:	0001ea0e 	andeq	lr, r1, lr, lsl #20
     a5c:	93065c00 	movwls	r5, #27648	; 0x6c00
     a60:	08000005 	stmdaeq	r0, {r0, r2}
     a64:	008109e5 	addeq	r0, r1, r5, ror #19
     a68:	00640000 	rsbeq	r0, r4, r0
     a6c:	00008114 	andeq	r8, r0, r4, lsl r1
     a70:	00055900 	andeq	r5, r5, r0, lsl #18
     a74:	05591500 	ldrbeq	r1, [r9, #-1280]	; 0xfffffb00
     a78:	02150000 	andseq	r0, r5, #0
     a7c:	15000002 	strne	r0, [r0, #-2]
     a80:	00000204 	andeq	r0, r0, r4, lsl #4
     a84:	00008115 	andeq	r8, r0, r5, lsl r1
     a88:	040e0000 	streq	r0, [lr], #-0
     a8c:	00000564 	andeq	r0, r0, r4, ror #10
     a90:	0005590f 	andeq	r5, r5, pc, lsl #18
     a94:	06f51600 	ldrbteq	r1, [r5], r0, lsl #12
     a98:	04280000 	strteq	r0, [r8], #-0
     a9c:	08026008 	stmdaeq	r2, {r3, sp, lr}
     aa0:	000006ad 	andeq	r0, r0, sp, lsr #13
     aa4:	00064417 	andeq	r4, r6, r7, lsl r4
     aa8:	02620800 	rsbeq	r0, r2, #0, 16
     aac:	00008107 	andeq	r8, r0, r7, lsl #2
     ab0:	83170000 	tsthi	r7, #0
     ab4:	08000004 	stmdaeq	r0, {r2}
     ab8:	8c0b0267 	sfmhi	f0, 4, [fp], {103}	; 0x67
     abc:	04000007 	streq	r0, [r0], #-7
     ac0:	00053017 	andeq	r3, r5, r7, lsl r0
     ac4:	02670800 	rsbeq	r0, r7, #0, 16
     ac8:	00078c14 	andeq	r8, r7, r4, lsl ip
     acc:	fb170800 	blx	5c2ad6 <startup-0x1fa3d52a>
     ad0:	08000004 	stmdaeq	r0, {r2}
     ad4:	8c1e0267 	lfmhi	f0, 4, [lr], {103}	; 0x67
     ad8:	0c000007 	stceq	0, cr0, [r0], {7}
     adc:	0006b817 	andeq	fp, r6, r7, lsl r8
     ae0:	02690800 	rsbeq	r0, r9, #0, 16
     ae4:	00008108 	andeq	r8, r0, r8, lsl #2
     ae8:	b1171000 	tstlt	r7, r0
     aec:	08000003 	stmdaeq	r0, {r0, r1}
     af0:	8c08026a 	sfmhi	f0, 4, [r8], {106}	; 0x6a
     af4:	14000009 	strne	r0, [r0], #-9
     af8:	0006d417 	andeq	sp, r6, r7, lsl r4
     afc:	026d0800 	rsbeq	r0, sp, #0, 16
     b00:	00008107 	andeq	r8, r0, r7, lsl #2
     b04:	c2173000 	andsgt	r3, r7, #0
     b08:	08000006 	stmdaeq	r0, {r1, r2}
     b0c:	a116026e 	tstge	r6, lr, ror #4
     b10:	34000009 	strcc	r0, [r0], #-9
     b14:	0005fd17 	andeq	pc, r5, r7, lsl sp	; <UNPREDICTABLE>
     b18:	02700800 	rsbseq	r0, r0, #0, 16
     b1c:	00008107 	andeq	r8, r0, r7, lsl #2
     b20:	ca173800 	bgt	5ceb28 <startup-0x1fa314d8>
     b24:	08000006 	stmdaeq	r0, {r1, r2}
     b28:	b20a0272 	andlt	r0, sl, #536870919	; 0x20000007
     b2c:	3c000009 	stccc	0, cr0, [r0], {9}
     b30:	00056f17 	andeq	r6, r5, r7, lsl pc
     b34:	02750800 	rsbseq	r0, r5, #0, 16
     b38:	00027c13 	andeq	r7, r2, r3, lsl ip
     b3c:	1a174000 	bne	5d0b44 <startup-0x1fa2f4bc>
     b40:	08000005 	stmdaeq	r0, {r0, r2}
     b44:	81070276 	tsthi	r7, r6, ror r2
     b48:	44000000 	strmi	r0, [r0], #-0
     b4c:	00083017 	andeq	r3, r8, r7, lsl r0
     b50:	02770800 	rsbseq	r0, r7, #0, 16
     b54:	00027c13 	andeq	r7, r2, r3, lsl ip
     b58:	21174800 	tstcs	r7, r0, lsl #16
     b5c:	08000006 	stmdaeq	r0, {r1, r2}
     b60:	b8140278 	ldmdalt	r4, {r3, r4, r5, r6, r9}
     b64:	4c000009 	stcmi	0, cr0, [r0], {9}
     b68:	00053817 	andeq	r3, r5, r7, lsl r8
     b6c:	027b0800 	rsbseq	r0, fp, #0, 16
     b70:	00008107 	andeq	r8, r0, r7, lsl #2
     b74:	a5175000 	ldrge	r5, [r7, #-0]
     b78:	08000004 	stmdaeq	r0, {r2}
     b7c:	0409027c 	streq	r0, [r9], #-636	; 0xfffffd84
     b80:	54000002 	strpl	r0, [r0], #-2
     b84:	00063d17 	andeq	r3, r6, r7, lsl sp
     b88:	029f0800 	addseq	r0, pc, #0, 16
     b8c:	00096707 	andeq	r6, r9, r7, lsl #14
     b90:	eb185800 	bl	616b98 <startup-0x1f9e9468>
     b94:	08000005 	stmdaeq	r0, {r0, r2}
     b98:	ad1302a3 	lfmge	f0, 4, [r3, #-652]	; 0xfffffd74
     b9c:	48000003 	stmdami	r0, {r0, r1}
     ba0:	054d1801 	strbeq	r1, [sp, #-2049]	; 0xfffff7ff
     ba4:	a4080000 	strge	r0, [r8], #-0
     ba8:	036a1202 	cmneq	sl, #536870912	; 0x20000000
     bac:	014c0000 	mrseq	r0, (UNDEF: 76)
     bb0:	0007da18 	andeq	sp, r7, r8, lsl sl
     bb4:	02a80800 	adceq	r0, r8, #0, 16
     bb8:	0009c90c 	andeq	ip, r9, ip, lsl #18
     bbc:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
     bc0:	00000462 	andeq	r0, r0, r2, ror #8
     bc4:	1002ad08 	andne	sl, r2, r8, lsl #26
     bc8:	0000074d 	andeq	r0, r0, sp, asr #14
     bcc:	551802e0 	ldrpl	r0, [r8, #-736]	; 0xfffffd20
     bd0:	08000004 	stmdaeq	r0, {r2}
     bd4:	d50a02af 	strle	r0, [sl, #-687]	; 0xfffffd51
     bd8:	ec000009 	stc	0, cr0, [r0], {9}
     bdc:	040e0002 	streq	r0, [lr], #-2
     be0:	0000053b 	andeq	r0, r0, fp, lsr r5
     be4:	00008114 	andeq	r8, r0, r4, lsl r1
     be8:	0006d100 	andeq	sp, r6, r0, lsl #2
     bec:	05591500 	ldrbeq	r1, [r9, #-1280]	; 0xfffffb00
     bf0:	02150000 	andseq	r0, r5, #0
     bf4:	15000002 	strne	r0, [r0, #-2]
     bf8:	000006d1 	ldrdeq	r0, [r0], -r1
     bfc:	00008115 	andeq	r8, r0, r5, lsl r1
     c00:	040e0000 	streq	r0, [lr], #-0
     c04:	00000211 	andeq	r0, r0, r1, lsl r2
     c08:	0006d10f 	andeq	sp, r6, pc, lsl #2
     c0c:	b3040e00 	movwlt	r0, #19968	; 0x4e00
     c10:	14000006 	strne	r0, [r0], #-6
     c14:	0000017b 	andeq	r0, r0, fp, ror r1
     c18:	00000700 	andeq	r0, r0, r0, lsl #14
     c1c:	00055915 	andeq	r5, r5, r5, lsl r9
     c20:	02021500 	andeq	r1, r2, #0, 10
     c24:	7b150000 	blvc	540c2c <startup-0x1fabf3d4>
     c28:	15000001 	strne	r0, [r0, #-1]
     c2c:	00000081 	andeq	r0, r0, r1, lsl #1
     c30:	e2040e00 	and	r0, r4, #0, 28
     c34:	14000006 	strne	r0, [r0], #-6
     c38:	00000081 	andeq	r0, r0, r1, lsl #1
     c3c:	0000071a 	andeq	r0, r0, sl, lsl r7
     c40:	00055915 	andeq	r5, r5, r5, lsl r9
     c44:	02021500 	andeq	r1, r2, #0, 10
     c48:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     c4c:	00070604 	andeq	r0, r7, r4, lsl #12
     c50:	00380a00 	eorseq	r0, r8, r0, lsl #20
     c54:	07300000 	ldreq	r0, [r0, -r0]!
     c58:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     c5c:	02000000 	andeq	r0, r0, #0
     c60:	00380a00 	eorseq	r0, r8, r0, lsl #20
     c64:	07400000 	strbeq	r0, [r0, -r0]
     c68:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	066e0700 	strbteq	r0, [lr], -r0, lsl #14
     c74:	1f080000 	svcne	0x00080000
     c78:	03f81a01 	mvnseq	r1, #4096	; 0x1000
     c7c:	ca190000 	bgt	640c84 <startup-0x1f9bf37c>
     c80:	0c000007 	stceq	0, cr0, [r0], {7}
     c84:	08012308 	stmdaeq	r1, {r3, r8, r9, sp}
     c88:	00000786 	andeq	r0, r0, r6, lsl #15
     c8c:	0006a517 	andeq	sl, r6, r7, lsl r5
     c90:	01250800 			; <UNDEFINED> instruction: 0x01250800
     c94:	00078611 	andeq	r8, r7, r1, lsl r6
     c98:	46170000 	ldrmi	r0, [r7], -r0
     c9c:	08000005 	stmdaeq	r0, {r0, r2}
     ca0:	81070126 	tsthi	r7, r6, lsr #2
     ca4:	04000000 	streq	r0, [r0], #-0
     ca8:	00066817 	andeq	r6, r6, r7, lsl r8
     cac:	01270800 			; <UNDEFINED> instruction: 0x01270800
     cb0:	00078c0b 	andeq	r8, r7, fp, lsl #24
     cb4:	0e000800 	cdpeq	8, 0, cr0, cr0, cr0, {0}
     cb8:	00074d04 	andeq	r4, r7, r4, lsl #26
     cbc:	40040e00 	andmi	r0, r4, r0, lsl #28
     cc0:	19000007 	stmdbne	r0, {r0, r1, r2}
     cc4:	000003a9 	andeq	r0, r0, r9, lsr #7
     cc8:	013f080e 	teqeq	pc, lr, lsl #16
     ccc:	0007cb08 	andeq	ip, r7, r8, lsl #22
     cd0:	06fc1700 	ldrbteq	r1, [ip], r0, lsl #14
     cd4:	40080000 	andmi	r0, r8, r0
     cd8:	07cb1201 	strbeq	r1, [fp, r1, lsl #4]
     cdc:	17000000 	strne	r0, [r0, -r0]
     ce0:	0000073d 	andeq	r0, r0, sp, lsr r7
     ce4:	12014108 	andne	r4, r1, #8, 2
     ce8:	000007cb 	andeq	r0, r0, fp, asr #15
     cec:	07611706 	strbeq	r1, [r1, -r6, lsl #14]!
     cf0:	42080000 	andmi	r0, r8, #0
     cf4:	00521201 	subseq	r1, r2, r1, lsl #4
     cf8:	000c0000 	andeq	r0, ip, r0
     cfc:	0000520a 	andeq	r5, r0, sl, lsl #4
     d00:	0007db00 	andeq	sp, r7, r0, lsl #22
     d04:	00880b00 	addeq	r0, r8, r0, lsl #22
     d08:	00020000 	andeq	r0, r2, r0
     d0c:	8008d01a 	andhi	sp, r8, sl, lsl r0
     d10:	08f00702 	ldmeq	r0!, {r1, r8, r9, sl}^
     d14:	93170000 	tstls	r7, #0
     d18:	08000007 	stmdaeq	r0, {r0, r1, r2}
     d1c:	88180282 	ldmdahi	r8, {r1, r7, r9}
     d20:	00000000 	andeq	r0, r0, r0
     d24:	00074317 	andeq	r4, r7, r7, lsl r3
     d28:	02830800 	addeq	r0, r3, #0, 16
     d2c:	00020412 	andeq	r0, r2, r2, lsl r4
     d30:	62170400 	andsvs	r0, r7, #0, 8
     d34:	08000005 	stmdaeq	r0, {r0, r2}
     d38:	f0100284 			; <UNDEFINED> instruction: 0xf0100284
     d3c:	08000008 	stmdaeq	r0, {r3}
     d40:	00080717 	andeq	r0, r8, r7, lsl r7
     d44:	02850800 	addeq	r0, r5, #0, 16
     d48:	00029217 	andeq	r9, r2, r7, lsl r2
     d4c:	0b172400 	bleq	5c9d54 <startup-0x1fa362ac>
     d50:	08000005 	stmdaeq	r0, {r0, r2}
     d54:	810f0286 	smlabbhi	pc, r6, r2, r0	; <UNPREDICTABLE>
     d58:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     d5c:	0006a017 	andeq	sl, r6, r7, lsl r0
     d60:	02870800 	addeq	r0, r7, #0, 16
     d64:	00007a2c 	andeq	r7, r0, ip, lsr #20
     d68:	1d175000 	ldcne	0, cr5, [r7, #-0]
     d6c:	08000008 	stmdaeq	r0, {r3}
     d70:	921a0288 	andsls	r0, sl, #136, 4	; 0x80000008
     d74:	58000007 	stmdapl	r0, {r0, r1, r2}
     d78:	0006ab17 	andeq	sl, r6, r7, lsl fp
     d7c:	02890800 	addeq	r0, r9, #0, 16
     d80:	0001ea16 	andeq	lr, r1, r6, lsl sl
     d84:	22176800 	andscs	r6, r7, #0, 16
     d88:	08000008 	stmdaeq	r0, {r3}
     d8c:	ea16028a 	b	5817bc <startup-0x1fa7e844>
     d90:	70000001 	andvc	r0, r0, r1
     d94:	00041917 	andeq	r1, r4, r7, lsl r9
     d98:	028b0800 	addeq	r0, fp, #0, 16
     d9c:	0001ea16 	andeq	lr, r1, r6, lsl sl
     da0:	d0177800 	andsle	r7, r7, r0, lsl #16
     da4:	08000007 	stmdaeq	r0, {r0, r1, r2}
     da8:	0010028c 	andseq	r0, r0, ip, lsl #5
     dac:	80000009 	andhi	r0, r0, r9
     db0:	00055617 	andeq	r5, r5, r7, lsl r6
     db4:	028d0800 	addeq	r0, sp, #0, 16
     db8:	00091010 	andeq	r1, r9, r0, lsl r0
     dbc:	6e178800 	cdpvs	8, 1, cr8, cr7, cr0, {0}
     dc0:	08000007 	stmdaeq	r0, {r0, r1, r2}
     dc4:	810f028e 	smlabbhi	pc, lr, r2, r0	; <UNPREDICTABLE>
     dc8:	a0000000 	andge	r0, r0, r0
     dcc:	0004cc17 	andeq	ip, r4, r7, lsl ip
     dd0:	028f0800 	addeq	r0, pc, #0, 16
     dd4:	0001ea16 	andeq	lr, r1, r6, lsl sl
     dd8:	0a17a400 	beq	5e9de0 <startup-0x1fa16220>
     ddc:	08000004 	stmdaeq	r0, {r2}
     de0:	ea160290 	b	581828 <startup-0x1fa7e7d8>
     de4:	ac000001 	stcge	0, cr0, [r0], {1}
     de8:	0004b517 	andeq	fp, r4, r7, lsl r5
     dec:	02910800 	addseq	r0, r1, #0, 16
     df0:	0001ea16 	andeq	lr, r1, r6, lsl sl
     df4:	c617b400 	ldrgt	fp, [r7], -r0, lsl #8
     df8:	08000003 	stmdaeq	r0, {r0, r1}
     dfc:	ea160292 	b	58184c <startup-0x1fa7e7b4>
     e00:	bc000001 	stclt	0, cr0, [r0], {1}
     e04:	0003d517 	andeq	sp, r3, r7, lsl r5
     e08:	02930800 	addseq	r0, r3, #0, 16
     e0c:	0001ea16 	andeq	lr, r1, r6, lsl sl
     e10:	4217c400 	andsmi	ip, r7, #0, 8
     e14:	08000006 	stmdaeq	r0, {r1, r2}
     e18:	81080294 			; <UNDEFINED> instruction: 0x81080294
     e1c:	cc000000 	stcgt	0, cr0, [r0], {-0}
     e20:	020a0a00 	andeq	r0, sl, #0, 20
     e24:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     e28:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     e2c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     e30:	020a0a00 	andeq	r0, sl, #0, 20
     e34:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     e38:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     e3c:	07000000 	streq	r0, [r0, -r0]
     e40:	020a0a00 	andeq	r0, sl, #0, 20
     e44:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     e48:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     e4c:	17000000 	strne	r0, [r0, -r0]
     e50:	08f01a00 	ldmeq	r0!, {r9, fp, ip}^
     e54:	47070299 			; <UNDEFINED> instruction: 0x47070299
     e58:	17000009 	strne	r0, [r0, -r9]
     e5c:	000005c8 	andeq	r0, r0, r8, asr #11
     e60:	1b029c08 	blne	a7e88 <startup-0x1ff58178>
     e64:	00000947 	andeq	r0, r0, r7, asr #18
     e68:	05b31700 	ldreq	r1, [r3, #1792]!	; 0x700
     e6c:	9d080000 	stcls	0, cr0, [r8, #-0]
     e70:	09571802 	ldmdbeq	r7, {r1, fp, ip}^
     e74:	00780000 	rsbseq	r0, r8, r0
     e78:	0003f20a 	andeq	pc, r3, sl, lsl #4
     e7c:	00095700 	andeq	r5, r9, r0, lsl #14
     e80:	00880b00 	addeq	r0, r8, r0, lsl #22
     e84:	001d0000 	andseq	r0, sp, r0
     e88:	0000880a 	andeq	r8, r0, sl, lsl #16
     e8c:	00096700 	andeq	r6, r9, r0, lsl #14
     e90:	00880b00 	addeq	r0, r8, r0, lsl #22
     e94:	001d0000 	andseq	r0, sp, r0
     e98:	7e08f01b 	mcrvc	0, 0, pc, cr8, cr11, {0}	; <UNPREDICTABLE>
     e9c:	098c0302 	stmibeq	ip, {r1, r8, r9}
     ea0:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
     ea4:	08000006 	stmdaeq	r0, {r1, r2}
     ea8:	db0b0295 	blle	2c1904 <startup-0x1fd3e6fc>
     eac:	1c000007 	stcne	0, cr0, [r0], {7}
     eb0:	000007f4 	strdeq	r0, [r0], -r4
     eb4:	0b029e08 	bleq	a86dc <startup-0x1ff57924>
     eb8:	00000920 	andeq	r0, r0, r0, lsr #18
     ebc:	020a0a00 	andeq	r0, sl, #0, 20
     ec0:	099c0000 	ldmibeq	ip, {}	; <UNPREDICTABLE>
     ec4:	880b0000 	stmdahi	fp, {}	; <UNPREDICTABLE>
     ec8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ecc:	03f81d00 	mvnseq	r1, #0, 26
     ed0:	040e0000 	streq	r0, [lr], #-0
     ed4:	0000099c 	muleq	r0, ip, r9
     ed8:	0009b21e 	andeq	fp, r9, lr, lsl r2
     edc:	05591500 	ldrbeq	r1, [r9, #-1280]	; 0xfffffb00
     ee0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     ee4:	0009a704 	andeq	sl, r9, r4, lsl #14
     ee8:	7c040e00 	stcvc	14, cr0, [r4], {-0}
     eec:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
     ef0:	000009c9 	andeq	r0, r0, r9, asr #19
     ef4:	00008115 	andeq	r8, r0, r5, lsl r1
     ef8:	040e0000 	streq	r0, [lr], #-0
     efc:	000009cf 	andeq	r0, r0, pc, asr #19
     f00:	09be040e 	ldmibeq	lr!, {r1, r2, r3, sl}
     f04:	400a0000 	andmi	r0, sl, r0
     f08:	e5000007 	str	r0, [r0, #-7]
     f0c:	0b000009 	bleq	f38 <startup-0x1ffff0c8>
     f10:	00000088 	andeq	r0, r0, r8, lsl #1
     f14:	821f0002 	andshi	r0, pc, #2
     f18:	08000007 	stmdaeq	r0, {r0, r1, r2}
     f1c:	5917032e 	ldmdbpl	r7, {r1, r2, r3, r5, r8, r9}
     f20:	1f000005 	svcne	0x00000005
     f24:	0000077b 	andeq	r0, r0, fp, ror r7
     f28:	1d032f08 	stcne	15, cr2, [r3, #-32]	; 0xffffffe0
     f2c:	0000055f 	andeq	r0, r0, pc, asr r5
     f30:	0006d70a 	andeq	sp, r6, sl, lsl #14
     f34:	000a0a00 	andeq	r0, sl, r0, lsl #20
     f38:	0f002000 	svceq	0x00002000
     f3c:	000009ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     f40:	00049321 	andeq	r9, r4, r1, lsr #6
     f44:	24140900 	ldrcs	r0, [r4], #-2304	; 0xfffff700
     f48:	00000a0a 	andeq	r0, r0, sl, lsl #20
     f4c:	00068d21 	andeq	r8, r6, r1, lsr #26
     f50:	15150900 	ldrne	r0, [r5, #-2304]	; 0xfffff700
     f54:	00000081 	andeq	r0, r0, r1, lsl #1
     f58:	0005f321 	andeq	pc, r5, r1, lsr #6
     f5c:	0e640a00 	vmuleq.f32	s1, s8, s0
     f60:	00000204 	andeq	r0, r0, r4, lsl #4
     f64:	0005aa21 	andeq	sl, r5, r1, lsr #20
     f68:	0d1a0100 	ldfeqs	f0, [sl, #-0]
     f6c:	0000020a 	andeq	r0, r0, sl, lsl #4
     f70:	00036221 	andeq	r6, r3, r1, lsr #4
     f74:	0d1b0100 	ldfeqs	f0, [fp, #-0]
     f78:	0000020a 	andeq	r0, r0, sl, lsl #4
     f7c:	00042c22 	andeq	r2, r4, r2, lsr #24
     f80:	071c0100 	ldreq	r0, [ip, -r0, lsl #2]
     f84:	00000204 	andeq	r0, r0, r4, lsl #4
     f88:	12440305 	subne	r0, r4, #335544320	; 0x14000000
     f8c:	2f052000 	svccs	0x00052000
     f90:	02000007 	andeq	r0, r0, #7
     f94:	81104301 	tsthi	r0, r1, lsl #6
     f98:	1000000a 	andne	r0, r0, sl
     f9c:	44010078 	strmi	r0, [r1], #-120	; 0xffffff88
     fa0:	00008f0d 	andeq	r8, r0, sp, lsl #30
     fa4:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
     fa8:	0d450100 	stfeqe	f0, [r5, #-0]
     fac:	0000008f 	andeq	r0, r0, pc, lsl #1
     fb0:	c6030001 	strgt	r0, [r3], -r1
     fb4:	01000004 	tsteq	r0, r4
     fb8:	0a5d0246 	beq	17418d8 <startup-0x1e8be728>
     fbc:	f3050000 	vhadd.u8	d0, d5, d0
     fc0:	08000003 	stmdaeq	r0, {r0, r1}
     fc4:	b5104801 	ldrlt	r4, [r0, #-2049]	; 0xfffff7ff
     fc8:	1000000a 	andne	r0, r0, sl
     fcc:	00736f70 	rsbseq	r6, r3, r0, ror pc
     fd0:	810b4901 	tsthi	fp, r1, lsl #18
     fd4:	0000000a 	andeq	r0, r0, sl
     fd8:	0006a606 	andeq	sl, r6, r6, lsl #12
     fdc:	124a0100 	subne	r0, sl, #0, 2
     fe0:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
     fe4:	040e0004 	streq	r0, [lr], #-4
     fe8:	00000a8d 	andeq	r0, r0, sp, lsl #21
     fec:	00068003 	andeq	r8, r6, r3
     ff0:	024b0100 	subeq	r0, fp, #0, 2
     ff4:	00000a8d 	andeq	r0, r0, sp, lsl #21
     ff8:	00078e05 	andeq	r8, r7, r5, lsl #28
     ffc:	4d011000 	stcmi	0, cr1, [r1, #-0]
    1000:	000b1610 	andeq	r1, fp, r0, lsl r6
    1004:	06180600 	ldreq	r0, [r8], -r0, lsl #12
    1008:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    100c:	000a810b 	andeq	r8, sl, fp, lsl #2
    1010:	a0060000 	andge	r0, r6, r0
    1014:	01000004 	tsteq	r0, r4
    1018:	0a810b4f 	beq	fe043d5c <__malloc_sbrk_start+0xde041158>
    101c:	06020000 	streq	r0, [r2], -r0
    1020:	000006a6 	andeq	r0, r0, r6, lsr #13
    1024:	160b5001 	strne	r5, [fp], -r1
    1028:	0400000b 	streq	r0, [r0], #-11
    102c:	00046f06 	andeq	r6, r4, r6, lsl #30
    1030:	0c510100 	ldfeqe	f0, [r1], {-0}
    1034:	00000b2d 	andeq	r0, r0, sp, lsr #22
    1038:	07e90608 	strbeq	r0, [r9, r8, lsl #12]!
    103c:	52010000 	andpl	r0, r1, #0
    1040:	000b2d0c 	andeq	r2, fp, ip, lsl #26
    1044:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    1048:	000abb04 	andeq	fp, sl, r4, lsl #22
    104c:	0b271e00 	bleq	9c8854 <startup-0x1f6377ac>
    1050:	27150000 	ldrcs	r0, [r5, -r0]
    1054:	0000000b 	andeq	r0, r0, fp
    1058:	0ac7040e 	beq	ff1c2098 <__malloc_sbrk_start+0xdf1bf494>
    105c:	040e0000 	streq	r0, [lr], #-0
    1060:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1064:	00059b03 	andeq	r9, r5, r3, lsl #22
    1068:	02530100 	subseq	r0, r3, #0, 2
    106c:	00000ac7 	andeq	r0, r0, r7, asr #21
    1070:	00032f21 	andeq	r2, r3, r1, lsr #30
    1074:	16730100 	ldrbtne	r0, [r3], -r0, lsl #2
    1078:	00000b52 	andeq	r0, r0, r2, asr fp
    107c:	4a020102 	bmi	8148c <startup-0x1ff7eb74>
    1080:	23000003 	movwcs	r0, #3
    1084:	00000b4b 	andeq	r0, r0, fp, asr #22
    1088:	00040322 	andeq	r0, r4, r2, lsr #6
    108c:	07750100 	ldrbeq	r0, [r5, -r0, lsl #2]!
    1090:	00000b69 	andeq	r0, r0, r9, ror #22
    1094:	12400305 	subne	r0, r0, #335544320	; 0x14000000
    1098:	040e2000 	streq	r2, [lr], #-0
    109c:	00000b33 	andeq	r0, r0, r3, lsr fp
    10a0:	00083524 	andeq	r3, r8, r4, lsr #10
    10a4:	05890100 	streq	r0, [r9, #256]	; 0x100
    10a8:	00000081 	andeq	r0, r0, r1, lsl #1
    10ac:	200005f4 	strdcs	r0, [r0], -r4
    10b0:	00000068 	andeq	r0, r0, r8, rrx
    10b4:	0bb79c01 	bleq	fede80c0 <__malloc_sbrk_start+0xdede54bc>
    10b8:	a0250000 	eorge	r0, r5, r0
    10bc:	01000007 	tsteq	r0, r7
    10c0:	02040b8b 	andeq	r0, r4, #142336	; 0x22c00
    10c4:	91020000 	mrsls	r0, (UNDEF: 2)
    10c8:	07a62574 			; <UNDEFINED> instruction: 0x07a62574
    10cc:	8b010000 	blhi	410d4 <startup-0x1ffbef2c>
    10d0:	00020413 	andeq	r0, r2, r3, lsl r4
    10d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    10d8:	0007ac25 	andeq	sl, r7, r5, lsr #24
    10dc:	1b8b0100 	blne	fe2c14e4 <__malloc_sbrk_start+0xde2be8e0>
    10e0:	00000204 	andeq	r0, r0, r4, lsl #4
    10e4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    10e8:	00058a26 	andeq	r8, r5, r6, lsr #20
    10ec:	06810100 	streq	r0, [r1], r0, lsl #2
    10f0:	200005cc 	andcs	r0, r0, ip, asr #11
    10f4:	00000028 	andeq	r0, r0, r8, lsr #32
    10f8:	35269c01 	strcc	r9, [r6, #-3073]!	; 0xfffff3ff
    10fc:	01000004 	tsteq	r0, r4
    1100:	055c0677 	ldrbeq	r0, [ip, #-1655]	; 0xfffff989
    1104:	00702000 	rsbseq	r2, r0, r0
    1108:	9c010000 	stcls	0, cr0, [r1], {-0}
    110c:	0007e427 	andeq	lr, r7, r7, lsr #8
    1110:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
    1114:	20000514 	andcs	r0, r0, r4, lsl r5
    1118:	00000048 	andeq	r0, r0, r8, asr #32
    111c:	0c1a9c01 	ldceq	12, cr9, [sl], {1}
    1120:	e2280000 	eor	r0, r8, #0
    1124:	01000004 	tsteq	r0, r4
    1128:	0b69166c 	bleq	1a46ae0 <startup-0x1e5b9520>
    112c:	91020000 	mrsls	r0, (UNDEF: 2)
    1130:	052c296c 	streq	r2, [ip, #-2412]!	; 0xfffff694
    1134:	00262000 	eoreq	r2, r6, r0
    1138:	e6250000 	strt	r0, [r5], -r0
    113c:	01000005 	tsteq	r0, r5
    1140:	0b16106e 	bleq	585300 <startup-0x1fa7ad00>
    1144:	91020000 	mrsls	r0, (UNDEF: 2)
    1148:	27000074 	smlsdxcs	r0, r4, r0, r0
    114c:	0000046a 	andeq	r0, r0, sl, ror #8
    1150:	74065601 	strvc	r5, [r6], #-1537	; 0xfffff9ff
    1154:	a0200004 	eorge	r0, r0, r4
    1158:	01000000 	mrseq	r0, (UNDEF: 0)
    115c:	000c5e9c 	muleq	ip, ip, lr
    1160:	04e22800 	strbteq	r2, [r2], #2048	; 0x800
    1164:	56010000 	strpl	r0, [r1], -r0
    1168:	000b6916 	andeq	r6, fp, r6, lsl r9
    116c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1170:	0003ef25 	andeq	lr, r3, r5, lsr #30
    1174:	0b590100 	bleq	164157c <startup-0x1e9bea84>
    1178:	00000b16 	andeq	r0, r0, r6, lsl fp
    117c:	25709102 	ldrbcs	r9, [r0, #-258]!	; 0xfffffefe
    1180:	0000060f 	andeq	r0, r0, pc, lsl #12
    1184:	160b6201 	strne	r6, [fp], -r1, lsl #4
    1188:	0200000b 	andeq	r0, r0, #11
    118c:	2a007491 	bcs	1e3d8 <startup-0x1ffe1c28>
    1190:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    1194:	180d2c01 	stmdane	sp, {r0, sl, fp, sp}
    1198:	5c200004 	stcpl	0, cr0, [r0], #-16
    119c:	01000000 	mrseq	r0, (UNDEF: 0)
    11a0:	000c9a9c 	muleq	ip, ip, sl
    11a4:	05cf2100 	strbeq	r2, [pc, #256]	; 12ac <startup-0x1fffed54>
    11a8:	2d010000 	stccs	0, cr0, [r1, #-0]
    11ac:	00020a11 	andeq	r0, r2, r1, lsl sl
    11b0:	06552100 	ldrbeq	r2, [r5], -r0, lsl #2
    11b4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    11b8:	00020a11 	andeq	r0, r2, r1, lsl sl
    11bc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    11c0:	040b2f01 	streq	r2, [fp], #-3841	; 0xfffff0ff
    11c4:	02000002 	andeq	r0, r0, #2
    11c8:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    11cc:	00000849 	andeq	r0, r0, r9, asr #16
    11d0:	04071e01 	streq	r1, [r7], #-3585	; 0xfffff1ff
    11d4:	bc000002 	stclt	0, cr0, [r0], {2}
    11d8:	5c200003 	stcpl	0, cr0, [r0], #-12
    11dc:	01000000 	mrseq	r0, (UNDEF: 0)
    11e0:	000cd39c 	muleq	ip, ip, r3
    11e4:	08442800 	stmdaeq	r4, {fp, sp}^
    11e8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    11ec:	00008111 	andeq	r8, r0, r1, lsl r1
    11f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11f4:	00042725 	andeq	r2, r4, r5, lsr #14
    11f8:	0b1f0100 	bleq	7c1600 <startup-0x1f83ea00>
    11fc:	00000204 	andeq	r0, r0, r4, lsl #4
    1200:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1204:	0007352c 	andeq	r3, r7, ip, lsr #10
    1208:	060f0100 	streq	r0, [pc], -r0, lsl #2
    120c:	20000000 	andcs	r0, r0, r0
    1210:	00000010 	andeq	r0, r0, r0, lsl r0
    1214:	e1009c01 	tst	r0, r1, lsl #24
    1218:	04000003 	streq	r0, [r0], #-3
    121c:	0004bc00 	andeq	fp, r4, r0, lsl #24
    1220:	8f010400 	svchi	0x00010400
    1224:	0c000000 	stceq	0, cr0, [r0], {-0}
    1228:	0000086d 	andeq	r0, r0, sp, ror #16
    122c:	000001c3 	andeq	r0, r0, r3, asr #3
    1230:	2000065c 	andcs	r0, r0, ip, asr r6
    1234:	00000506 	andeq	r0, r0, r6, lsl #10
    1238:	00000627 	andeq	r0, r0, r7, lsr #12
    123c:	80060102 	andhi	r0, r6, r2, lsl #2
    1240:	03000001 	movweq	r0, #1
    1244:	000000f3 	strdeq	r0, [r0], -r3
    1248:	38182b02 	ldmdacc	r8, {r1, r8, r9, fp, sp}
    124c:	02000000 	andeq	r0, r0, #0
    1250:	017e0801 	cmneq	lr, r1, lsl #16
    1254:	02020000 	andeq	r0, r2, #0
    1258:	00002a05 	andeq	r2, r0, r5, lsl #20
    125c:	005a0300 	subseq	r0, sl, r0, lsl #6
    1260:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    1264:	00005219 	andeq	r5, r0, r9, lsl r2
    1268:	07020200 	streq	r0, [r2, -r0, lsl #4]
    126c:	000001ab 	andeq	r0, r0, fp, lsr #3
    1270:	d1050402 	tstle	r5, r2, lsl #8
    1274:	03000000 	movweq	r0, #0
    1278:	0000004f 	andeq	r0, r0, pc, asr #32
    127c:	6c194f02 	ldcvs	15, cr4, [r9], {2}
    1280:	02000000 	andeq	r0, r0, #0
    1284:	01990704 	orrseq	r0, r9, r4, lsl #14
    1288:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    128c:	0000cc05 	andeq	ip, r0, r5, lsl #24
    1290:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1294:	00000194 	muleq	r0, r4, r1
    1298:	69050404 	stmdbvs	r5, {r2, sl}
    129c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    12a0:	019e0704 	orrseq	r0, lr, r4, lsl #14
    12a4:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    12a8:	03000000 	movweq	r0, #0
    12ac:	002c1318 	eoreq	r1, ip, r8, lsl r3
    12b0:	5c030000 	stcpl	0, cr0, [r3], {-0}
    12b4:	03000000 	movweq	r0, #0
    12b8:	00461424 	subeq	r1, r6, r4, lsr #8
    12bc:	51030000 	mrspl	r0, (UNDEF: 3)
    12c0:	03000000 	movweq	r0, #0
    12c4:	00601430 	rsbeq	r1, r0, r0, lsr r4
    12c8:	6d050000 	stcvs	0, cr0, [r5, #-0]
    12cc:	18000002 	stmdane	r0, {r1}
    12d0:	50100e04 	andspl	r0, r0, r4, lsl #28
    12d4:	06000001 	streq	r0, [r0], -r1
    12d8:	000000e2 	andeq	r0, r0, r2, ror #1
    12dc:	a70e0f04 	strge	r0, [lr, -r4, lsl #30]
    12e0:	00000000 	andeq	r0, r0, r0
    12e4:	00006506 	andeq	r6, r0, r6, lsl #10
    12e8:	0e100400 	cfmulseq	mvf0, mvf0, mvf0
    12ec:	0000009b 	muleq	r0, fp, r0
    12f0:	02820604 	addeq	r0, r2, #4, 12	; 0x400000
    12f4:	11040000 	mrsne	r0, (UNDEF: 4)
    12f8:	00009b0e 	andeq	r9, r0, lr, lsl #22
    12fc:	da060600 	ble	182b04 <startup-0x1fe7d4fc>
    1300:	04000000 	streq	r0, [r0], #-0
    1304:	00a70e12 	adceq	r0, r7, r2, lsl lr
    1308:	06080000 	streq	r0, [r8], -r0
    130c:	000000fd 	strdeq	r0, [r0], -sp
    1310:	a70e1304 	strge	r1, [lr, -r4, lsl #6]
    1314:	0c000000 	stceq	0, cr0, [r0], {-0}
    1318:	00018c06 	andeq	r8, r1, r6, lsl #24
    131c:	0d140400 	cfldrseq	mvf0, [r4, #-0]
    1320:	0000008f 	andeq	r0, r0, pc, lsl #1
    1324:	006c0610 	rsbeq	r0, ip, r0, lsl r6
    1328:	15040000 	strne	r0, [r4, #-0]
    132c:	00008f0d 	andeq	r8, r0, sp, lsl #30
    1330:	82061100 	andhi	r1, r6, #0, 2
    1334:	04000000 	streq	r0, [r0], #-0
    1338:	009b0e16 	addseq	r0, fp, r6, lsl lr
    133c:	06120000 	ldreq	r0, [r2], -r0
    1340:	00000047 	andeq	r0, r0, r7, asr #32
    1344:	8f0d1704 	svchi	0x000d1704
    1348:	14000000 	strne	r0, [r0], #-0
    134c:	00023b06 	andeq	r3, r2, r6, lsl #22
    1350:	0d180400 	cfldrseq	mvf0, [r8, #-0]
    1354:	0000008f 	andeq	r0, r0, pc, lsl #1
    1358:	00000615 	andeq	r0, r0, r5, lsl r6
    135c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    1360:	00009b0e 	andeq	r9, r0, lr, lsl #22
    1364:	03001600 	movweq	r1, #1536	; 0x600
    1368:	000001be 			; <UNDEFINED> instruction: 0x000001be
    136c:	b3021a04 	movwlt	r1, #10756	; 0x2a04
    1370:	07000000 	streq	r0, [r0, -r0]
    1374:	00000860 	andeq	r0, r0, r0, ror #16
    1378:	0c06aa01 			; <UNDEFINED> instruction: 0x0c06aa01
    137c:	5620000b 	strtpl	r0, [r0], -fp
    1380:	01000000 	mrseq	r0, (UNDEF: 0)
    1384:	08ac089c 	stmiaeq	ip!, {r2, r3, r4, r7, fp}
    1388:	9f010000 	svcls	0x00010000
    138c:	000aa406 	andeq	sl, sl, r6, lsl #8
    1390:	00006820 	andeq	r6, r0, r0, lsr #16
    1394:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    1398:	09000001 	stmdbeq	r0, {r0}
    139c:	20000aaa 	andcs	r0, r0, sl, lsr #21
    13a0:	00000058 	andeq	r0, r0, r8, asr r0
    13a4:	0008e40a 	andeq	lr, r8, sl, lsl #8
    13a8:	12a00100 	adcne	r0, r0, #0, 2
    13ac:	0000008f 	andeq	r0, r0, pc, lsl #1
    13b0:	09779102 	ldmdbeq	r7!, {r1, r8, ip, pc}^
    13b4:	20000ace 	andcs	r0, r0, lr, asr #21
    13b8:	00000022 	andeq	r0, r0, r2, lsr #32
    13bc:	6464610b 	strbtvs	r6, [r4], #-267	; 0xfffffef5
    13c0:	16a30100 	strtne	r0, [r3], r0, lsl #2
    13c4:	0000008f 	andeq	r0, r0, pc, lsl #1
    13c8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    13cc:	4f080000 	svcmi	0x00080000
    13d0:	01000008 	tsteq	r0, r8
    13d4:	096c0686 	stmdbeq	ip!, {r1, r2, r7, r9, sl}^
    13d8:	01382000 	teqeq	r8, r0
    13dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    13e0:	00000233 	andeq	r0, r0, r3, lsr r2
    13e4:	0100780c 	tsteq	r0, ip, lsl #16
    13e8:	008f1486 	addeq	r1, pc, r6, lsl #9
    13ec:	91020000 	mrsls	r0, (UNDEF: 2)
    13f0:	00790c5f 	rsbseq	r0, r9, pc, asr ip
    13f4:	8f1f8601 	svchi	0x001f8601
    13f8:	02000000 	andeq	r0, r0, #0
    13fc:	730c5e91 	movwvc	r5, #52881	; 0xce91
    1400:	01007465 	tsteq	r0, r5, ror #8
    1404:	02332786 	eorseq	r2, r3, #35127296	; 0x2180000
    1408:	91020000 	mrsls	r0, (UNDEF: 2)
    140c:	08550a5d 	ldmdaeq	r5, {r0, r2, r3, r4, r6, r9, fp}^
    1410:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1414:	00008f0d 	andeq	r8, r0, sp, lsl #30
    1418:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
    141c:	00096d0a 	andeq	r6, r9, sl, lsl #26
    1420:	14880100 	strne	r0, [r8], #256	; 0x100
    1424:	0000008f 	andeq	r0, r0, pc, lsl #1
    1428:	0a679102 	beq	19e5838 <startup-0x1e61a7c8>
    142c:	00000213 	andeq	r0, r0, r3, lsl r2
    1430:	8f1a8801 	svchi	0x001a8801
    1434:	02000000 	andeq	r0, r0, #0
    1438:	5b0a6691 	blpl	29ae84 <startup-0x1fd6517c>
    143c:	01000008 	tsteq	r0, r8
    1440:	008f0d95 	umulleq	r0, pc, r5, sp	; <UNPREDICTABLE>
    1444:	91020000 	mrsls	r0, (UNDEF: 2)
    1448:	01020064 	tsteq	r2, r4, rrx
    144c:	00034a02 	andeq	r4, r3, r2, lsl #20
    1450:	08e90d00 	stmiaeq	r9!, {r8, sl, fp}^
    1454:	81010000 	mrshi	r0, (UNDEF: 1)
    1458:	00008f09 	andeq	r8, r0, r9, lsl #30
    145c:	00094200 	andeq	r4, r9, r0, lsl #4
    1460:	00002a20 	andeq	r2, r0, r0, lsr #20
    1464:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    1468:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    146c:	00000213 	andeq	r0, r0, r3, lsl r2
    1470:	8f238101 	svchi	0x00238101
    1474:	02000000 	andeq	r0, r0, #0
    1478:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    147c:	000008fb 	strdeq	r0, [r0], -fp
    1480:	fc067901 	stc2	9, cr7, [r6], {1}	; <UNPREDICTABLE>
    1484:	46200008 	strtmi	r0, [r0], -r8
    1488:	01000000 	mrseq	r0, (UNDEF: 0)
    148c:	0002999c 	muleq	r2, ip, r9
    1490:	08f60e00 	ldmeq	r6!, {r9, sl, fp}^
    1494:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    1498:	00008f21 	andeq	r8, r0, r1, lsr #30
    149c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    14a0:	0002130e 	andeq	r1, r2, lr, lsl #6
    14a4:	2f790100 	svccs	0x00790100
    14a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    14ac:	00769102 	rsbseq	r9, r6, r2, lsl #2
    14b0:	0008ce08 	andeq	ip, r8, r8, lsl #28
    14b4:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
    14b8:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
    14bc:	00000040 	andeq	r0, r0, r0, asr #32
    14c0:	02ce9c01 	sbceq	r9, lr, #256	; 0x100
    14c4:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    14c8:	01000008 	tsteq	r0, r8
    14cc:	008f2472 	addeq	r2, pc, r2, ror r4	; <UNPREDICTABLE>
    14d0:	91020000 	mrsls	r0, (UNDEF: 2)
    14d4:	02130e77 	andseq	r0, r3, #1904	; 0x770
    14d8:	72010000 	andvc	r0, r1, #0
    14dc:	00008f35 	andeq	r8, r0, r5, lsr pc
    14e0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    14e4:	09250800 	stmdbeq	r5!, {fp}
    14e8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    14ec:	00083c06 	andeq	r3, r8, r6, lsl #24
    14f0:	00008020 	andeq	r8, r0, r0, lsr #32
    14f4:	039c0100 	orrseq	r0, ip, #0, 2
    14f8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    14fc:	00000752 	andeq	r0, r0, r2, asr r7
    1500:	8f1c5e01 	svchi	0x001c5e01
    1504:	02000000 	andeq	r0, r0, #0
    1508:	130e7791 	movwne	r7, #59281	; 0xe791
    150c:	01000002 	tsteq	r0, r2
    1510:	008f2b5e 	addeq	r2, pc, lr, asr fp	; <UNPREDICTABLE>
    1514:	91020000 	mrsls	r0, (UNDEF: 2)
    1518:	c10d0076 	tstgt	sp, r6, ror r0
    151c:	01000008 	tsteq	r0, r8
    1520:	008f0948 	addeq	r0, pc, r8, asr #18
    1524:	07ac0000 	streq	r0, [ip, r0]!
    1528:	00902000 	addseq	r2, r0, r0
    152c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1530:	0000033c 	andeq	r0, r0, ip, lsr r3
    1534:	0002130e 	andeq	r1, r2, lr, lsl #6
    1538:	1e480100 	dvfnee	f0, f0, f0
    153c:	0000008f 	andeq	r0, r0, pc, lsl #1
    1540:	0a6f9102 	beq	1be5950 <startup-0x1e41a6b0>
    1544:	00000972 	andeq	r0, r0, r2, ror r9
    1548:	8f0d5001 	svchi	0x000d5001
    154c:	02000000 	andeq	r0, r0, #0
    1550:	0f007791 	svceq	0x00007791
    1554:	0000095a 	andeq	r0, r0, sl, asr r9
    1558:	3e063401 	cdpcc	4, 0, cr3, cr6, cr1, {0}
    155c:	6e200007 	cdpvs	0, 2, cr0, cr0, cr7, {0}
    1560:	01000000 	mrseq	r0, (UNDEF: 0)
    1564:	0003609c 	muleq	r3, ip, r0
    1568:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    156c:	8f0d3b01 	svchi	0x000d3b01
    1570:	02000000 	andeq	r0, r0, #0
    1574:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    1578:	00000948 	andeq	r0, r0, r8, asr #18
    157c:	e4062101 	str	r2, [r6], #-257	; 0xfffffeff
    1580:	5a200006 	bpl	8015a0 <startup-0x1f7fea60>
    1584:	01000000 	mrseq	r0, (UNDEF: 0)
    1588:	0003869c 	muleq	r3, ip, r6
    158c:	02130e00 	andseq	r0, r3, #0, 28
    1590:	21010000 	mrscs	r0, (UNDEF: 1)
    1594:	00008f20 	andeq	r8, r0, r0, lsr #30
    1598:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    159c:	090e1000 	stmdbeq	lr, {ip}
    15a0:	1b010000 	blne	415a8 <startup-0x1ffbea58>
    15a4:	0006a006 	andeq	sl, r6, r6
    15a8:	00004420 	andeq	r4, r0, r0, lsr #8
    15ac:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    15b0:	0c000003 	stceq	0, cr0, [r0], {3}
    15b4:	1b010078 	blne	4179c <startup-0x1ffbe864>
    15b8:	00008f25 	andeq	r8, r0, r5, lsr #30
    15bc:	6f910200 	svcvs	0x00910200
    15c0:	0100630b 	tsteq	r0, fp, lsl #6
    15c4:	008f0d1c 	addeq	r0, pc, ip, lsl sp	; <UNPREDICTABLE>
    15c8:	91020000 	mrsls	r0, (UNDEF: 2)
    15cc:	33110077 	tstcc	r1, #119	; 0x77
    15d0:	01000009 	tsteq	r0, r9
    15d4:	065c0615 			; <UNDEFINED> instruction: 0x065c0615
    15d8:	00442000 	subeq	r2, r4, r0
    15dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    15e0:	0100780c 	tsteq	r0, ip, lsl #16
    15e4:	008f2315 	addeq	r2, pc, r5, lsl r3	; <UNPREDICTABLE>
    15e8:	91020000 	mrsls	r0, (UNDEF: 2)
    15ec:	00630b6f 	rsbeq	r0, r3, pc, ror #22
    15f0:	8f0d1601 	svchi	0x000d1601
    15f4:	02000000 	andeq	r0, r0, #0
    15f8:	00007791 	muleq	r0, r1, r7

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	03011305 	movweq	r1, #4869	; 0x1305
  3c:	3a0b0b0e 	bcc	2c2c7c <startup-0x1fd3d384>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0013010b 	andseq	r0, r3, fp, lsl #2
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	0b381349 	bleq	e04d80 <startup-0x1f1fb280>
  58:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  5c:	03193f01 	tsteq	r9, #1, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  6c:	96184006 	ldrls	r4, [r8], -r6
  70:	13011942 	movwne	r1, #6466	; 0x1942
  74:	05080000 	streq	r0, [r8, #-0]
  78:	3a080300 	bcc	200c80 <startup-0x1fdff380>
  7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  84:	09000018 	stmdbeq	r0, {r3, r4}
  88:	0b0b000f 	bleq	2c00cc <startup-0x1fd3ff34>
  8c:	00001349 	andeq	r1, r0, r9, asr #6
  90:	0300050a 	movweq	r0, #1290	; 0x50a
  94:	3b0b3a0e 	blcc	2ce8d4 <startup-0x1fd3172c>
  98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  9c:	00180213 	andseq	r0, r8, r3, lsl r2
  a0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
  b4:	03193f00 	tsteq	r9, #0, 30
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  c4:	96184006 	ldrls	r4, [r8], -r6
  c8:	00001942 	andeq	r1, r0, r2, asr #18
  cc:	3f012e0d 	svccc	0x00012e0d
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  e0:	96184006 	ldrls	r4, [r8], -r6
  e4:	13011942 	movwne	r1, #6466	; 0x1942
  e8:	340e0000 	strcc	r0, [lr], #-0
  ec:	3a080300 	bcc	200cf4 <startup-0x1fdff30c>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f8:	0f000018 	svceq	0x00000018
  fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	0b390b3b 	bleq	e42df8 <startup-0x1f1bd208>
 108:	01111927 	tsteq	r1, r7, lsr #18
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	01194297 			; <UNDEFINED> instruction: 0x01194297
 114:	10000013 	andne	r0, r0, r3, lsl r0
 118:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	0b390b3b 	bleq	e42e14 <startup-0x1f1bd1ec>
 124:	01111927 	tsteq	r1, r7, lsr #18
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	00194297 	mulseq	r9, r7, r2
 130:	11010000 	mrsne	r0, (UNDEF: 1)
 134:	130e2501 	movwne	r2, #58625	; 0xe501
 138:	1b0e030b 	blne	380d6c <startup-0x1fc7f294>
 13c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 140:	00171006 	andseq	r1, r7, r6
 144:	00240200 	eoreq	r0, r4, r0, lsl #4
 148:	0b3e0b0b 	bleq	f82d7c <startup-0x1f07d284>
 14c:	00000e03 	andeq	r0, r0, r3, lsl #28
 150:	03001603 	movweq	r1, #1539	; 0x603
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 15c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 160:	0b0b0024 	bleq	2c01f8 <startup-0x1fd3fe08>
 164:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 168:	35050000 	strcc	r0, [r5, #-0]
 16c:	00134900 	andseq	r4, r3, r0, lsl #18
 170:	01130600 	tsteq	r3, r0, lsl #12
 174:	0b3a0b0b 	bleq	e82da8 <startup-0x1f17d258>
 178:	0b390b3b 	bleq	e42e6c <startup-0x1f1bd194>
 17c:	00001301 	andeq	r1, r0, r1, lsl #6
 180:	03000d07 	movweq	r0, #3335	; 0xd07
 184:	3b0b3a0e 	blcc	2ce9c4 <startup-0x1fd3163c>
 188:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 18c:	000b3813 	andeq	r3, fp, r3, lsl r8
 190:	000d0800 	andeq	r0, sp, r0, lsl #16
 194:	0b3a0803 	bleq	e821a8 <startup-0x1f17de58>
 198:	0b390b3b 	bleq	e42e8c <startup-0x1f1bd174>
 19c:	0b381349 	bleq	e04ec8 <startup-0x1f1fb138>
 1a0:	16090000 	strne	r0, [r9], -r0
 1a4:	3a080300 	bcc	200dac <startup-0x1fdff254>
 1a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ac:	0013490b 	andseq	r4, r3, fp, lsl #18
 1b0:	00340a00 	eorseq	r0, r4, r0, lsl #20
 1b4:	0b3a0e03 	bleq	e839c8 <startup-0x1f17c638>
 1b8:	0b390b3b 	bleq	e42eac <startup-0x1f1bd154>
 1bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	3f012e0b 	svccc	0x00012e0b
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	1119270b 	tstne	r9, fp, lsl #14
 1d4:	40061201 	andmi	r1, r6, r1, lsl #4
 1d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1dc:	00001301 	andeq	r1, r0, r1, lsl #6
 1e0:	0300050c 	movweq	r0, #1292	; 0x50c
 1e4:	3b0b3a08 	blcc	2cea0c <startup-0x1fd315f4>
 1e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1ec:	00180213 	andseq	r0, r8, r3, lsl r2
 1f0:	002e0d00 	eoreq	r0, lr, r0, lsl #26
 1f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f8:	0b3b0b3a 	bleq	ec2ee8 <startup-0x1f13d118>
 1fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 208:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 20c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	0b390b3b 	bleq	e42f08 <startup-0x1f1bd0f8>
 218:	01111927 	tsteq	r1, r7, lsr #18
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	00194296 	mulseq	r9, r6, r2
 224:	11010000 	mrsne	r0, (UNDEF: 1)
 228:	130e2501 	movwne	r2, #58625	; 0xe501
 22c:	1b0e030b 	blne	380e60 <startup-0x1fc7f1a0>
 230:	1117550e 	tstne	r7, lr, lsl #10
 234:	00171001 	andseq	r1, r7, r1
 238:	00240200 	eoreq	r0, r4, r0, lsl #4
 23c:	0b3e0b0b 	bleq	f82e70 <startup-0x1f07d190>
 240:	00000e03 	andeq	r0, r0, r3, lsl #28
 244:	03001603 	movweq	r1, #1539	; 0x603
 248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
 24c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 250:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 254:	0b0b0024 	bleq	2c02ec <startup-0x1fd3fd14>
 258:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 25c:	13050000 	movwne	r0, #20480	; 0x5000
 260:	0b0e0301 	bleq	380e6c <startup-0x1fc7f194>
 264:	3b0b3a0b 	blcc	2cea98 <startup-0x1fd31568>
 268:	010b390b 	tsteq	fp, fp, lsl #18
 26c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	13490b39 	movtne	r0, #39737	; 0x9b39
 27c:	00000b38 	andeq	r0, r0, r8, lsr fp
 280:	03001607 	movweq	r1, #1543	; 0x607
 284:	3b0b3a0e 	blcc	2ceac4 <startup-0x1fd3153c>
 288:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 28c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 290:	0b0b0117 	bleq	2c06f4 <startup-0x1fd3f90c>
 294:	0b3b0b3a 	bleq	ec2f84 <startup-0x1f13d07c>
 298:	13010b39 	movwne	r0, #6969	; 0x1b39
 29c:	0d090000 	stceq	0, cr0, [r9, #-0]
 2a0:	3a0e0300 	bcc	380ea8 <startup-0x1fc7f158>
 2a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a8:	0013490b 	andseq	r4, r3, fp, lsl #18
 2ac:	01010a00 	tsteq	r1, r0, lsl #20
 2b0:	13011349 	movwne	r1, #4937	; 0x1349
 2b4:	210b0000 	mrscs	r0, (UNDEF: 11)
 2b8:	2f134900 	svccs	0x00134900
 2bc:	0c00000b 	stceq	0, cr0, [r0], {11}
 2c0:	0b0b0113 	bleq	2c0714 <startup-0x1fd3f8ec>
 2c4:	0b3b0b3a 	bleq	ec2fb4 <startup-0x1f13d04c>
 2c8:	13010b39 	movwne	r0, #6969	; 0x1b39
 2cc:	0f0d0000 	svceq	0x000d0000
 2d0:	000b0b00 	andeq	r0, fp, r0, lsl #22
 2d4:	000f0e00 	andeq	r0, pc, r0, lsl #28
 2d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 2dc:	260f0000 	strcs	r0, [pc], -r0
 2e0:	00134900 	andseq	r4, r3, r0, lsl #18
 2e4:	000d1000 	andeq	r1, sp, r0
 2e8:	0b3a0803 	bleq	e822fc <startup-0x1f17dd04>
 2ec:	0b390b3b 	bleq	e42fe0 <startup-0x1f1bd020>
 2f0:	0b381349 	bleq	e0501c <startup-0x1f1fafe4>
 2f4:	13110000 	tstne	r1, #0
 2f8:	0b0e0301 	bleq	380f04 <startup-0x1fc7f0fc>
 2fc:	3b0b3a05 	blcc	2ceb18 <startup-0x1fd314e8>
 300:	010b390b 	tsteq	fp, fp, lsl #18
 304:	12000013 	andne	r0, r0, #19
 308:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 30c:	0b3b0b3a 	bleq	ec2ffc <startup-0x1f13d004>
 310:	13490b39 	movtne	r0, #39737	; 0x9b39
 314:	00000538 	andeq	r0, r0, r8, lsr r5
 318:	27001513 	smladcs	r0, r3, r5, r1
 31c:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 320:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 324:	13011349 	movwne	r1, #4937	; 0x1349
 328:	05150000 	ldreq	r0, [r5, #-0]
 32c:	00134900 	andseq	r4, r3, r0, lsl #18
 330:	01131600 	tsteq	r3, r0, lsl #12
 334:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 338:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 33c:	13010b39 	movwne	r0, #6969	; 0x1b39
 340:	0d170000 	ldceq	0, cr0, [r7, #-0]
 344:	3a0e0300 	bcc	380f4c <startup-0x1fc7f0b4>
 348:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 350:	1800000b 	stmdane	r0, {r0, r1, r3}
 354:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 358:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 35c:	13490b39 	movtne	r0, #39737	; 0x9b39
 360:	00000538 	andeq	r0, r0, r8, lsr r5
 364:	03011319 	movweq	r1, #4889	; 0x1319
 368:	3a0b0b0e 	bcc	2c2fa8 <startup-0x1fd3d058>
 36c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 370:	0013010b 	andseq	r0, r3, fp, lsl #2
 374:	01131a00 	tsteq	r3, r0, lsl #20
 378:	0b3a0b0b 	bleq	e82fac <startup-0x1f17d054>
 37c:	0b39053b 	bleq	e41870 <startup-0x1f1be790>
 380:	00001301 	andeq	r1, r0, r1, lsl #6
 384:	0b01171b 	bleq	45ff8 <startup-0x1ffba008>
 388:	3b0b3a0b 	blcc	2cebbc <startup-0x1fd31444>
 38c:	010b3905 	tsteq	fp, r5, lsl #18
 390:	1c000013 	stcne	0, cr0, [r0], {19}
 394:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 398:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 39c:	13490b39 	movtne	r0, #39737	; 0x9b39
 3a0:	131d0000 	tstne	sp, #0
 3a4:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 3a8:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
 3ac:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 3b0:	00001301 	andeq	r1, r0, r1, lsl #6
 3b4:	0300341f 	movweq	r3, #1055	; 0x41f
 3b8:	3b0b3a0e 	blcc	2cebf8 <startup-0x1fd31408>
 3bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 3c0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3c4:	20000019 	andcs	r0, r0, r9, lsl r0
 3c8:	00000021 	andeq	r0, r0, r1, lsr #32
 3cc:	03003421 	movweq	r3, #1057	; 0x421
 3d0:	3b0b3a0e 	blcc	2cec10 <startup-0x1fd313f0>
 3d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3d8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3dc:	22000019 	andcs	r0, r0, #25
 3e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3e4:	0b3b0b3a 	bleq	ec30d4 <startup-0x1f13cf2c>
 3e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3ec:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3f0:	35230000 	strcc	r0, [r3, #-0]!
 3f4:	00134900 	andseq	r4, r3, r0, lsl #18
 3f8:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 3fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 400:	0b3b0b3a 	bleq	ec30f0 <startup-0x1f13cf10>
 404:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 408:	01111349 	tsteq	r1, r9, asr #6
 40c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 410:	01194296 			; <UNDEFINED> instruction: 0x01194296
 414:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 418:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	13490b39 	movtne	r0, #39737	; 0x9b39
 424:	00001802 	andeq	r1, r0, r2, lsl #16
 428:	3f002e26 	svccc	0x00002e26
 42c:	3a0e0319 	bcc	381098 <startup-0x1fc7ef68>
 430:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 434:	1119270b 	tstne	r9, fp, lsl #14
 438:	40061201 	andmi	r1, r6, r1, lsl #4
 43c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 440:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 444:	03193f01 	tsteq	r9, #1, 30
 448:	3b0b3a0e 	blcc	2cec88 <startup-0x1fd31378>
 44c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 450:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 454:	96184006 	ldrls	r4, [r8], -r6
 458:	13011942 	movwne	r1, #6466	; 0x1942
 45c:	05280000 	streq	r0, [r8, #-0]!
 460:	3a0e0300 	bcc	381068 <startup-0x1fc7ef98>
 464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 468:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 46c:	29000018 	stmdbcs	r0, {r3, r4}
 470:	0111010b 	tsteq	r1, fp, lsl #2
 474:	00000612 	andeq	r0, r0, r2, lsl r6
 478:	03012e2a 	movweq	r2, #7722	; 0x1e2a
 47c:	3b0b3a0e 	blcc	2cecbc <startup-0x1fd31344>
 480:	110b390b 	tstne	fp, fp, lsl #18
 484:	40061201 	andmi	r1, r6, r1, lsl #4
 488:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 48c:	00001301 	andeq	r1, r0, r1, lsl #6
 490:	0300342b 	movweq	r3, #1067	; 0x42b
 494:	3b0b3a08 	blcc	2cecbc <startup-0x1fd31344>
 498:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 49c:	00180213 	andseq	r0, r8, r3, lsl r2
 4a0:	002e2c00 	eoreq	r2, lr, r0, lsl #24
 4a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4a8:	0b3b0b3a 	bleq	ec3198 <startup-0x1f13ce68>
 4ac:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 4b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4b8:	00000019 	andeq	r0, r0, r9, lsl r0
 4bc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4c0:	030b130e 	movweq	r1, #45838	; 0xb30e
 4c4:	110e1b0e 	tstne	lr, lr, lsl #22
 4c8:	10061201 	andne	r1, r6, r1, lsl #4
 4cc:	02000017 	andeq	r0, r0, #23
 4d0:	0b0b0024 	bleq	2c0568 <startup-0x1fd3fa98>
 4d4:	0e030b3e 	vmoveq.16	d3[0], r0
 4d8:	16030000 	strne	r0, [r3], -r0
 4dc:	3a0e0300 	bcc	3810e4 <startup-0x1fc7ef1c>
 4e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e4:	0013490b 	andseq	r4, r3, fp, lsl #18
 4e8:	00240400 	eoreq	r0, r4, r0, lsl #8
 4ec:	0b3e0b0b 	bleq	f83120 <startup-0x1f07cee0>
 4f0:	00000803 	andeq	r0, r0, r3, lsl #16
 4f4:	03011305 	movweq	r1, #4869	; 0x1305
 4f8:	3a0b0b0e 	bcc	2c3138 <startup-0x1fd3cec8>
 4fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 500:	0013010b 	andseq	r0, r3, fp, lsl #2
 504:	000d0600 	andeq	r0, sp, r0, lsl #12
 508:	0b3a0e03 	bleq	e83d1c <startup-0x1f17c2e4>
 50c:	0b390b3b 	bleq	e43200 <startup-0x1f1bce00>
 510:	0b381349 	bleq	e0523c <startup-0x1f1fadc4>
 514:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 518:	03193f00 	tsteq	r9, #0, 30
 51c:	3b0b3a0e 	blcc	2ced5c <startup-0x1fd312a4>
 520:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 524:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 528:	96184006 	ldrls	r4, [r8], -r6
 52c:	00001942 	andeq	r1, r0, r2, asr #18
 530:	3f012e08 	svccc	0x00012e08
 534:	3a0e0319 	bcc	3811a0 <startup-0x1fc7ee60>
 538:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	1119270b 	tstne	r9, fp, lsl #14
 540:	40061201 	andmi	r1, r6, r1, lsl #4
 544:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 548:	00001301 	andeq	r1, r0, r1, lsl #6
 54c:	11010b09 	tstne	r1, r9, lsl #22
 550:	00061201 	andeq	r1, r6, r1, lsl #4
 554:	00340a00 	eorseq	r0, r4, r0, lsl #20
 558:	0b3a0e03 	bleq	e83d6c <startup-0x1f17c294>
 55c:	0b390b3b 	bleq	e43250 <startup-0x1f1bcdb0>
 560:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 564:	340b0000 	strcc	r0, [fp], #-0
 568:	3a080300 	bcc	201170 <startup-0x1fdfee90>
 56c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 570:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 574:	0c000018 	stceq	0, cr0, [r0], {24}
 578:	08030005 	stmdaeq	r3, {r0, r2}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	13490b39 	movtne	r0, #39737	; 0x9b39
 584:	00001802 	andeq	r1, r0, r2, lsl #16
 588:	3f012e0d 	svccc	0x00012e0d
 58c:	3a0e0319 	bcc	3811f8 <startup-0x1fc7ee08>
 590:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 594:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 598:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 59c:	96184006 	ldrls	r4, [r8], -r6
 5a0:	13011942 	movwne	r1, #6466	; 0x1942
 5a4:	050e0000 	streq	r0, [lr, #-0]
 5a8:	3a0e0300 	bcc	3811b0 <startup-0x1fc7ee50>
 5ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5b4:	0f000018 	svceq	0x00000018
 5b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5bc:	0b3a0e03 	bleq	e83dd0 <startup-0x1f17c230>
 5c0:	0b390b3b 	bleq	e432b4 <startup-0x1f1bcd4c>
 5c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5cc:	00130119 	andseq	r0, r3, r9, lsl r1
 5d0:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 5d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5d8:	0b3b0b3a 	bleq	ec32c8 <startup-0x1f13cd38>
 5dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5e8:	00130119 	andseq	r0, r3, r9, lsl r1
 5ec:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5f4:	0b3b0b3a 	bleq	ec32e4 <startup-0x1f13cd1c>
 5f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 600:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 604:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000014 	andcs	r0, r0, r4, lsl r0
  14:	00000302 	andeq	r0, r0, r2, lsl #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03bb0002 			; <UNDEFINED> instruction: 0x03bb0002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000318 	andcs	r0, r0, r8, lsl r3
  34:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	05310002 	ldreq	r0, [r1, #-2]!
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
  54:	000002a0 	andeq	r0, r0, r0, lsr #5
  58:	20000000 	andcs	r0, r0, r0
  5c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	12170002 	andsne	r0, r7, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000065c 	andcs	r0, r0, ip, asr r6
  7c:	00000506 	andeq	r0, r0, r6, lsl #10
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000229 	andeq	r0, r0, r9, lsr #4
   4:	00f10003 	rscseq	r0, r1, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  24:	6f442f65 	svcvs	0x00442f65
  28:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  2c:	2f73746e 	svccs	0x0073746e
  30:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  34:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  38:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  3c:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  40:	6c2f3562 	cfstr32vs	mvfx3, [pc], #-392	; fffffec0 <__malloc_sbrk_start+0xdfffd2bc>
  44:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  48:	616e732f 	cmnvs	lr, pc, lsr #6
  4c:	2f00656b 	svccs	0x0000656b
  50:	2f727375 	svccs	0x00727375
  54:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  58:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  5c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  60:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
  64:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  68:	616d2f65 	cmnvs	sp, r5, ror #30
  6c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  70:	752f0065 	strvc	r0, [pc, #-101]!	; 13 <startup-0x1fffffed>
  74:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
  78:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  7c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  80:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  84:	636e692f 	cmnvs	lr, #770048	; 0xbc000
  88:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  8c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
  90:	6f682f00 	svcvs	0x00682f00
  94:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fffffee8 <__malloc_sbrk_start+0xdfffd2e4>
  98:	2f65766f 	svccs	0x0065766f
  9c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  a0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  a4:	6b732f73 	blvs	1ccbe78 <startup-0x1e334188>
  a8:	2f616c6f 	svccs	0x00616c6f
  ac:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
  b0:	6c2f3238 	sfmvs	f3, 4, [pc], #-224	; ffffffd8 <__malloc_sbrk_start+0xdfffd3d4>
  b4:	2f736269 	svccs	0x00736269
  b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  bc:	00656475 	rsbeq	r6, r5, r5, ror r4
  c0:	63734100 	cmnvs	r3, #0, 2
  c4:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
  d0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
  d4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
  d8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  dc:	00000200 	andeq	r0, r0, r0, lsl #4
  e0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
  e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
  e8:	00030068 	andeq	r0, r3, r8, rrx
  ec:	62696c00 	rsbvs	r6, r9, #0, 24
  f0:	4f495047 	svcmi	0x00495047
  f4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
  f8:	05000000 	streq	r0, [r0, #-0]
  fc:	0205002a 	andeq	r0, r5, #42	; 0x2a
 100:	20000014 	andcs	r0, r0, r4, lsl r0
 104:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
 108:	0705680f 	streq	r6, [r5, -pc, lsl #16]
 10c:	0b054b20 	bleq	152d94 <startup-0x1fead26c>
 110:	201505ad 	andscs	r0, r5, sp, lsr #11
 114:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 118:	0f05682c 	svceq	0x0005682c
 11c:	20070568 	andcs	r0, r7, r8, ror #10
 120:	054b1a05 	strbeq	r1, [fp, #-2565]	; 0xfffff5fb
 124:	0b058207 	bleq	160948 <startup-0x1fe9f6b8>
 128:	20150575 	andscs	r0, r5, r5, ror r5
 12c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 130:	05056831 	streq	r6, [r5, #-2097]	; 0xfffff7cf
 134:	3d0b0567 	cfstr32cc	mvfx0, [fp, #-412]	; 0xfffffe64
 138:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 13c:	053d3d05 	ldreq	r3, [sp, #-3333]!	; 0xfffff2fb
 140:	2b052f01 	blcs	14bd4c <startup-0x1feb42b4>
 144:	3d050568 	cfstr32cc	mvfx0, [r5, #-416]	; 0xfffffe60
 148:	1e052f3d 	mcrne	15, 0, r2, cr5, cr13, {1}
 14c:	2013052f 	andscs	r0, r3, pc, lsr #10
 150:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 154:	01053d0c 	tsteq	r5, ip, lsl #26
 158:	762d052f 	strtvc	r0, [sp], -pc, lsr #10
 15c:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 160:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 164:	05054c2b 	streq	r4, [r5, #-3115]	; 0xfffff3d5
 168:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 16c:	27055901 	strcs	r5, [r5, -r1, lsl #18]
 170:	3d0b054c 	cfstr32cc	mvfx0, [fp, #-304]	; 0xfffffed0
 174:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 178:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 17c:	0b053d17 	bleq	14f5e0 <startup-0x1feb0a20>
 180:	20130559 	andscs	r0, r3, r9, asr r5
 184:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff587 <__malloc_sbrk_start+0xdfffc983>
 188:	25052f01 	strcs	r2, [r5, #-3841]	; 0xfffff0ff
 18c:	3d0b05ae 	cfstr32cc	mvfx0, [fp, #-696]	; 0xfffffd48
 190:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 194:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 198:	0b053d17 	bleq	14f5fc <startup-0x1feb0a04>
 19c:	20130559 	andscs	r0, r3, r9, asr r5
 1a0:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff5a3 <__malloc_sbrk_start+0xdfffc99f>
 1a4:	43052f01 	movwmi	r2, #24321	; 0x5f01
 1a8:	750a05a0 	strvc	r0, [sl, #-1440]	; 0xfffffa60
 1ac:	02000c05 	andeq	r0, r0, #1280	; 0x500
 1b0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1b4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 1b8:	0a053c01 	beq	14f1c4 <startup-0x1feb0e3c>
 1bc:	01040200 	mrseq	r0, R12_usr
 1c0:	2f05053c 	svccs	0x0005053c
 1c4:	0105593d 	tsteq	r5, sp, lsr r9
 1c8:	4c45054b 	cfstr64mi	mvdx0, [r5], {75}	; 0x4b
 1cc:	05750a05 	ldrbeq	r0, [r5, #-2565]!	; 0xfffff5fb
 1d0:	0402000c 	streq	r0, [r2], #-12
 1d4:	20052001 	andcs	r2, r5, r1
 1d8:	01040200 	mrseq	r0, R12_usr
 1dc:	000a053c 	andeq	r0, sl, ip, lsr r5
 1e0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1e4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 1d8 <startup-0x1ffffe28>
 1e8:	4b010559 	blmi	41754 <startup-0x1ffbe8ac>
 1ec:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
 1f0:	4b672f05 	blmi	19cbe0c <startup-0x1e6341f4>
 1f4:	4b01054b 	blmi	41728 <startup-0x1ffbe8d8>
 1f8:	053f3c05 	ldreq	r3, [pc, #-3077]!	; fffff5fb <__malloc_sbrk_start+0xdfffc9f7>
 1fc:	08059113 	stmdaeq	r5, {r0, r1, r4, r8, ip, pc}
 200:	4b100567 	blmi	4017a4 <startup-0x1fbfe85c>
 204:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
 208:	1f05ad01 	svcne	0x0005ad01
 20c:	6705054c 	strvs	r0, [r5, -ip, asr #10]
 210:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 214:	0a054c22 	beq	1532a4 <startup-0x1feacd5c>
 218:	211c054b 	tstcs	ip, fp, asr #10
 21c:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 220:	0a05490b 	beq	152654 <startup-0x1fead9ac>
 224:	3101052e 	tstcc	r1, lr, lsr #10
 228:	01000502 	tsteq	r0, r2, lsl #10
 22c:	00012c01 	andeq	r2, r1, r1, lsl #24
 230:	c6000300 	strgt	r0, [r0], -r0, lsl #6
 234:	02000000 	andeq	r0, r0, #0
 238:	0d0efb01 	vstreq	d15, [lr, #-4]
 23c:	01010100 	mrseq	r0, (UNDEF: 17)
 240:	00000001 	andeq	r0, r0, r1
 244:	01000001 	tsteq	r0, r1
 248:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 194 <startup-0x1ffffe6c>
 24c:	6f6c2f65 	svcvs	0x006c2f65
 250:	442f6576 	strtmi	r6, [pc], #-1398	; 258 <startup-0x1ffffda8>
 254:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 258:	73746e65 	cmnvc	r4, #1616	; 0x650
 25c:	6f6b732f 	svcvs	0x006b732f
 260:	452f616c 	strmi	r6, [pc, #-364]!	; fc <startup-0x1fffff04>
 264:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 268:	616c2f32 	cmnvs	ip, r2, lsr pc
 26c:	2f356262 	svccs	0x00356262
 270:	6262616c 	rsbvs	r6, r2, #108, 2
 274:	6e732f35 	mrcvs	15, 3, r2, cr3, cr5, {1}
 278:	00656b61 	rsbeq	r6, r5, r1, ror #22
 27c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 280:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 284:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 288:	61652d65 	cmnvs	r5, r5, ror #26
 28c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 290:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 294:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 10c <startup-0x1ffffef4>
 298:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 29c:	2f00656e 	svccs	0x0000656e
 2a0:	2f727375 	svccs	0x00727375
 2a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 2ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2b0:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 2b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 2b8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 2bc:	6e000073 	mcrvs	0, 0, r0, cr0, cr3, {3}
 2c0:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
 2c4:	2e79616c 	rpwcsez	f6, f1, #4.0
 2c8:	00010063 	andeq	r0, r1, r3, rrx
 2cc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 2d0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 2d4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 2dc:	00020068 	andeq	r0, r2, r8, rrx
 2e0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 2e4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 2e8:	0300682e 	movweq	r6, #2094	; 0x82e
 2ec:	626e0000 	rsbvs	r0, lr, #0
 2f0:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 2f4:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 2f8:	00000100 	andeq	r0, r0, r0, lsl #2
 2fc:	001b0500 	andseq	r0, fp, r0, lsl #10
 300:	03180205 	tsteq	r8, #1342177280	; 0x50000000
 304:	05192000 	ldreq	r2, [r9, #-0]
 308:	0c052f12 	stceq	15, cr2, [r5], {18}
 30c:	2013053d 	andscs	r0, r3, sp, lsr r5
 310:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff713 <__malloc_sbrk_start+0xdfffcb0f>
 314:	0c052013 	stceq	0, cr2, [r5], {19}
 318:	2012052f 	andscs	r0, r2, pc, lsr #10
 31c:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff71f <__malloc_sbrk_start+0xdfffcb1b>
 320:	01052013 	tsteq	r5, r3, lsl r0
 324:	7620052f 	strtvc	r0, [r0], -pc, lsr #10
 328:	052f1005 	streq	r1, [pc, #-5]!	; 32b <startup-0x1ffffcd5>
 32c:	08055909 	stmdaeq	r5, {r0, r3, r8, fp, ip, lr}
 330:	2f09052e 	svccs	0x0009052e
 334:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
 338:	01051e16 	tsteq	r5, r6, lsl lr
 33c:	761a053e 			; <UNDEFINED> instruction: 0x761a053e
 340:	052f0505 	streq	r0, [pc, #-1285]!	; fffffe43 <__malloc_sbrk_start+0xdfffd23f>
 344:	12052025 	andne	r2, r5, #37	; 0x25
 348:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 34c:	05a01c05 	streq	r1, [r0, #3077]!	; 0xc05
 350:	05054b11 	streq	r4, [r5, #-2833]	; 0xfffff4ef
 354:	2f01053d 	svccs	0x0001053d
 358:	01000702 	tsteq	r0, r2, lsl #14
 35c:	0002c601 	andeq	ip, r2, r1, lsl #12
 360:	7b000300 	blvc	f68 <startup-0x1ffff098>
 364:	02000001 	andeq	r0, r0, #1
 368:	0d0efb01 	vstreq	d15, [lr, #-4]
 36c:	01010100 	mrseq	r0, (UNDEF: 17)
 370:	00000001 	andeq	r0, r0, r1
 374:	01000001 	tsteq	r0, r1
 378:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2c4 <startup-0x1ffffd3c>
 37c:	6f6c2f65 	svcvs	0x006c2f65
 380:	442f6576 	strtmi	r6, [pc], #-1398	; 388 <startup-0x1ffffc78>
 384:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 388:	73746e65 	cmnvc	r4, #1616	; 0x650
 38c:	6f6b732f 	svcvs	0x006b732f
 390:	452f616c 	strmi	r6, [pc, #-364]!	; 22c <startup-0x1ffffdd4>
 394:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 398:	616c2f32 	cmnvs	ip, r2, lsr pc
 39c:	2f356262 	svccs	0x00356262
 3a0:	6262616c 	rsbvs	r6, r2, #108, 2
 3a4:	6e732f35 	mrcvs	15, 3, r2, cr3, cr5, {1}
 3a8:	00656b61 	rsbeq	r6, r5, r1, ror #22
 3ac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 3b0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 3b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 3b8:	61652d65 	cmnvs	r5, r5, ror #26
 3bc:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 3c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 3c4:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 23c <startup-0x1ffffdc4>
 3c8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 3cc:	2f00656e 	svccs	0x0000656e
 3d0:	2f727375 	svccs	0x00727375
 3d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 3dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3e0:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 3e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 3e8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 3ec:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
 3f0:	2f656d6f 	svccs	0x00656d6f
 3f4:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 3f8:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 3fc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 400:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 404:	616c6f6b 	cmnvs	ip, fp, ror #30
 408:	4144452f 	cmpmi	r4, pc, lsr #10
 40c:	2f323834 	svccs	0x00323834
 410:	7362696c 	cmnvc	r2, #108, 18	; 0x1b0000
 414:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 418:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 41c:	73752f00 	cmnvc	r5, #0, 30
 420:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 424:	63672f62 	cmnvs	r7, #392	; 0x188
 428:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
 42c:	6f6e2d6d 	svcvs	0x006e2d6d
 430:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 434:	2f696261 	svccs	0x00696261
 438:	2e312e39 	mrccs	14, 1, r2, cr1, cr9, {1}
 43c:	6e692f30 	mcrvs	15, 3, r2, cr9, cr0, {1}
 440:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 444:	752f0065 	strvc	r0, [pc, #-101]!	; 3e7 <startup-0x1ffffc19>
 448:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
 44c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 450:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 454:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 458:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 45c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 460:	74730000 	ldrbtvc	r0, [r3], #-0
 464:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 468:	00632e70 	rsbeq	r2, r3, r0, ror lr
 46c:	5f000001 	svcpl	0x00000001
 470:	61666564 	cmnvs	r6, r4, ror #10
 474:	5f746c75 	svcpl	0x00746c75
 478:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 47c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 480:	5f000002 	svcpl	0x00000002
 484:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 488:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 48c:	00000300 	andeq	r0, r0, r0, lsl #6
 490:	4762696c 	strbmi	r6, [r2, -ip, ror #18]!
 494:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
 498:	00040068 	andeq	r0, r4, r8, rrx
 49c:	636f6c00 	cmnvs	pc, #0, 24
 4a0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 4a4:	5f000003 	svcpl	0x00000003
 4a8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 4ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
 4b0:	73000003 	movwvc	r0, #3
 4b4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
 4b8:	00682e66 	rsbeq	r2, r8, r6, ror #28
 4bc:	72000005 	andvc	r0, r0, #5
 4c0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 4c4:	0300682e 	movweq	r6, #2094	; 0x82e
 4c8:	72650000 	rsbvc	r0, r5, #0
 4cc:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
 4d0:	00030068 	andeq	r0, r3, r8, rrx
 4d4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
 4d8:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
 4dc:	00060068 	andeq	r0, r6, r8, rrx
 4e0:	01050000 	mrseq	r0, (UNDEF: 5)
 4e4:	00020500 	andeq	r0, r2, r0, lsl #10
 4e8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 4ec:	7b13010f 	blvc	4c0930 <startup-0x1fb3f6d0>
 4f0:	01000302 	tsteq	r0, r2, lsl #6
 4f4:	00170501 	andseq	r0, r7, r1, lsl #10
 4f8:	03bc0205 			; <UNDEFINED> instruction: 0x03bc0205
 4fc:	1d032000 	stcne	0, cr2, [r3, #-0]
 500:	4c120501 	cfldr32mi	mvfx0, [r2], {1}
 504:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 508:	13052f12 	movwne	r2, #24338	; 0x5f12
 50c:	3d12053e 	cfldr32cc	mvfx0, [r2, #-248]	; 0xffffff08
 510:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 514:	0f053d09 	svceq	0x00053d09
 518:	2f10053c 	svccs	0x0010053c
 51c:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 520:	0105670c 	tsteq	r5, ip, lsl #14
 524:	a0190521 	andsge	r0, r9, r1, lsr #10
 528:	05400e05 	strbeq	r0, [r0, #-3589]	; 0xfffff1fb
 52c:	0b053d07 	bleq	14f950 <startup-0x1feb06b0>
 530:	0e05212f 	adfeqsp	f2, f5, #10.0
 534:	2d0b053c 	cfstr32cs	mvfx0, [fp, #-240]	; 0xffffff10
 538:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
 53c:	05212f0b 	streq	r2, [r1, #-3851]!	; 0xfffff0f5
 540:	0b053c0e 	bleq	14f580 <startup-0x1feb0a80>
 544:	4d01052d 	cfstr32mi	mvfx0, [r1, #-180]	; 0xffffff4c
 548:	1d031c05 	stcne	12, cr1, [r3, #-20]	; 0xffffffec
 54c:	4d1e05f2 	cfldr32mi	mvfx0, [lr, #-968]	; 0xfffffc38
 550:	05591305 	ldrbeq	r1, [r9, #-773]	; 0xfffffcfb
 554:	1405591a 	strne	r5, [r5], #-2330	; 0xfffff6e6
 558:	2f10052e 	svccs	0x0010052e
 55c:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 560:	12052e23 	andne	r2, r5, #560	; 0x230
 564:	23054b2e 	movwcs	r4, #23342	; 0x5b2e
 568:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
 56c:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 570:	053d840b 	ldreq	r8, [sp, #-1035]!	; 0xfffffbf5
 574:	14052112 	strne	r2, [r5], #-274	; 0xfffffeee
 578:	2e1a053b 	mrccs	5, 0, r0, cr10, cr11, {1}
 57c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 580:	05053113 	streq	r3, [r5, #-275]	; 0xfffffeed
 584:	202a052e 	eorcs	r0, sl, lr, lsr #10
 588:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 58c:	05055912 	streq	r5, [r5, #-2322]	; 0xfffff6ee
 590:	3d14052e 	cfldr32cc	mvfx0, [r4, #-184]	; 0xffffff48
 594:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
 598:	05054c1c 	streq	r4, [r5, #-3100]	; 0xfffff3e4
 59c:	8310054b 	tsthi	r0, #314572800	; 0x12c00000
 5a0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 5a4:	04020009 	streq	r0, [r2], #-9
 5a8:	42052103 	andmi	r2, r5, #-1073741824	; 0xc0000000
 5ac:	03040200 	movweq	r0, #16896	; 0x4200
 5b0:	00270581 	eoreq	r0, r7, r1, lsl #11
 5b4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5b8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 5bc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 5c0:	16053101 	strne	r3, [r5], -r1, lsl #2
 5c4:	3d0b055e 	cfstr32cc	mvfx0, [fp, #-376]	; 0xfffffe88
 5c8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 5cc:	14054b0b 	strne	r4, [r5], #-2827	; 0xfffff4f5
 5d0:	4a12052e 	bmi	481a90 <startup-0x1fb7e570>
 5d4:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 5d8:	0b053c17 	bleq	14f63c <startup-0x1feb09c4>
 5dc:	3c18053d 	cfldr32cc	mvfx0, [r8], {61}	; 0x3d
 5e0:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 5e4:	0b052e12 	bleq	14be34 <startup-0x1feb41cc>
 5e8:	2e12052f 	cfmul64cs	mvdx0, mvdx2, mvdx15
 5ec:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffaef <__malloc_sbrk_start+0xdfffceeb>
 5f0:	01052e16 	tsteq	r5, r6, lsl lr
 5f4:	d815054b 	ldmdale	r5, {r0, r1, r3, r6, r8, sl}
 5f8:	4b2f0505 	blmi	bc1a14 <startup-0x1f43e5ec>
 5fc:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff6d5 <__malloc_sbrk_start+0xdfffcad1>
 600:	05692f01 	strbeq	r2, [r9, #-3841]!	; 0xfffff0ff
 604:	59593e0d 	ldmdbpl	r9, {r0, r2, r3, r9, sl, fp, ip, sp}^
 608:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 60c:	05054b0d 	streq	r4, [r5, #-2829]	; 0xfffff4f3
 610:	054b4b59 	strbeq	r4, [fp, #-2905]	; 0xfffff4a7
 614:	11055109 	tstne	r5, r9, lsl #2
 618:	3c10053f 	cfldr32cc	mvfx0, [r0], {63}	; 0x3f
 61c:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 620:	03021c09 	movweq	r1, #11273	; 0x2c09
 624:	b4010100 	strlt	r0, [r1], #-256	; 0xffffff00
 628:	03000002 	movweq	r0, #2
 62c:	0000f400 	andeq	pc, r0, r0, lsl #8
 630:	fb010200 	blx	40e3a <startup-0x1ffbf1c6>
 634:	01000d0e 	tsteq	r0, lr, lsl #26
 638:	00010101 	andeq	r0, r1, r1, lsl #2
 63c:	00010000 	andeq	r0, r1, r0
 640:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
 644:	2f656d6f 	svccs	0x00656d6f
 648:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 64c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 650:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 654:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 658:	616c6f6b 	cmnvs	ip, fp, ror #30
 65c:	4144452f 	cmpmi	r4, pc, lsr #10
 660:	2f323834 	svccs	0x00323834
 664:	6262616c 	rsbvs	r6, r2, #108, 2
 668:	616c2f35 	cmnvs	ip, r5, lsr pc
 66c:	2f356262 	svccs	0x00356262
 670:	6b616e73 	blvs	185c044 <startup-0x1e7a3fbc>
 674:	752f0065 	strvc	r0, [pc, #-101]!	; 617 <startup-0x1ffff9e9>
 678:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
 67c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 680:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 684:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 688:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 68c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 690:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
 694:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 698:	73752f00 	cmnvc	r5, #0, 30
 69c:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 6a0:	6f6e2d6d 	svcvs	0x006e2d6d
 6a4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 6a8:	2f696261 	svccs	0x00696261
 6ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6b0:	2f656475 	svccs	0x00656475
 6b4:	00737973 	rsbseq	r7, r3, r3, ror r9
 6b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 604 <startup-0x1ffff9fc>
 6bc:	6f6c2f65 	svcvs	0x006c2f65
 6c0:	442f6576 	strtmi	r6, [pc], #-1398	; 6c8 <startup-0x1ffff938>
 6c4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 6c8:	73746e65 	cmnvc	r4, #1616	; 0x650
 6cc:	6f6b732f 	svcvs	0x006b732f
 6d0:	452f616c 	strmi	r6, [pc, #-364]!	; 56c <startup-0x1ffffa94>
 6d4:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 6d8:	696c2f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, sp}^
 6dc:	692f7362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 6e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 6e4:	00006564 	andeq	r6, r0, r4, ror #10
 6e8:	70617247 	rsbvc	r7, r1, r7, asr #4
 6ec:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 6f0:	0100632e 	tsteq	r0, lr, lsr #6
 6f4:	645f0000 	ldrbvs	r0, [pc], #-0	; 6fc <startup-0x1ffff904>
 6f8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 6fc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 704 <startup-0x1ffff8fc>
 700:	73657079 	cmnvc	r5, #121	; 0x79
 704:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 708:	735f0000 	cmpvc	pc, #0
 70c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 710:	00682e74 	rsbeq	r2, r8, r4, ror lr
 714:	6c000003 	stcvs	0, cr0, [r0], {3}
 718:	50476269 	subpl	r6, r7, r9, ror #4
 71c:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 720:	00000400 	andeq	r0, r0, r0, lsl #8
 724:	00260500 	eoreq	r0, r6, r0, lsl #10
 728:	065c0205 	ldrbeq	r0, [ip], -r5, lsl #4
 72c:	14032000 	strne	r2, [r3], #-0
 730:	67170501 	ldrvs	r0, [r7, -r1, lsl #10]
 734:	4b200d05 	blmi	803b50 <startup-0x1f7fc4b0>
 738:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 73c:	1505750b 	strne	r7, [r5, #-1291]	; 0xfffffaf5
 740:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 744:	05682805 	strbeq	r2, [r8, #-2053]!	; 0xfffff7fb
 748:	0d056717 	stceq	7, cr6, [r5, #-92]	; 0xffffffa4
 74c:	4b070520 	blmi	1c1bd4 <startup-0x1fe3e42c>
 750:	05c90b05 	strbeq	r0, [r9, #2821]	; 0xb05
 754:	01052015 	tsteq	r5, r5, lsl r0
 758:	682c053d 	stmdavs	ip!, {r0, r2, r3, r4, r5, r8, sl}
 75c:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 760:	ba100301 	blt	40136c <startup-0x1fbfec94>
 764:	72030d05 	andvc	r0, r3, #320	; 0x140
 768:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 76c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 770:	01053d22 	tsteq	r5, r2, lsr #26
 774:	4c1b0522 	cfldr32mi	mvfx0, [fp], {34}	; 0x22
 778:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 77c:	13053d0b 	movwne	r3, #23819	; 0x5d0b
 780:	2f050520 	svccs	0x00050520
 784:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 788:	01040200 	mrseq	r0, R12_usr
 78c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 790:	13053d01 	movwne	r3, #23809	; 0x5d01
 794:	01040200 	mrseq	r0, R12_usr
 798:	000b052f 	andeq	r0, fp, pc, lsr #10
 79c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 7a0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 7a4:	004b0104 	subeq	r0, fp, r4, lsl #2
 7a8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 7ac:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 7b0:	4c2f0104 	stfmis	f0, [pc], #-16	; 7a8 <startup-0x1ffff858>
 7b4:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 7b8:	01052013 	tsteq	r5, r3, lsl r0
 7bc:	ae2a052f 	cfsh64ge	mvdx0, mvdx10, #31
 7c0:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 7c4:	13053d0b 	movwne	r3, #23819	; 0x5d0b
 7c8:	2f050520 	svccs	0x00050520
 7cc:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 7d0:	052f2105 	streq	r2, [pc, #-261]!	; 6d3 <startup-0x1ffff92d>
 7d4:	0505200d 	streq	r2, [r5, #-13]
 7d8:	3d0b054b 	cfstr32cc	mvfx0, [fp, #-300]	; 0xfffffed4
 7dc:	2f201305 	svccs	0x00201305
 7e0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 7e4:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 7e8:	07053013 	smladeq	r5, r3, r0, r3
 7ec:	2109054a 	tstcs	r9, sl, asr #10
 7f0:	300c053d 	andcc	r0, ip, sp, lsr r5
 7f4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 7f8:	0b05ae37 	bleq	16c0dc <startup-0x1fe93f24>
 7fc:	20160591 	mulscs	r6, r1, r5
 800:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 804:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffffadd <__malloc_sbrk_start+0xdfffced9>
 808:	07053d13 	smladeq	r5, r3, sp, r3
 80c:	2109054a 	tstcs	r9, sl, asr #10
 810:	3013053d 	andscc	r0, r3, sp, lsr r5
 814:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 818:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 81c:	1605300b 	strne	r3, [r5], -fp
 820:	2f050520 	svccs	0x00050520
 824:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 828:	05764105 	ldrbeq	r4, [r6, #-261]!	; 0xfffffefb
 82c:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 830:	8301053d 	movwhi	r0, #5437	; 0x153d
 834:	054c3b05 	strbeq	r3, [ip, #-2821]	; 0xfffff4fb
 838:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 83c:	01053d3d 	tsteq	r5, sp, lsr sp
 840:	4c2f0583 	cfstr32mi	mvfx0, [pc], #-524	; 63c <startup-0x1ffff9c4>
 844:	59670c05 	stmdbpl	r7!, {r0, r2, sl, fp}^
 848:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 84c:	0f054c2c 	svceq	0x00054c2c
 850:	3c1305e7 	cfldr32cc	mvfx0, [r3], {231}	; 0xe7
 854:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
 858:	1a053d16 	bne	14fcb8 <startup-0x1feb0348>
 85c:	9010053c 	andsls	r0, r0, ip, lsr r5
 860:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 864:	14053d08 	strne	r3, [r5], #-3336	; 0xfffff2f8
 868:	4b0b054b 	blmi	2c1d9c <startup-0x1fd3e264>
 86c:	05681405 	strbeq	r1, [r8, #-1029]!	; 0xfffffbfb
 870:	05054b0a 	streq	r4, [r5, #-2826]	; 0xfffff4f6
 874:	1405bb5b 	strne	fp, [r5], #-2907	; 0xfffff4a5
 878:	910505c9 	smlabtls	r5, r9, r5, r0
 87c:	05ad0805 	streq	r0, [sp, #2053]!	; 0x805
 880:	16054b0e 	strne	r4, [r5], -lr, lsl #22
 884:	ba0e0592 	blt	381ed4 <startup-0x1fc7e12c>
 888:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 88c:	21059f01 	tstcs	r5, r1, lsl #30
 890:	3d120576 	cfldr32cc	mvfx0, [r2, #-472]	; 0xfffffe28
 894:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 898:	059f2109 	ldreq	r2, [pc, #265]	; 9a9 <startup-0x1ffff657>
 89c:	09054b16 	stmdbeq	r5, {r1, r2, r4, r8, r9, fp, lr}
 8a0:	000d053c 	andeq	r0, sp, ip, lsr r5
 8a4:	21030402 	tstcs	r3, r2, lsl #8
 8a8:	02002c05 	andeq	r2, r0, #1280	; 0x500
 8ac:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 8b0:	04020009 	streq	r0, [r2], #-9
 8b4:	2a055801 	bcs	1568c0 <startup-0x1fea9740>
 8b8:	02040200 	andeq	r0, r4, #0, 4
 8bc:	00050547 	andeq	r0, r5, r7, asr #10
 8c0:	58010402 	stmdapl	r1, {r1, sl}
 8c4:	05510105 	ldrbeq	r0, [r1, #-261]	; 0xfffffefb
 8c8:	05055b19 	streq	r5, [r5, #-2841]	; 0xfffff4e7
 8cc:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 8d0:	4c4b3f3d 	mcrrmi	15, 3, r3, fp, cr13
 8d4:	054c4c4c 	strbeq	r4, [ip, #-3148]	; 0xfffff3b4
 8d8:	03023d01 	movweq	r3, #11521	; 0x2d01
 8dc:	Address 0x00000000000008dc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f52444f 	svcpl	0x0052444f
   4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
   8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
   c:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 14 <startup-0x1fffffec>
  10:	006e6d75 	rsbeq	r6, lr, r5, ror sp
  14:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  18:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  1c:	5f657469 	svcpl	0x00657469
  20:	5f646d63 	svcpl	0x00646d63
  24:	616c6564 	cmnvs	ip, r4, ror #10
  28:	68730079 	ldmdavs	r3!, {r0, r3, r4, r5, r6}^
  2c:	2074726f 	rsbscs	r7, r4, pc, ror #4
  30:	00746e69 	rsbseq	r6, r4, r9, ror #28
  34:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  38:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
  3c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  40:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  44:	6f007465 	svcvs	0x00007465
  48:	6c5f7264 	lfmvs	f7, 2, [pc], {100}	; 0x64
  4c:	5f00776f 	svcpl	0x0000776f
  50:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  54:	5f323374 	svcpl	0x00323374
  58:	5f5f0074 	svcpl	0x005f0074
  5c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  60:	745f3631 	ldrbvc	r3, [pc], #-1585	; 68 <startup-0x1fffff98>
  64:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
  68:	00726570 	rsbseq	r6, r2, r0, ror r5
  6c:	5f726469 	svcpl	0x00726469
  70:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
  74:	63736100 	cmnvs	r3, #0, 2
  78:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
  7c:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  80:	44490079 	strbmi	r0, [r9], #-121	; 0xffffff87
  84:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
  88:	56524553 			; <UNDEFINED> instruction: 0x56524553
  8c:	47004445 	strmi	r4, [r0, -r5, asr #8]
  90:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  94:	39203731 	stmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  98:	302e312e 	eorcc	r3, lr, lr, lsr #2
  9c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  a0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  a4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  ac:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  b0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  b4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  bc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	00304f2d 	eorseq	r4, r0, sp, lsr #30
  cc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  d0:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
  d4:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
  d8:	736f0074 	cmnvc	pc, #116	; 0x74
  dc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  e0:	6f6d0072 	svcvs	0x006d0072
  e4:	00726564 	rsbseq	r6, r2, r4, ror #10
  e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  ec:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
  f0:	5f007469 	svcpl	0x00007469
  f4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  f8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 100 <startup-0x1fffff00>
  fc:	64757000 	ldrbtvs	r7, [r5], #-0
 100:	2f007270 	svccs	0x00007270
 104:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 108:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 10c:	6f442f65 	svcvs	0x00442f65
 110:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 114:	2f73746e 	svccs	0x0073746e
 118:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 11c:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 120:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 124:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 128:	6c2f3562 	cfstr32vs	mvfx3, [pc], #-392	; ffffffa8 <__malloc_sbrk_start+0xdfffd3a4>
 12c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 130:	616e732f 	cmnvs	lr, pc, lsr #6
 134:	412f656b 			; <UNDEFINED> instruction: 0x412f656b
 138:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 13c:	6100632e 	tstvs	r0, lr, lsr #6
 140:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 144:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 148:	645f6574 	ldrbvs	r6, [pc], #-1396	; 150 <startup-0x1ffffeb0>
 14c:	5f617461 	svcpl	0x00617461
 150:	616c6564 	cmnvs	ip, r4, ror #10
 154:	73610079 	cmnvc	r1, #121	; 0x79
 158:	5f696963 	svcpl	0x00696963
 15c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 160:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 164:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 168:	63736100 	cmnvs	r3, #0, 2
 16c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 170:	5f6c7274 	svcpl	0x006c7274
 174:	5f746962 	svcpl	0x00746962
 178:	61656c63 	cmnvs	r5, r3, ror #24
 17c:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
 180:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 184:	63206465 			; <UNDEFINED> instruction: 0x63206465
 188:	00726168 	rsbseq	r6, r2, r8, ror #2
 18c:	5f726469 	svcpl	0x00726469
 190:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 194:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 198:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 19c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 1a0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1a4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1a8:	7300746e 	movwvc	r7, #1134	; 0x46e
 1ac:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 1b0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 1b4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 1b8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 1bc:	50470074 	subpl	r0, r7, r4, ror r0
 1c0:	2f004f49 	svccs	0x00004f49
 1c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 1c8:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 1cc:	6f442f65 	svcvs	0x00442f65
 1d0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 1d4:	2f73746e 	svccs	0x0073746e
 1d8:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 1dc:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 1e0:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 1e4:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 1e8:	6c2f3562 	cfstr32vs	mvfx3, [pc], #-392	; 68 <startup-0x1fffff98>
 1ec:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 1f0:	616e732f 	cmnvs	lr, pc, lsr #6
 1f4:	6100656b 	tstvs	r0, fp, ror #10
 1f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1fc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 200:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 204:	00726168 	rsbseq	r6, r2, r8, ror #2
 208:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 20c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 210:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 214:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 218:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 21c:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
 220:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 224:	63736100 	cmnvs	r3, #0, 2
 228:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 22c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 230:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 234:	79620061 	stmdbvc	r2!, {r0, r5, r6}^
 238:	6f006574 	svcvs	0x00006574
 23c:	685f7264 	ldmdavs	pc, {r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 240:	00686769 	rsbeq	r6, r8, r9, ror #14
 244:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 248:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 24c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 250:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 254:	73610073 	cmnvc	r1, #115	; 0x73
 258:	5f696963 	svcpl	0x00696963
 25c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 260:	6f635f65 	svcvs	0x00635f65
 264:	6f72746e 	svcvs	0x0072746e
 268:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 26c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 270:	7361006f 	cmnvc	r1, #111	; 0x6f
 274:	5f696963 	svcpl	0x00696963
 278:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 27c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 280:	544f0061 	strbpl	r0, [pc], #-97	; 288 <startup-0x1ffffd78>
 284:	5345525f 	movtpl	r5, #21087	; 0x525f
 288:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 28c:	73610044 	cmnvc	r1, #68	; 0x44
 290:	5f696963 	svcpl	0x00696963
 294:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 298:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 29c:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
 2a0:	2f656d6f 	svccs	0x00656d6f
 2a4:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 2a8:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 2ac:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2b0:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 2b4:	616c6f6b 	cmnvs	ip, fp, ror #30
 2b8:	4144452f 	cmpmi	r4, pc, lsr #10
 2bc:	2f323834 	svccs	0x00323834
 2c0:	6262616c 	rsbvs	r6, r2, #108, 2
 2c4:	616c2f35 	cmnvs	ip, r5, lsr pc
 2c8:	2f356262 	svccs	0x00356262
 2cc:	6b616e73 	blvs	185bca0 <startup-0x1e7a4360>
 2d0:	626e2f65 	rsbvs	r2, lr, #404	; 0x194
 2d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 2d8:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 2dc:	5f626e00 	svcpl	0x00626e00
 2e0:	616c6564 	cmnvs	ip, r4, ror #10
 2e4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2e8:	006f7263 	rsbeq	r7, pc, r3, ror #4
 2ec:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
 2f0:	5f323374 	svcpl	0x00323374
 2f4:	626e0074 	rsbvs	r0, lr, #116	; 0x74
 2f8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 2fc:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
 300:	0079616c 	rsbseq	r6, r9, ip, ror #2
 304:	696c6163 	stmdbvs	ip!, {r0, r1, r5, r6, r8, sp, lr}^
 308:	79730062 	ldmdbvc	r3!, {r1, r5, r6}^
 30c:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 310:	72695f6b 	rsbvc	r5, r9, #428	; 0x1ac
 314:	61685f71 	smcvs	34289	; 0x85f1
 318:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 31c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 320:	5f79616c 	svcpl	0x0079616c
 324:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 328:	74630074 	strbtvc	r0, [r3], #-116	; 0xffffff8c
 32c:	73006c72 	movwvc	r6, #3186	; 0xc72
 330:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 334:	665f6b63 	ldrbvs	r6, [pc], -r3, ror #22
 338:	0067616c 	rsbeq	r6, r7, ip, ror #2
 33c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 340:	5f626e00 	svcpl	0x00626e00
 344:	616c6564 	cmnvs	ip, r4, ror #10
 348:	425f0079 	subsmi	r0, pc, #121	; 0x79
 34c:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 350:	6f73645f 	svcvs	0x0073645f
 354:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 358:	00656c64 	rsbeq	r6, r5, r4, ror #24
 35c:	7a69735f 	bvc	1a5d0e0 <startup-0x1e5a2f20>
 360:	65680065 	strbvs	r0, [r8, #-101]!	; 0xffffff9b
 364:	745f7061 	ldrbvc	r7, [pc], #-97	; 36c <startup-0x1ffffc94>
 368:	2f00706f 	svccs	0x0000706f
 36c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 370:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 374:	6f442f65 	svcvs	0x00442f65
 378:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 37c:	2f73746e 	svccs	0x0073746e
 380:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 384:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 388:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 38c:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 390:	6c2f3562 	cfstr32vs	mvfx3, [pc], #-392	; 210 <startup-0x1ffffdf0>
 394:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 398:	616e732f 	cmnvs	lr, pc, lsr #6
 39c:	732f656b 			; <UNDEFINED> instruction: 0x732f656b
 3a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3a4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 3a8:	61725f00 	cmnvs	r2, r0, lsl #30
 3ac:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
 3b0:	6d655f00 	stclvs	15, cr5, [r5, #-0]
 3b4:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
 3b8:	0079636e 	rsbseq	r6, r9, lr, ror #6
 3bc:	7472635f 	ldrbtvc	r6, [r2], #-863	; 0xfffffca1
 3c0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 3c4:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 3c8:	6f747263 	svcvs	0x00747263
 3cc:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 3d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 3d4:	63775f00 	cmnvs	r7, #0, 30
 3d8:	6f747273 	svcvs	0x00747273
 3dc:	5f73626d 	svcpl	0x0073626d
 3e0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 3e4:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
 3e8:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
 3ec:	6e00657a 	cfrshl64vs	mvdx0, mvdx10, r6
 3f0:	6e5f7765 	cdpvs	7, 5, cr7, cr15, cr5, {3}
 3f4:	0065646f 	rsbeq	r6, r5, pc, ror #8
 3f8:	6f6c5f5f 	svcvs	0x006c5f5f
 3fc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 400:	7000745f 	andvc	r7, r0, pc, asr r4
 404:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 408:	6d5f0072 	ldclvs	0, cr0, [pc, #-456]	; 248 <startup-0x1ffffdb8>
 40c:	6f747262 	svcvs	0x00747262
 410:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 414:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 418:	63775f00 	cmnvs	r7, #0, 30
 41c:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 420:	6174735f 	cmnvs	r4, pc, asr r3
 424:	70006574 	andvc	r6, r0, r4, ror r5
 428:	5f766572 	svcpl	0x00766572
 42c:	70616568 	rsbvc	r6, r1, r8, ror #10
 430:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
 434:	656e7300 	strbvs	r7, [lr, #-768]!	; 0xfffffd00
 438:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 43c:	5f007469 	svcpl	0x00007469
 440:	66756275 			; <UNDEFINED> instruction: 0x66756275
 444:	61625f00 	cmnvs	r2, r0, lsl #30
 448:	5f006573 	svcpl	0x00006573
 44c:	5f6d745f 	svcpl	0x006d745f
 450:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
 454:	735f5f00 	cmpvc	pc, #0, 30
 458:	635f0066 	cmpvs	pc, #102	; 0x66
 45c:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 460:	5f5f0065 	svcpl	0x005f0065
 464:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 468:	4e530065 	cdpmi	0, 5, cr0, cr3, cr5, {3}
 46c:	6d5f4b45 	vldrvs	d20, [pc, #-276]	; 360 <startup-0x1ffffca0>
 470:	0065766f 	rsbeq	r7, r5, pc, ror #12
 474:	616c665f 	cmnvs	ip, pc, asr r6
 478:	5f007367 	svcpl	0x00007367
 47c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 480:	5f006178 	svcpl	0x00006178
 484:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 488:	625f006e 	subsvs	r0, pc, #110	; 0x6e
 48c:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 490:	5f00657a 	svcpl	0x0000657a
 494:	5f737973 	svcpl	0x00737973
 498:	6c727265 	lfmvs	f7, 2, [r2], #-404	; 0xfffffe6c
 49c:	00747369 	rsbseq	r7, r4, r9, ror #6
 4a0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 4a4:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 4a8:	66756274 			; <UNDEFINED> instruction: 0x66756274
 4ac:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 4b0:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 4b4:	626d5f00 	rsbvs	r5, sp, #0, 30
 4b8:	6f747273 	svcvs	0x00747273
 4bc:	5f736377 	svcpl	0x00736377
 4c0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 4c4:	4f500065 	svcmi	0x00500065
 4c8:	00544e49 	subseq	r4, r4, r9, asr #28
 4cc:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 4d0:	5f6e656c 	svcpl	0x006e656c
 4d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 4d8:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 4dc:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 4e0:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0xffffff8d
 4e4:	5f00666c 	svcpl	0x0000666c
 4e8:	00736e66 	rsbseq	r6, r3, r6, ror #28
 4ec:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 4f0:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
 4f4:	6b636f6c 	blvs	18dc2ac <startup-0x1e723d54>
 4f8:	5f00745f 	svcpl	0x0000745f
 4fc:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
 500:	5f007272 	svcpl	0x00007272
 504:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
 508:	5f00746e 	svcpl	0x0000746e
 50c:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 510:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
 514:	61676e67 	cmnvs	r7, r7, ror #28
 518:	725f006d 	subsvc	r0, pc, #109	; 0x6d
 51c:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 520:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 524:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 528:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 52c:	00626863 	rsbeq	r6, r2, r3, ror #16
 530:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 534:	0074756f 	rsbseq	r7, r4, pc, ror #10
 538:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 53c:	006e656c 	rsbeq	r6, lr, ip, ror #10
 540:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 544:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 548:	73626f69 	cmnvc	r2, #420	; 0x1a4
 54c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 550:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 554:	735f0030 	cmpvc	pc, #48	; 0x30
 558:	616e6769 	cmnvs	lr, r9, ror #14
 55c:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 560:	615f0066 	cmpvs	pc, r6, rrx
 564:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 568:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 56c:	5f006675 	svcpl	0x00006675
 570:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 574:	5f00746c 	svcpl	0x0000746c
 578:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 57c:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 580:	00745f74 	rsbseq	r5, r4, r4, ror pc
 584:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 588:	7061006b 	rsbvc	r0, r1, fp, rrx
 58c:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 590:	5f007469 	svcpl	0x00007469
 594:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 598:	53003273 	movwpl	r3, #627	; 0x273
 59c:	004b454e 	subeq	r4, fp, lr, asr #10
 5a0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 5a4:	6165795f 	cmnvs	r5, pc, asr r9
 5a8:	65680072 	strbvs	r0, [r8, #-114]!	; 0xffffff8e
 5ac:	6c5f7061 	mrrcvs	0, 6, r7, pc, cr1	; <UNPREDICTABLE>
 5b0:	5f00776f 	svcpl	0x0000776f
 5b4:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 5b8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 5bc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 5c0:	756f6420 	strbvc	r6, [pc, #-1056]!	; 1a8 <startup-0x1ffffe58>
 5c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
 5c8:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 5cc:	5f006674 	svcpl	0x00006674
 5d0:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
 5d4:	6174735f 	cmnvs	r4, pc, asr r3
 5d8:	5f5f7472 	svcpl	0x005f7472
 5dc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5e4 <startup-0x1ffffa1c>
 5e0:	6f6d5f6d 	svcvs	0x006d5f6d
 5e4:	7469006e 	strbtvc	r0, [r9], #-110	; 0xffffff92
 5e8:	5f007265 	svcpl	0x00007265
 5ec:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 5f0:	73007469 	movwvc	r7, #1129	; 0x469
 5f4:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
 5f8:	67726174 			; <UNDEFINED> instruction: 0x67726174
 5fc:	735f5f00 	cmpvc	pc, #0, 30
 600:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 604:	0074696e 	rsbseq	r6, r4, lr, ror #18
 608:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 60c:	6900745f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
 610:	61726574 	cmnvs	r2, r4, ror r5
 614:	00726f74 	rsbseq	r6, r2, r4, ror pc
 618:	6f6c6576 	svcvs	0x006c6576
 61c:	79746963 	ldmdbvc	r4!, {r0, r1, r5, r6, r8, fp, sp, lr}^
 620:	72665f00 	rsbvc	r5, r6, #0, 30
 624:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 628:	5f007473 	svcpl	0x00007473
 62c:	4b434f4c 	blmi	10d4364 <startup-0x1ef2bc9c>
 630:	4345525f 	movtmi	r5, #21087	; 0x525f
 634:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
 638:	545f4556 	ldrbpl	r4, [pc], #-1366	; 640 <startup-0x1ffff9c0>
 63c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 640:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
 644:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 648:	5f006f6e 	svcpl	0x00006f6e
 64c:	5f6d745f 	svcpl	0x006d745f
 650:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 654:	625f5f00 	subsvs	r5, pc, #0, 30
 658:	655f7373 	ldrbvs	r7, [pc, #-883]	; 2ed <startup-0x1ffffd13>
 65c:	5f5f646e 	svcpl	0x005f646e
 660:	735f5f00 	cmpvc	pc, #0, 30
 664:	00667562 	rsbeq	r7, r6, r2, ror #10
 668:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 66c:	5f5f0073 	svcpl	0x005f0073
 670:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 674:	626d5f00 	rsbvs	r5, sp, #0, 30
 678:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 67c:	00745f65 	rsbseq	r5, r4, r5, ror #30
 680:	45444f4e 	strbmi	r4, [r4, #-3918]	; 0xfffff0b2
 684:	735f5f00 	cmpvc	pc, #0, 30
 688:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 68c:	79735f00 	ldmdbvc	r3!, {r8, r9, sl, fp, ip, lr}^
 690:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
 694:	5f007272 	svcpl	0x00007272
 698:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 69c:	00657461 	rsbeq	r7, r5, r1, ror #8
 6a0:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 6a4:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
 6a8:	5f007478 	svcpl	0x00007478
 6ac:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 6b0:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 6b4:	00657461 	rsbeq	r7, r5, r1, ror #8
 6b8:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
 6bc:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 6c0:	6c5f0064 	mrrcvs	0, 6, r0, pc, cr4	; <UNPREDICTABLE>
 6c4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 6c8:	5f5f0065 	svcpl	0x005f0065
 6cc:	61656c63 	cmnvs	r5, r3, ror #24
 6d0:	0070756e 	rsbseq	r7, r0, lr, ror #10
 6d4:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
 6d8:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 6dc:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
 6e0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 6e4:	5f656c61 	svcpl	0x00656c61
 6e8:	6f666e69 	svcvs	0x00666e69
 6ec:	616d5f00 	cmnvs	sp, r0, lsl #30
 6f0:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 6f4:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 6f8:	00746e65 	rsbseq	r6, r4, r5, ror #28
 6fc:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 700:	5f5f0064 	svcpl	0x005f0064
 704:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 708:	735f0074 	cmpvc	pc, #116	; 0x74
 70c:	006b6565 	rsbeq	r6, fp, r5, ror #10
 710:	6f70665f 	svcvs	0x0070665f
 714:	00745f73 	rsbseq	r5, r4, r3, ror pc
 718:	5f6e6f5f 	svcpl	0x006e6f5f
 71c:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 720:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 724:	5f5f0073 	svcpl	0x005f0073
 728:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 560 <startup-0x1ffffaa0>
 72c:	70006e69 	andvc	r6, r0, r9, ror #28
 730:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 734:	61747300 	cmnvs	r4, r0, lsl #6
 738:	70757472 	rsbsvc	r7, r5, r2, ror r4
 73c:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
 740:	5f00746c 	svcpl	0x0000746c
 744:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
 748:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
 74c:	00747361 	rsbseq	r7, r4, r1, ror #6
 750:	61765f5f 	cmnvs	r6, pc, asr pc
 754:	0065756c 	rsbeq	r7, r5, ip, ror #10
 758:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
 75c:	73657079 	cmnvc	r5, #121	; 0x79
 760:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
 764:	5f5f0064 	svcpl	0x005f0064
 768:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
 76c:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
 770:	61647465 	cmnvs	r4, r5, ror #8
 774:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 208 <startup-0x1ffffdf8>
 778:	5f007272 	svcpl	0x00007272
 77c:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 780:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 784:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
 788:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
 78c:	6e730072 	mrcvs	0, 3, r0, cr3, cr2, {3}
 790:	5f006b65 	svcpl	0x00006b65
 794:	73756e75 	cmnvc	r5, #1872	; 0x750
 798:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
 79c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 7a0:	66756264 	ldrbtvs	r6, [r5], -r4, ror #4
 7a4:	62640031 	rsbvs	r0, r4, #49	; 0x31
 7a8:	00326675 	eorseq	r6, r2, r5, ror r6
 7ac:	66756264 	ldrbtvs	r6, [r5], -r4, ror #4
 7b0:	5f5f0033 	svcpl	0x005f0033
 7b4:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
 7b8:	5f006365 	svcpl	0x00006365
 7bc:	00736477 	rsbseq	r6, r3, r7, ror r4
 7c0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 7c4:	6164775f 	cmnvs	r4, pc, asr r7
 7c8:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
 7cc:	0065756c 	rsbeq	r7, r5, ip, ror #10
 7d0:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 7d4:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 7d8:	735f0066 	cmpvc	pc, #102	; 0x66
 7dc:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 7e0:	00636e75 	rsbeq	r6, r3, r5, ror lr
 7e4:	4b454e53 	blmi	1154138 <startup-0x1eeabec8>
 7e8:	6172645f 	cmnvs	r2, pc, asr r4
 7ec:	6e5f0077 	mrcvs	0, 2, r0, cr15, cr7, {3}
 7f0:	00667562 	rsbeq	r7, r6, r2, ror #10
 7f4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 7f8:	00646573 	rsbeq	r6, r4, r3, ror r5
 7fc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 800:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
 804:	5f007473 	svcpl	0x00007473
 808:	61636f6c 	cmnvs	r3, ip, ror #30
 80c:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
 810:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 814:	635f0066 	cmpvs	pc, #102	; 0x66
 818:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
 81c:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
 820:	6d5f0038 	ldclvs	0, cr0, [pc, #-224]	; 748 <startup-0x1ffff8b8>
 824:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 828:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 82c:	00657461 	rsbeq	r7, r5, r1, ror #8
 830:	7335705f 	teqvc	r5, #95	; 0x5f
 834:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 838:	5f5f006e 	svcpl	0x005f006e
 83c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 674 <startup-0x1ffff98c>
 840:	00796164 	rsbseq	r6, r9, r4, ror #2
 844:	72636e69 	rsbvc	r6, r3, #1680	; 0x690
 848:	62735f00 	rsbsvs	r5, r3, #0, 30
 84c:	70006b72 	andvc	r6, r0, r2, ror fp
 850:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 854:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 858:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 85c:	00706d65 	rsbseq	r6, r0, r5, ror #26
 860:	70617267 	rsbvc	r7, r1, r7, ror #4
 864:	5f636968 	svcpl	0x00636968
 868:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 86c:	6f682f00 	svcvs	0x00682f00
 870:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 6c4 <startup-0x1ffff93c>
 874:	2f65766f 	svccs	0x0065766f
 878:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 87c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 880:	6b732f73 	blvs	1ccc654 <startup-0x1e3339ac>
 884:	2f616c6f 	svccs	0x00616c6f
 888:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 88c:	6c2f3238 	sfmvs	f3, 4, [pc], #-224	; 7b4 <startup-0x1ffff84c>
 890:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 894:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 898:	732f3562 			; <UNDEFINED> instruction: 0x732f3562
 89c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 8a0:	6172472f 	cmnvs	r2, pc, lsr #14
 8a4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8a8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 8ac:	70617267 	rsbvc	r7, r1, r7, ror #4
 8b0:	5f636968 	svcpl	0x00636968
 8b4:	61656c63 	cmnvs	r5, r3, ror #24
 8b8:	63735f72 	cmnvs	r3, #456	; 0x1c8
 8bc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 8c0:	61726700 	cmnvs	r2, r0, lsl #14
 8c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8c8:	6165725f 	cmnvs	r5, pc, asr r2
 8cc:	72670064 	rsbvc	r0, r7, #100	; 0x64
 8d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8d4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 8d8:	5f657469 	svcpl	0x00657469
 8dc:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 8e0:	00646e61 	rsbeq	r6, r4, r1, ror #28
 8e4:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 8e8:	61726700 	cmnvs	r2, r0, lsl #14
 8ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8f0:	6165725f 	cmnvs	r5, pc, asr r2
 8f4:	61645f64 	cmnvs	r4, r4, ror #30
 8f8:	67006174 	smlsdxvs	r0, r4, r1, r6
 8fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 900:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 904:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 908:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 90c:	72670061 	rsbvc	r0, r7, #97	; 0x61
 910:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 914:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 918:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 91c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 920:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 924:	61726700 	cmnvs	r2, r0, lsl #14
 928:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 92c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 930:	67006574 	smlsdxvs	r0, r4, r5, r6
 934:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 938:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 93c:	5f6c7274 	svcpl	0x006c7274
 940:	5f746962 	svcpl	0x00746962
 944:	00746573 	rsbseq	r6, r4, r3, ror r5
 948:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 94c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 950:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 954:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 958:	72670072 	rsbvc	r0, r7, #114	; 0x72
 95c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 960:	61775f63 	cmnvs	r7, r3, ror #30
 964:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 968:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 96c:	73616d00 	cmnvc	r1, #0, 26
 970:	6572006b 	ldrbvs	r0, [r2, #-107]!	; 0xffffff95
 974:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 978:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 97c:	Address 0x000000000000097c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	; 0x200000
   8:	52206863 	eorpl	r6, r0, #6488064	; 0x630000
   c:	736f7065 	cmnvc	pc, #101	; 0x65
  10:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
  14:	39202979 	stmdbcc	r0!, {r0, r3, r4, r5, r6, r8, fp, sp}
  18:	302e312e 	eorcc	r3, lr, lr, lsr #2
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	4b367620 	blmi	d9d89c <startup-0x1f262764>
  18:	07090600 	streq	r0, [r9, -r0, lsl #12]
  1c:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  2c:	1e011a01 	vmlane.f32	s2, s2, s2
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000014 	andcs	r0, r0, r4, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000054 	andcs	r0, r0, r4, asr r0
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000009c 	mulcs	r0, ip, r0
  5c:	00000030 	andeq	r0, r0, r0, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000cc 	andcs	r0, r0, ip, asr #1
  7c:	00000034 	andeq	r0, r0, r4, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000100 	andcs	r0, r0, r0, lsl #2
  9c:	00000024 	andeq	r0, r0, r4, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000124 	andcs	r0, r0, r4, lsr #2
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	00000000 	andeq	r0, r0, r0
  d8:	2000014e 	andcs	r0, r0, lr, asr #2
  dc:	00000042 	andeq	r0, r0, r2, asr #32
  e0:	400c0e41 	andmi	r0, ip, r1, asr #28
  e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e8:	018e4002 	orreq	r4, lr, r2
  ec:	41180e41 	tstmi	r8, r1, asr #28
  f0:	0000070d 	andeq	r0, r0, sp, lsl #14
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	00000000 	andeq	r0, r0, r0
  fc:	20000190 	mulcs	r0, r0, r1
 100:	00000040 	andeq	r0, r0, r0, asr #32
 104:	400c0e41 	andmi	r0, ip, r1, asr #28
 108:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 10c:	018e4002 	orreq	r4, lr, r2
 110:	41180e41 	tstmi	r8, r1, asr #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 124:	00000040 	andeq	r0, r0, r0, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000210 	andcs	r0, r0, r0, lsl r2
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000250 	andcs	r0, r0, r0, asr r2
 164:	0000002e 	andeq	r0, r0, lr, lsr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000027e 	andcs	r0, r0, lr, ror r2
 180:	0000004e 	andeq	r0, r0, lr, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	200002cc 	andcs	r0, r0, ip, asr #5
 1a0:	00000020 	andeq	r0, r0, r0, lsr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	200002ec 	andcs	r0, r0, ip, ror #5
 1c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 1e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e4:	00000018 	andeq	r0, r0, r8, lsl r0
 1e8:	000001d4 	ldrdeq	r0, [r0], -r4
 1ec:	20000318 	andcs	r0, r0, r8, lsl r3
 1f0:	00000030 	andeq	r0, r0, r0, lsr r0
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 200:	00000018 	andeq	r0, r0, r8, lsl r0
 204:	000001d4 	ldrdeq	r0, [r0], -r4
 208:	20000348 	andcs	r0, r0, r8, asr #6
 20c:	00000030 	andeq	r0, r0, r0, lsr r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	000001d4 	ldrdeq	r0, [r0], -r4
 224:	20000378 	andcs	r0, r0, r8, ror r3
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000001d4 	ldrdeq	r0, [r0], -r4
 240:	2000039c 	mulcs	r0, ip, r3
 244:	00000020 	andeq	r0, r0, r0, lsr #32
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000000c 	andeq	r0, r0, ip
 25c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	7c020001 	stcvc	0, cr0, [r2], {1}
 264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 268:	0000000c 	andeq	r0, r0, ip
 26c:	00000258 	andeq	r0, r0, r8, asr r2
 270:	20000000 	andcs	r0, r0, r0
 274:	00000010 	andeq	r0, r0, r0, lsl r0
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000258 	andeq	r0, r0, r8, asr r2
 280:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	180e4101 	stmdane	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000258 	andeq	r0, r0, r8, asr r2
 2a0:	20000418 	andcs	r0, r0, r8, lsl r4
 2a4:	0000005c 	andeq	r0, r0, ip, asr r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	100e4101 	andne	r4, lr, r1, lsl #2
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000258 	andeq	r0, r0, r8, asr r2
 2c0:	20000474 	andcs	r0, r0, r4, ror r4
 2c4:	000000a0 	andeq	r0, r0, r0, lsr #1
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000258 	andeq	r0, r0, r8, asr r2
 2e0:	20000514 	andcs	r0, r0, r4, lsl r5
 2e4:	00000048 	andeq	r0, r0, r8, asr #32
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	00000258 	andeq	r0, r0, r8, asr r2
 300:	2000055c 	andcs	r0, r0, ip, asr r5
 304:	00000070 	andeq	r0, r0, r0, ror r0
 308:	400c0e41 	andmi	r0, ip, r1, asr #28
 30c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 310:	018e4002 	orreq	r4, lr, r2
 314:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 318:	0000070d 	andeq	r0, r0, sp, lsl #14
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	00000258 	andeq	r0, r0, r8, asr r2
 324:	200005cc 	andcs	r0, r0, ip, asr #11
 328:	00000028 	andeq	r0, r0, r8, lsr #32
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000258 	andeq	r0, r0, r8, asr r2
 340:	200005f4 	strdcs	r0, [r0], -r4
 344:	00000068 	andeq	r0, r0, r8, rrx
 348:	40080e41 	andmi	r0, r8, r1, asr #28
 34c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 350:	180e4101 	stmdane	lr, {r0, r8, lr}
 354:	00070d41 	andeq	r0, r7, r1, asr #26
 358:	0000000c 	andeq	r0, r0, ip
 35c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 360:	7c020001 	stcvc	0, cr0, [r2], {1}
 364:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	00000358 	andeq	r0, r0, r8, asr r3
 370:	2000065c 	andcs	r0, r0, ip, asr r6
 374:	00000044 	andeq	r0, r0, r4, asr #32
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	180e4101 	stmdane	lr, {r0, r8, lr}
 384:	00070d41 	andeq	r0, r7, r1, asr #26
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	00000358 	andeq	r0, r0, r8, asr r3
 390:	200006a0 	andcs	r0, r0, r0, lsr #13
 394:	00000044 	andeq	r0, r0, r4, asr #32
 398:	40080e41 	andmi	r0, r8, r1, asr #28
 39c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a4:	00070d41 	andeq	r0, r7, r1, asr #26
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ac:	00000358 	andeq	r0, r0, r8, asr r3
 3b0:	200006e4 	andcs	r0, r0, r4, ror #13
 3b4:	0000005a 	andeq	r0, r0, sl, asr r0
 3b8:	40080e41 	andmi	r0, r8, r1, asr #28
 3bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c0:	100e4101 	andne	r4, lr, r1, lsl #2
 3c4:	00070d41 	andeq	r0, r7, r1, asr #26
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	00000358 	andeq	r0, r0, r8, asr r3
 3d0:	2000073e 	andcs	r0, r0, lr, lsr r7
 3d4:	0000006e 	andeq	r0, r0, lr, rrx
 3d8:	40080e41 	andmi	r0, r8, r1, asr #28
 3dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e0:	100e4101 	andne	r4, lr, r1, lsl #2
 3e4:	00070d41 	andeq	r0, r7, r1, asr #26
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	00000358 	andeq	r0, r0, r8, asr r3
 3f0:	200007ac 	andcs	r0, r0, ip, lsr #15
 3f4:	00000090 	muleq	r0, r0, r0
 3f8:	40080e41 	andmi	r0, r8, r1, asr #28
 3fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 400:	180e4101 	stmdane	lr, {r0, r8, lr}
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	00000358 	andeq	r0, r0, r8, asr r3
 410:	2000083c 	andcs	r0, r0, ip, lsr r8
 414:	00000080 	andeq	r0, r0, r0, lsl #1
 418:	40080e41 	andmi	r0, r8, r1, asr #28
 41c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 420:	100e4101 	andne	r4, lr, r1, lsl #2
 424:	00070d41 	andeq	r0, r7, r1, asr #26
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	00000358 	andeq	r0, r0, r8, asr r3
 430:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 434:	00000040 	andeq	r0, r0, r0, asr #32
 438:	40080e41 	andmi	r0, r8, r1, asr #28
 43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 440:	100e4101 	andne	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	00000358 	andeq	r0, r0, r8, asr r3
 450:	200008fc 	strdcs	r0, [r0], -ip
 454:	00000046 	andeq	r0, r0, r6, asr #32
 458:	40080e41 	andmi	r0, r8, r1, asr #28
 45c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 460:	100e4101 	andne	r4, lr, r1, lsl #2
 464:	00070d41 	andeq	r0, r7, r1, asr #26
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000358 	andeq	r0, r0, r8, asr r3
 470:	20000942 	andcs	r0, r0, r2, asr #18
 474:	0000002a 	andeq	r0, r0, sl, lsr #32
 478:	40080e41 	andmi	r0, r8, r1, asr #28
 47c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 480:	100e4101 	andne	r4, lr, r1, lsl #2
 484:	00070d41 	andeq	r0, r7, r1, asr #26
 488:	00000024 	andeq	r0, r0, r4, lsr #32
 48c:	00000358 	andeq	r0, r0, r8, asr r3
 490:	2000096c 	andcs	r0, r0, ip, ror #18
 494:	00000138 	andeq	r0, r0, r8, lsr r1
 498:	40140e41 	andsmi	r0, r4, r1, asr #28
 49c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 4a0:	03864004 	orreq	r4, r6, #4
 4a4:	40028740 	andmi	r8, r2, r0, asr #14
 4a8:	0e41018e 	dvfeqd	f0, f1, #0.5
 4ac:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	00000358 	andeq	r0, r0, r8, asr r3
 4b8:	20000aa4 	andcs	r0, r0, r4, lsr #21
 4bc:	00000068 	andeq	r0, r0, r8, rrx
 4c0:	40080e41 	andmi	r0, r8, r1, asr #28
 4c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c8:	100e4101 	andne	r4, lr, r1, lsl #2
 4cc:	00070d41 	andeq	r0, r7, r1, asr #26
 4d0:	00000018 	andeq	r0, r0, r8, lsl r0
 4d4:	00000358 	andeq	r0, r0, r8, asr r3
 4d8:	20000b0c 	andcs	r0, r0, ip, lsl #22
 4dc:	00000056 	andeq	r0, r0, r6, asr r0
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	0000000c 	andeq	r0, r0, ip
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	20000dd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 508:	00000010 	andeq	r0, r0, r0, lsl r0
 50c:	0000000c 	andeq	r0, r0, ip
 510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 514:	7c020001 	stcvc	0, cr0, [r2], {1}
 518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	0000050c 	andeq	r0, r0, ip, lsl #10
 524:	20000de0 	andcs	r0, r0, r0, ror #27
 528:	00000020 	andeq	r0, r0, r0, lsr #32
 52c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 530:	4a018e02 	bmi	63d40 <startup-0x1ff9c2c0>
 534:	000ec4ce 	andeq	ip, lr, lr, asr #9
 538:	00000018 	andeq	r0, r0, r8, lsl r0
 53c:	0000050c 	andeq	r0, r0, ip, lsl #10
 540:	20000e00 	andcs	r0, r0, r0, lsl #28
 544:	00000020 	andeq	r0, r0, r0, lsr #32
 548:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 54c:	4a018e02 	bmi	63d5c <startup-0x1ff9c2a4>
 550:	000ec4ce 	andeq	ip, lr, lr, asr #9
 554:	0000000c 	andeq	r0, r0, ip
 558:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 55c:	7c020001 	stcvc	0, cr0, [r2], {1}
 560:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 564:	00000024 	andeq	r0, r0, r4, lsr #32
 568:	00000554 	andeq	r0, r0, r4, asr r5
 56c:	20000e20 	andcs	r0, r0, r0, lsr #28
 570:	00000118 	andeq	r0, r0, r8, lsl r1
 574:	84100e48 	ldrhi	r0, [r0], #-3656	; 0xfffff1b8
 578:	86038504 	strhi	r8, [r3], -r4, lsl #10
 57c:	74018e02 	strvc	r8, [r1], #-3586	; 0xfffff1fe
 580:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
 584:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
 588:	0000000b 	andeq	r0, r0, fp
 58c:	0000000c 	andeq	r0, r0, ip
 590:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 594:	7c020001 	stcvc	0, cr0, [r2], {1}
 598:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 59c:	00000028 	andeq	r0, r0, r8, lsr #32
 5a0:	0000058c 	andeq	r0, r0, ip, lsl #11
 5a4:	20000f38 	andcs	r0, r0, r8, lsr pc
 5a8:	00000134 	andeq	r0, r0, r4, lsr r1
 5ac:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
 5b0:	86058506 	strhi	r8, [r5], -r6, lsl #10
 5b4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 5b8:	02018e02 	andeq	r8, r1, #2, 28
 5bc:	c8ce0a4e 	stmiagt	lr, {r1, r2, r3, r6, r9, fp}^
 5c0:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
 5c4:	0b42000e 	bleq	1080604 <startup-0x1ef7f9fc>
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 5d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5d8:	00000020 	andeq	r0, r0, r0, lsr #32
 5dc:	000005c8 	andeq	r0, r0, r8, asr #11
 5e0:	2000106c 	andcs	r1, r0, ip, rrx
 5e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 5e8:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xfffff1bc
 5ec:	86038504 	strhi	r8, [r3], -r4, lsl #10
 5f0:	56018e02 	strpl	r8, [r1], -r2, lsl #28
 5f4:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
 5f8:	0000000e 	andeq	r0, r0, lr
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 604:	7c020001 	stcvc	0, cr0, [r2], {1}
 608:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 60c:	0000000c 	andeq	r0, r0, ip
 610:	000005fc 	strdeq	r0, [r0], -ip
 614:	200010a8 	andcs	r1, r0, r8, lsr #1
 618:	00000004 	andeq	r0, r0, r4
 61c:	0000000c 	andeq	r0, r0, ip
 620:	000005fc 	strdeq	r0, [r0], -ip
 624:	200010ac 	andcs	r1, r0, ip, lsr #1
 628:	00000004 	andeq	r0, r0, r4
 62c:	0000000c 	andeq	r0, r0, ip
 630:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 634:	7c020001 	stcvc	0, cr0, [r2], {1}
 638:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 63c:	00000020 	andeq	r0, r0, r0, lsr #32
 640:	0000062c 	andeq	r0, r0, ip, lsr #12
 644:	200010b0 	strhcs	r1, [r0], -r0
 648:	0000002c 	andeq	r0, r0, ip, lsr #32
 64c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 650:	86038504 	strhi	r8, [r3], -r4, lsl #10
 654:	52018e02 	andpl	r8, r1, #2, 28
 658:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
 65c:	0000000e 	andeq	r0, r0, lr
 660:	0000002c 	andeq	r0, r0, ip, lsr #32
 664:	0000062c 	andeq	r0, r0, ip, lsr #12
 668:	200010dc 	ldrdcs	r1, [r0], -ip
 66c:	00000148 	andeq	r0, r0, r8, asr #2
 670:	84100e4e 	ldrhi	r0, [r0], #-3662	; 0xfffff1b2
 674:	86038504 	strhi	r8, [r3], -r4, lsl #10
 678:	02018e02 	andeq	r8, r1, #2, 28
 67c:	c6ce0a6e 	strbgt	r0, [lr], lr, ror #20
 680:	000ec4c5 	andeq	ip, lr, r5, asr #9
 684:	ce620b42 	vnmulgt.f64	d16, d2, d2
 688:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 68c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
   4:	2000065c 	andcs	r0, r0, ip, asr r6
   8:	20000000 	andcs	r0, r0, r0
   c:	20000010 	andcs	r0, r0, r0, lsl r0
	...
