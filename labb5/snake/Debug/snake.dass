
./Debug/snake.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbd2 	bl	200007ac <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <seedRng>:
#include "PellesSuperRng.h"

// typedef rngword_t uint32_t;

void seedRng(rngword_t* state, uint32_t s)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
    *state = s;
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	683a      	ldr	r2, [r7, #0]
2000001e:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 10; i++) {
20000020:	2300      	movs	r3, #0
20000022:	60fb      	str	r3, [r7, #12]
20000024:	e006      	b.n	20000034 <seedRng+0x24>
	nextRnd(state);
20000026:	687b      	ldr	r3, [r7, #4]
20000028:	0018      	movs	r0, r3
2000002a:	f000 f80a 	bl	20000042 <nextRnd>
    for(int i = 0; i < 10; i++) {
2000002e:	68fb      	ldr	r3, [r7, #12]
20000030:	3301      	adds	r3, #1
20000032:	60fb      	str	r3, [r7, #12]
20000034:	68fb      	ldr	r3, [r7, #12]
20000036:	2b09      	cmp	r3, #9
20000038:	ddf5      	ble.n	20000026 <seedRng+0x16>
    }
}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	46bd      	mov	sp, r7
2000003e:	b004      	add	sp, #16
20000040:	bd80      	pop	{r7, pc}

20000042 <nextRnd>:

uint32_t nextRnd(rngword_t* state)
{
20000042:	b580      	push	{r7, lr}
20000044:	b084      	sub	sp, #16
20000046:	af00      	add	r7, sp, #0
20000048:	6078      	str	r0, [r7, #4]
    *state = 0x23456789 * *state + 1;
2000004a:	687b      	ldr	r3, [r7, #4]
2000004c:	681b      	ldr	r3, [r3, #0]
2000004e:	4a19      	ldr	r2, [pc, #100]	; (200000b4 <nextRnd+0x72>)
20000050:	4353      	muls	r3, r2
20000052:	1c5a      	adds	r2, r3, #1
20000054:	687b      	ldr	r3, [r7, #4]
20000056:	601a      	str	r2, [r3, #0]
    rngword_t x = *state;
20000058:	687b      	ldr	r3, [r7, #4]
2000005a:	681b      	ldr	r3, [r3, #0]
2000005c:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < 3; i++) {
2000005e:	2300      	movs	r3, #0
20000060:	60bb      	str	r3, [r7, #8]
20000062:	e01e      	b.n	200000a2 <nextRnd+0x60>
	x *= 0x87654321;
20000064:	68fa      	ldr	r2, [r7, #12]
20000066:	0013      	movs	r3, r2
20000068:	011b      	lsls	r3, r3, #4
2000006a:	189b      	adds	r3, r3, r2
2000006c:	011b      	lsls	r3, r3, #4
2000006e:	189b      	adds	r3, r3, r2
20000070:	011b      	lsls	r3, r3, #4
20000072:	1a9b      	subs	r3, r3, r2
20000074:	009b      	lsls	r3, r3, #2
20000076:	1a9b      	subs	r3, r3, r2
20000078:	011b      	lsls	r3, r3, #4
2000007a:	189b      	adds	r3, r3, r2
2000007c:	005b      	lsls	r3, r3, #1
2000007e:	189b      	adds	r3, r3, r2
20000080:	015b      	lsls	r3, r3, #5
20000082:	1a9b      	subs	r3, r3, r2
20000084:	01da      	lsls	r2, r3, #7
20000086:	1ad3      	subs	r3, r2, r3
20000088:	60fb      	str	r3, [r7, #12]
	x ^= x >> 17;
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	0c5b      	lsrs	r3, r3, #17
2000008e:	68fa      	ldr	r2, [r7, #12]
20000090:	4053      	eors	r3, r2
20000092:	60fb      	str	r3, [r7, #12]
	x += i;
20000094:	68bb      	ldr	r3, [r7, #8]
20000096:	68fa      	ldr	r2, [r7, #12]
20000098:	18d3      	adds	r3, r2, r3
2000009a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < 3; i++) {
2000009c:	68bb      	ldr	r3, [r7, #8]
2000009e:	3301      	adds	r3, #1
200000a0:	60bb      	str	r3, [r7, #8]
200000a2:	68bb      	ldr	r3, [r7, #8]
200000a4:	2b02      	cmp	r3, #2
200000a6:	dddd      	ble.n	20000064 <nextRnd+0x22>
    }
    return x;
200000a8:	68fb      	ldr	r3, [r7, #12]
}
200000aa:	0018      	movs	r0, r3
200000ac:	46bd      	mov	sp, r7
200000ae:	b004      	add	sp, #16
200000b0:	bd80      	pop	{r7, pc}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	23456789 	movtcs	r6, #22409	; 0x5789

200000b8 <init_keypad>:
#include <libGPIO.h>
#include "keypad.h"

// init moder, pudpr, and otyper for keypad in a port. If not high, uses low
void init_keypad(volatile GPIO* port) {
200000b8:	b590      	push	{r4, r7, lr}
200000ba:	b08b      	sub	sp, #44	; 0x2c
200000bc:	af00      	add	r7, sp, #0
200000be:	6078      	str	r0, [r7, #4]
    uint32_t moder_mask, pudpr_mask, moder_set, pudpr_set;
    uint16_t otyper_mask, otyper_set;
	moder_mask = 0x0000FFFF;
200000c0:	4b1d      	ldr	r3, [pc, #116]	; (20000138 <init_keypad+0x80>)
200000c2:	627b      	str	r3, [r7, #36]	; 0x24
	moder_set  = 0x55000000;
200000c4:	23aa      	movs	r3, #170	; 0xaa
200000c6:	05db      	lsls	r3, r3, #23
200000c8:	623b      	str	r3, [r7, #32]
	otyper_mask = 0x00FF;
200000ca:	211e      	movs	r1, #30
200000cc:	187b      	adds	r3, r7, r1
200000ce:	22ff      	movs	r2, #255	; 0xff
200000d0:	801a      	strh	r2, [r3, #0]
	otyper_set  = 0x0F00;
200000d2:	201c      	movs	r0, #28
200000d4:	183b      	adds	r3, r7, r0
200000d6:	22f0      	movs	r2, #240	; 0xf0
200000d8:	0112      	lsls	r2, r2, #4
200000da:	801a      	strh	r2, [r3, #0]
	pudpr_mask = 0x0000FFFF;
200000dc:	4b16      	ldr	r3, [pc, #88]	; (20000138 <init_keypad+0x80>)
200000de:	61bb      	str	r3, [r7, #24]
	pudpr_set  = 0x00AA0000;
200000e0:	23aa      	movs	r3, #170	; 0xaa
200000e2:	041b      	lsls	r3, r3, #16
200000e4:	617b      	str	r3, [r7, #20]
    
    uint32_t moder = port->moder;
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	681b      	ldr	r3, [r3, #0]
200000ea:	613b      	str	r3, [r7, #16]
    port->moder = (moder & moder_mask) | moder_set; // b31-b24 = 01010101, b23-b16 = 00000000, keep the rest
200000ec:	693b      	ldr	r3, [r7, #16]
200000ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200000f0:	401a      	ands	r2, r3
200000f2:	6a3b      	ldr	r3, [r7, #32]
200000f4:	431a      	orrs	r2, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	601a      	str	r2, [r3, #0]
    uint16_t otyper = port->otyper;
200000fa:	240e      	movs	r4, #14
200000fc:	193b      	adds	r3, r7, r4
200000fe:	687a      	ldr	r2, [r7, #4]
20000100:	8892      	ldrh	r2, [r2, #4]
20000102:	801a      	strh	r2, [r3, #0]
    port->otyper = (otyper & otyper_mask) | otyper_set; // b15-b12 = 0000, b11-b8 = 1111, keep the rest
20000104:	193b      	adds	r3, r7, r4
20000106:	187a      	adds	r2, r7, r1
20000108:	881b      	ldrh	r3, [r3, #0]
2000010a:	8812      	ldrh	r2, [r2, #0]
2000010c:	4013      	ands	r3, r2
2000010e:	b29a      	uxth	r2, r3
20000110:	183b      	adds	r3, r7, r0
20000112:	881b      	ldrh	r3, [r3, #0]
20000114:	4313      	orrs	r3, r2
20000116:	b29a      	uxth	r2, r3
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	809a      	strh	r2, [r3, #4]
    uint32_t pudpr = port->pudpr;
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	68db      	ldr	r3, [r3, #12]
20000120:	60bb      	str	r3, [r7, #8]
    port->pudpr = (pudpr & pudpr_mask) | pudpr_set;
20000122:	68bb      	ldr	r3, [r7, #8]
20000124:	69ba      	ldr	r2, [r7, #24]
20000126:	401a      	ands	r2, r3
20000128:	697b      	ldr	r3, [r7, #20]
2000012a:	431a      	orrs	r2, r3
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	60da      	str	r2, [r3, #12]
}
20000130:	46c0      	nop			; (mov r8, r8)
20000132:	46bd      	mov	sp, r7
20000134:	b00b      	add	sp, #44	; 0x2c
20000136:	bd90      	pop	{r4, r7, pc}
20000138:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

2000013c <kactivate_row>:

void kactivate_row(volatile GPIO* port, int8_t row_num) {
2000013c:	b580      	push	{r7, lr}
2000013e:	b082      	sub	sp, #8
20000140:	af00      	add	r7, sp, #0
20000142:	6078      	str	r0, [r7, #4]
20000144:	000a      	movs	r2, r1
20000146:	1cfb      	adds	r3, r7, #3
20000148:	701a      	strb	r2, [r3, #0]
	port->odr_high = (8<<row_num);
2000014a:	1cfb      	adds	r3, r7, #3
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	b25b      	sxtb	r3, r3
20000150:	2208      	movs	r2, #8
20000152:	409a      	lsls	r2, r3
20000154:	0013      	movs	r3, r2
20000156:	b2da      	uxtb	r2, r3
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	755a      	strb	r2, [r3, #21]
}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46bd      	mov	sp, r7
20000160:	b002      	add	sp, #8
20000162:	bd80      	pop	{r7, pc}

20000164 <kread_column>:

int8_t kread_column(volatile GPIO* port) {
20000164:	b580      	push	{r7, lr}
20000166:	b084      	sub	sp, #16
20000168:	af00      	add	r7, sp, #0
2000016a:	6078      	str	r0, [r7, #4]
    uint8_t idr;
	idr = port->idr_high & 0x0F;
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	7c5b      	ldrb	r3, [r3, #17]
20000170:	b2da      	uxtb	r2, r3
20000172:	230f      	movs	r3, #15
20000174:	18fb      	adds	r3, r7, r3
20000176:	210f      	movs	r1, #15
20000178:	400a      	ands	r2, r1
2000017a:	701a      	strb	r2, [r3, #0]
    int8_t col = 0;
2000017c:	230e      	movs	r3, #14
2000017e:	18fb      	adds	r3, r7, r3
20000180:	2200      	movs	r2, #0
20000182:	701a      	strb	r2, [r3, #0]
    while (idr) {
20000184:	e00e      	b.n	200001a4 <kread_column+0x40>
        col++;
20000186:	210e      	movs	r1, #14
20000188:	187b      	adds	r3, r7, r1
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	b25b      	sxtb	r3, r3
2000018e:	b2db      	uxtb	r3, r3
20000190:	3301      	adds	r3, #1
20000192:	b2da      	uxtb	r2, r3
20000194:	187b      	adds	r3, r7, r1
20000196:	701a      	strb	r2, [r3, #0]
        idr = idr >> 1;
20000198:	220f      	movs	r2, #15
2000019a:	18bb      	adds	r3, r7, r2
2000019c:	18ba      	adds	r2, r7, r2
2000019e:	7812      	ldrb	r2, [r2, #0]
200001a0:	0852      	lsrs	r2, r2, #1
200001a2:	701a      	strb	r2, [r3, #0]
    while (idr) {
200001a4:	230f      	movs	r3, #15
200001a6:	18fb      	adds	r3, r7, r3
200001a8:	781b      	ldrb	r3, [r3, #0]
200001aa:	2b00      	cmp	r3, #0
200001ac:	d1eb      	bne.n	20000186 <kread_column+0x22>
    }
    return col;
200001ae:	230e      	movs	r3, #14
200001b0:	18fb      	adds	r3, r7, r3
200001b2:	781b      	ldrb	r3, [r3, #0]
200001b4:	b25b      	sxtb	r3, r3
}
200001b6:	0018      	movs	r0, r3
200001b8:	46bd      	mov	sp, r7
200001ba:	b004      	add	sp, #16
200001bc:	bd80      	pop	{r7, pc}

200001be <kkey_value>:

int8_t kkey_value(int8_t row, int8_t col) {
200001be:	b590      	push	{r4, r7, lr}
200001c0:	b087      	sub	sp, #28
200001c2:	af00      	add	r7, sp, #0
200001c4:	0002      	movs	r2, r0
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	701a      	strb	r2, [r3, #0]
200001ca:	1dbb      	adds	r3, r7, #6
200001cc:	1c0a      	adds	r2, r1, #0
200001ce:	701a      	strb	r2, [r3, #0]
    uint8_t keys[4][4] = {{1,2,3,10}
200001d0:	2308      	movs	r3, #8
200001d2:	18fb      	adds	r3, r7, r3
200001d4:	4a16      	ldr	r2, [pc, #88]	; (20000230 <kkey_value+0x72>)
200001d6:	ca13      	ldmia	r2!, {r0, r1, r4}
200001d8:	c313      	stmia	r3!, {r0, r1, r4}
200001da:	6812      	ldr	r2, [r2, #0]
200001dc:	601a      	str	r2, [r3, #0]
                        ,{4,5,6,11}
                        ,{7,8,9,12}
                        ,{14,0,15,13}
                        };
    if (row > 0 && row <= 4 && col > 0 && col <= 4) {
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	781b      	ldrb	r3, [r3, #0]
200001e2:	b25b      	sxtb	r3, r3
200001e4:	2b00      	cmp	r3, #0
200001e6:	dd1d      	ble.n	20000224 <kkey_value+0x66>
200001e8:	1dfb      	adds	r3, r7, #7
200001ea:	781b      	ldrb	r3, [r3, #0]
200001ec:	b25b      	sxtb	r3, r3
200001ee:	2b04      	cmp	r3, #4
200001f0:	dc18      	bgt.n	20000224 <kkey_value+0x66>
200001f2:	1dbb      	adds	r3, r7, #6
200001f4:	781b      	ldrb	r3, [r3, #0]
200001f6:	b25b      	sxtb	r3, r3
200001f8:	2b00      	cmp	r3, #0
200001fa:	dd13      	ble.n	20000224 <kkey_value+0x66>
200001fc:	1dbb      	adds	r3, r7, #6
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	b25b      	sxtb	r3, r3
20000202:	2b04      	cmp	r3, #4
20000204:	dc0e      	bgt.n	20000224 <kkey_value+0x66>
        return keys[row-1][col-1];
20000206:	1dfb      	adds	r3, r7, #7
20000208:	781b      	ldrb	r3, [r3, #0]
2000020a:	b25b      	sxtb	r3, r3
2000020c:	1e5a      	subs	r2, r3, #1
2000020e:	1dbb      	adds	r3, r7, #6
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	b25b      	sxtb	r3, r3
20000214:	3b01      	subs	r3, #1
20000216:	2108      	movs	r1, #8
20000218:	1879      	adds	r1, r7, r1
2000021a:	0092      	lsls	r2, r2, #2
2000021c:	188a      	adds	r2, r1, r2
2000021e:	5cd3      	ldrb	r3, [r2, r3]
20000220:	b25b      	sxtb	r3, r3
20000222:	e000      	b.n	20000226 <kkey_value+0x68>
    }else{
        return 0;
20000224:	2300      	movs	r3, #0
    }
}
20000226:	0018      	movs	r0, r3
20000228:	46bd      	mov	sp, r7
2000022a:	b007      	add	sp, #28
2000022c:	bd90      	pop	{r4, r7, pc}
2000022e:	46c0      	nop			; (mov r8, r8)
20000230:	200015c8 	andcs	r1, r0, r8, asr #11

20000234 <kread_keypad>:

uint8_t kread_keypad(volatile GPIO* port) {
20000234:	b5b0      	push	{r4, r5, r7, lr}
20000236:	b084      	sub	sp, #16
20000238:	af00      	add	r7, sp, #0
2000023a:	6078      	str	r0, [r7, #4]
    for (int8_t row = 1; row <= 4; row++) {
2000023c:	230f      	movs	r3, #15
2000023e:	18fb      	adds	r3, r7, r3
20000240:	2201      	movs	r2, #1
20000242:	701a      	strb	r2, [r3, #0]
20000244:	e02d      	b.n	200002a2 <kread_keypad+0x6e>
        kactivate_row(port, row);
20000246:	230f      	movs	r3, #15
20000248:	18fb      	adds	r3, r7, r3
2000024a:	2200      	movs	r2, #0
2000024c:	569a      	ldrsb	r2, [r3, r2]
2000024e:	687b      	ldr	r3, [r7, #4]
20000250:	0011      	movs	r1, r2
20000252:	0018      	movs	r0, r3
20000254:	f7ff ff72 	bl	2000013c <kactivate_row>
        int8_t column = kread_column(port);
20000258:	250e      	movs	r5, #14
2000025a:	197c      	adds	r4, r7, r5
2000025c:	687b      	ldr	r3, [r7, #4]
2000025e:	0018      	movs	r0, r3
20000260:	f7ff ff80 	bl	20000164 <kread_column>
20000264:	0003      	movs	r3, r0
20000266:	7023      	strb	r3, [r4, #0]
        if (column) {
20000268:	197b      	adds	r3, r7, r5
2000026a:	781b      	ldrb	r3, [r3, #0]
2000026c:	b25b      	sxtb	r3, r3
2000026e:	2b00      	cmp	r3, #0
20000270:	d00e      	beq.n	20000290 <kread_keypad+0x5c>
            return kkey_value(row, column);
20000272:	230e      	movs	r3, #14
20000274:	18fb      	adds	r3, r7, r3
20000276:	2200      	movs	r2, #0
20000278:	569a      	ldrsb	r2, [r3, r2]
2000027a:	230f      	movs	r3, #15
2000027c:	18fb      	adds	r3, r7, r3
2000027e:	781b      	ldrb	r3, [r3, #0]
20000280:	b25b      	sxtb	r3, r3
20000282:	0011      	movs	r1, r2
20000284:	0018      	movs	r0, r3
20000286:	f7ff ff9a 	bl	200001be <kkey_value>
2000028a:	0003      	movs	r3, r0
2000028c:	b2db      	uxtb	r3, r3
2000028e:	e00f      	b.n	200002b0 <kread_keypad+0x7c>
    for (int8_t row = 1; row <= 4; row++) {
20000290:	210f      	movs	r1, #15
20000292:	187b      	adds	r3, r7, r1
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	b25b      	sxtb	r3, r3
20000298:	b2db      	uxtb	r3, r3
2000029a:	3301      	adds	r3, #1
2000029c:	b2da      	uxtb	r2, r3
2000029e:	187b      	adds	r3, r7, r1
200002a0:	701a      	strb	r2, [r3, #0]
200002a2:	230f      	movs	r3, #15
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	781b      	ldrb	r3, [r3, #0]
200002a8:	b25b      	sxtb	r3, r3
200002aa:	2b04      	cmp	r3, #4
200002ac:	ddcb      	ble.n	20000246 <kread_keypad+0x12>
        }
    }
    return 16;
200002ae:	2310      	movs	r3, #16
200002b0:	0018      	movs	r0, r3
200002b2:	46bd      	mov	sp, r7
200002b4:	b004      	add	sp, #16
200002b6:	bdb0      	pop	{r4, r5, r7, pc}

200002b8 <buffer_push>:
	void (*turn_right)(struct snek*);
}SNEK;


// Circular buffer stuff
int buffer_push(circular_buffer* c, POINT data) {
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	6078      	str	r0, [r7, #4]
200002c0:	003b      	movs	r3, r7
200002c2:	8019      	strh	r1, [r3, #0]
    int next;

    next = c->top + 1;  // next is where top will point to after this write.
200002c4:	687b      	ldr	r3, [r7, #4]
200002c6:	685b      	ldr	r3, [r3, #4]
200002c8:	3301      	adds	r3, #1
200002ca:	60fb      	str	r3, [r7, #12]
    if (next >= c->maxlen) { // If next is too large, loop back to the beginning
200002cc:	687b      	ldr	r3, [r7, #4]
200002ce:	68db      	ldr	r3, [r3, #12]
200002d0:	68fa      	ldr	r2, [r7, #12]
200002d2:	429a      	cmp	r2, r3
200002d4:	db01      	blt.n	200002da <buffer_push+0x22>
		next = 0;
200002d6:	2300      	movs	r3, #0
200002d8:	60fb      	str	r3, [r7, #12]
	}

    if (next == c->bottom){  // if the top + 1 == bottom, circular buffer is full
200002da:	687b      	ldr	r3, [r7, #4]
200002dc:	689b      	ldr	r3, [r3, #8]
200002de:	68fa      	ldr	r2, [r7, #12]
200002e0:	429a      	cmp	r2, r3
200002e2:	d102      	bne.n	200002ea <buffer_push+0x32>
        return -1;
200002e4:	2301      	movs	r3, #1
200002e6:	425b      	negs	r3, r3
200002e8:	e015      	b.n	20000316 <buffer_push+0x5e>
	}

    c->buffer[c->top].x = data.x;  // Load data and then move
200002ea:	687b      	ldr	r3, [r7, #4]
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	687b      	ldr	r3, [r7, #4]
200002f0:	685b      	ldr	r3, [r3, #4]
200002f2:	005b      	lsls	r3, r3, #1
200002f4:	18d3      	adds	r3, r2, r3
200002f6:	003a      	movs	r2, r7
200002f8:	7812      	ldrb	r2, [r2, #0]
200002fa:	701a      	strb	r2, [r3, #0]
	c->buffer[c->top].y = data.y;  // Load data and then move
200002fc:	687b      	ldr	r3, [r7, #4]
200002fe:	681a      	ldr	r2, [r3, #0]
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	685b      	ldr	r3, [r3, #4]
20000304:	005b      	lsls	r3, r3, #1
20000306:	18d3      	adds	r3, r2, r3
20000308:	003a      	movs	r2, r7
2000030a:	7852      	ldrb	r2, [r2, #1]
2000030c:	705a      	strb	r2, [r3, #1]
    c->top = next;             // top to next data offset.
2000030e:	687b      	ldr	r3, [r7, #4]
20000310:	68fa      	ldr	r2, [r7, #12]
20000312:	605a      	str	r2, [r3, #4]
    return 0;  // return success to indicate successful push.
20000314:	2300      	movs	r3, #0
}
20000316:	0018      	movs	r0, r3
20000318:	46bd      	mov	sp, r7
2000031a:	b004      	add	sp, #16
2000031c:	bd80      	pop	{r7, pc}

2000031e <buffer_pop>:

int buffer_pop(circular_buffer *c, POINT* data) {
2000031e:	b580      	push	{r7, lr}
20000320:	b084      	sub	sp, #16
20000322:	af00      	add	r7, sp, #0
20000324:	6078      	str	r0, [r7, #4]
20000326:	6039      	str	r1, [r7, #0]
    int next;

    if (c->top == c->bottom){  // if the top == bottom, we don't have any data
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	685a      	ldr	r2, [r3, #4]
2000032c:	687b      	ldr	r3, [r7, #4]
2000032e:	689b      	ldr	r3, [r3, #8]
20000330:	429a      	cmp	r2, r3
20000332:	d102      	bne.n	2000033a <buffer_pop+0x1c>
        return -1;
20000334:	2301      	movs	r3, #1
20000336:	425b      	negs	r3, r3
20000338:	e020      	b.n	2000037c <buffer_pop+0x5e>
	}

    next = c->top - 1;  // next is where bottom will point to after this read.
2000033a:	687b      	ldr	r3, [r7, #4]
2000033c:	685b      	ldr	r3, [r3, #4]
2000033e:	3b01      	subs	r3, #1
20000340:	60fb      	str	r3, [r7, #12]
    if(next < 0) {
20000342:	68fb      	ldr	r3, [r7, #12]
20000344:	2b00      	cmp	r3, #0
20000346:	da03      	bge.n	20000350 <buffer_pop+0x32>
		next = c->maxlen - 1;
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	68db      	ldr	r3, [r3, #12]
2000034c:	3b01      	subs	r3, #1
2000034e:	60fb      	str	r3, [r7, #12]
	}
	c->top = next; // move
20000350:	687b      	ldr	r3, [r7, #4]
20000352:	68fa      	ldr	r2, [r7, #12]
20000354:	605a      	str	r2, [r3, #4]
    data->x=c->buffer[c->top].x;  // Read data
20000356:	687b      	ldr	r3, [r7, #4]
20000358:	681a      	ldr	r2, [r3, #0]
2000035a:	687b      	ldr	r3, [r7, #4]
2000035c:	685b      	ldr	r3, [r3, #4]
2000035e:	005b      	lsls	r3, r3, #1
20000360:	18d3      	adds	r3, r2, r3
20000362:	781a      	ldrb	r2, [r3, #0]
20000364:	683b      	ldr	r3, [r7, #0]
20000366:	701a      	strb	r2, [r3, #0]
	data->y=c->buffer[c->top].y; 
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	681a      	ldr	r2, [r3, #0]
2000036c:	687b      	ldr	r3, [r7, #4]
2000036e:	685b      	ldr	r3, [r3, #4]
20000370:	005b      	lsls	r3, r3, #1
20000372:	18d3      	adds	r3, r2, r3
20000374:	785a      	ldrb	r2, [r3, #1]
20000376:	683b      	ldr	r3, [r7, #0]
20000378:	705a      	strb	r2, [r3, #1]
    return 0;  // return success to indicate successful push.
2000037a:	2300      	movs	r3, #0
}
2000037c:	0018      	movs	r0, r3
2000037e:	46bd      	mov	sp, r7
20000380:	b004      	add	sp, #16
20000382:	bd80      	pop	{r7, pc}

20000384 <buffer_unshift>:

int buffer_unshift(circular_buffer* c, POINT data) {
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	6078      	str	r0, [r7, #4]
2000038c:	003b      	movs	r3, r7
2000038e:	8019      	strh	r1, [r3, #0]
	int next;

    next = c->bottom - 1;  // next is where bottom will point to after this write.
20000390:	687b      	ldr	r3, [r7, #4]
20000392:	689b      	ldr	r3, [r3, #8]
20000394:	3b01      	subs	r3, #1
20000396:	60fb      	str	r3, [r7, #12]
    if (next < 0){
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	2b00      	cmp	r3, #0
2000039c:	da03      	bge.n	200003a6 <buffer_unshift+0x22>
        next = c->maxlen-1;
2000039e:	687b      	ldr	r3, [r7, #4]
200003a0:	68db      	ldr	r3, [r3, #12]
200003a2:	3b01      	subs	r3, #1
200003a4:	60fb      	str	r3, [r7, #12]
	}

    if (next == c->top) { // if the bottom - 1 == top, circular buffer is full
200003a6:	687b      	ldr	r3, [r7, #4]
200003a8:	685b      	ldr	r3, [r3, #4]
200003aa:	68fa      	ldr	r2, [r7, #12]
200003ac:	429a      	cmp	r2, r3
200003ae:	d102      	bne.n	200003b6 <buffer_unshift+0x32>
        return -1;
200003b0:	2301      	movs	r3, #1
200003b2:	425b      	negs	r3, r3
200003b4:	e015      	b.n	200003e2 <buffer_unshift+0x5e>
	}

    c->buffer[c->bottom].x = data.x;  // Load data and then move
200003b6:	687b      	ldr	r3, [r7, #4]
200003b8:	681a      	ldr	r2, [r3, #0]
200003ba:	687b      	ldr	r3, [r7, #4]
200003bc:	689b      	ldr	r3, [r3, #8]
200003be:	005b      	lsls	r3, r3, #1
200003c0:	18d3      	adds	r3, r2, r3
200003c2:	003a      	movs	r2, r7
200003c4:	7812      	ldrb	r2, [r2, #0]
200003c6:	701a      	strb	r2, [r3, #0]
    c->buffer[c->bottom].y = data.y;
200003c8:	687b      	ldr	r3, [r7, #4]
200003ca:	681a      	ldr	r2, [r3, #0]
200003cc:	687b      	ldr	r3, [r7, #4]
200003ce:	689b      	ldr	r3, [r3, #8]
200003d0:	005b      	lsls	r3, r3, #1
200003d2:	18d3      	adds	r3, r2, r3
200003d4:	003a      	movs	r2, r7
200003d6:	7852      	ldrb	r2, [r2, #1]
200003d8:	705a      	strb	r2, [r3, #1]
	c->bottom = next;             // top to next data offset.
200003da:	687b      	ldr	r3, [r7, #4]
200003dc:	68fa      	ldr	r2, [r7, #12]
200003de:	609a      	str	r2, [r3, #8]
    return 0; 					 // return success to indicate successful push.
200003e0:	2300      	movs	r3, #0
}
200003e2:	0018      	movs	r0, r3
200003e4:	46bd      	mov	sp, r7
200003e6:	b004      	add	sp, #16
200003e8:	bd80      	pop	{r7, pc}

200003ea <buffer_shift>:


int buffer_shift(circular_buffer* c, POINT *data) {
200003ea:	b580      	push	{r7, lr}
200003ec:	b084      	sub	sp, #16
200003ee:	af00      	add	r7, sp, #0
200003f0:	6078      	str	r0, [r7, #4]
200003f2:	6039      	str	r1, [r7, #0]
    int next;

    if (c->top == c->bottom){  // if the top == bottom, we don't have any data
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	685a      	ldr	r2, [r3, #4]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	689b      	ldr	r3, [r3, #8]
200003fc:	429a      	cmp	r2, r3
200003fe:	d102      	bne.n	20000406 <buffer_shift+0x1c>
        return -1;
20000400:	2301      	movs	r3, #1
20000402:	425b      	negs	r3, r3
20000404:	e020      	b.n	20000448 <buffer_shift+0x5e>
	}

    next = c->bottom + 1;  // next is where bottom will point to after this read.
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	689b      	ldr	r3, [r3, #8]
2000040a:	3301      	adds	r3, #1
2000040c:	60fb      	str	r3, [r7, #12]
    if(next >= c->maxlen) {
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	68db      	ldr	r3, [r3, #12]
20000412:	68fa      	ldr	r2, [r7, #12]
20000414:	429a      	cmp	r2, r3
20000416:	db01      	blt.n	2000041c <buffer_shift+0x32>
		next = 0;
20000418:	2300      	movs	r3, #0
2000041a:	60fb      	str	r3, [r7, #12]
	}
		
	c->bottom = next; 
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	68fa      	ldr	r2, [r7, #12]
20000420:	609a      	str	r2, [r3, #8]
    data->x = c->buffer[c->bottom].x;  // Read data and then move
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	681a      	ldr	r2, [r3, #0]
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	689b      	ldr	r3, [r3, #8]
2000042a:	005b      	lsls	r3, r3, #1
2000042c:	18d3      	adds	r3, r2, r3
2000042e:	781a      	ldrb	r2, [r3, #0]
20000430:	683b      	ldr	r3, [r7, #0]
20000432:	701a      	strb	r2, [r3, #0]
	data->y = c->buffer[c->bottom].y;
20000434:	687b      	ldr	r3, [r7, #4]
20000436:	681a      	ldr	r2, [r3, #0]
20000438:	687b      	ldr	r3, [r7, #4]
2000043a:	689b      	ldr	r3, [r3, #8]
2000043c:	005b      	lsls	r3, r3, #1
2000043e:	18d3      	adds	r3, r2, r3
20000440:	785a      	ldrb	r2, [r3, #1]
20000442:	683b      	ldr	r3, [r7, #0]
20000444:	705a      	strb	r2, [r3, #1]
                 // bottom to next offset.
    return 0;  // return success to indicate successful push.
20000446:	2300      	movs	r3, #0
}
20000448:	0018      	movs	r0, r3
2000044a:	46bd      	mov	sp, r7
2000044c:	b004      	add	sp, #16
2000044e:	bd80      	pop	{r7, pc}

20000450 <gen_food>:
bool GAME_OVER = false;
rngword_t rngState;
POINT food;
uint8_t points;

void gen_food(rngword_t state) {
20000450:	b5b0      	push	{r4, r5, r7, lr}
20000452:	b084      	sub	sp, #16
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
	uint8_t x = nextRnd(&rngState);
20000458:	4b19      	ldr	r3, [pc, #100]	; (200004c0 <gen_food+0x70>)
2000045a:	0018      	movs	r0, r3
2000045c:	f7ff fdf1 	bl	20000042 <nextRnd>
20000460:	0002      	movs	r2, r0
20000462:	200f      	movs	r0, #15
20000464:	0004      	movs	r4, r0
20000466:	183b      	adds	r3, r7, r0
20000468:	701a      	strb	r2, [r3, #0]
	uint8_t y = nextRnd(&rngState);
2000046a:	4b15      	ldr	r3, [pc, #84]	; (200004c0 <gen_food+0x70>)
2000046c:	0018      	movs	r0, r3
2000046e:	f7ff fde8 	bl	20000042 <nextRnd>
20000472:	0002      	movs	r2, r0
20000474:	250e      	movs	r5, #14
20000476:	197b      	adds	r3, r7, r5
20000478:	701a      	strb	r2, [r3, #0]
	x %= 128;
2000047a:	0020      	movs	r0, r4
2000047c:	183b      	adds	r3, r7, r0
2000047e:	183a      	adds	r2, r7, r0
20000480:	7812      	ldrb	r2, [r2, #0]
20000482:	217f      	movs	r1, #127	; 0x7f
20000484:	400a      	ands	r2, r1
20000486:	701a      	strb	r2, [r3, #0]
	y %= 64;
20000488:	197b      	adds	r3, r7, r5
2000048a:	197a      	adds	r2, r7, r5
2000048c:	7812      	ldrb	r2, [r2, #0]
2000048e:	213f      	movs	r1, #63	; 0x3f
20000490:	400a      	ands	r2, r1
20000492:	701a      	strb	r2, [r3, #0]
	
	pixel(x, y, true);
20000494:	197b      	adds	r3, r7, r5
20000496:	7819      	ldrb	r1, [r3, #0]
20000498:	0004      	movs	r4, r0
2000049a:	183b      	adds	r3, r7, r0
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	2201      	movs	r2, #1
200004a0:	0018      	movs	r0, r3
200004a2:	f000 fd11 	bl	20000ec8 <pixel>
	food.x = x;
200004a6:	4b07      	ldr	r3, [pc, #28]	; (200004c4 <gen_food+0x74>)
200004a8:	0020      	movs	r0, r4
200004aa:	183a      	adds	r2, r7, r0
200004ac:	7812      	ldrb	r2, [r2, #0]
200004ae:	701a      	strb	r2, [r3, #0]
	food.y = y;
200004b0:	4b04      	ldr	r3, [pc, #16]	; (200004c4 <gen_food+0x74>)
200004b2:	197a      	adds	r2, r7, r5
200004b4:	7812      	ldrb	r2, [r2, #0]
200004b6:	705a      	strb	r2, [r3, #1]
}
200004b8:	46c0      	nop			; (mov r8, r8)
200004ba:	46bd      	mov	sp, r7
200004bc:	b004      	add	sp, #16
200004be:	bdb0      	pop	{r4, r5, r7, pc}
200004c0:	20001594 	mulcs	r0, r4, r5
200004c4:	20001528 	andcs	r1, r0, r8, lsr #10

200004c8 <SNEK_move>:

void SNEK_move(SNEK* self) {
200004c8:	b590      	push	{r4, r7, lr}
200004ca:	b087      	sub	sp, #28
200004cc:	af00      	add	r7, sp, #0
200004ce:	6078      	str	r0, [r7, #4]
    // Collision detection
	POINT next_head = self->head;
200004d0:	2110      	movs	r1, #16
200004d2:	0008      	movs	r0, r1
200004d4:	187b      	adds	r3, r7, r1
200004d6:	687a      	ldr	r2, [r7, #4]
200004d8:	2102      	movs	r1, #2
200004da:	5a52      	ldrh	r2, [r2, r1]
200004dc:	801a      	strh	r2, [r3, #0]
	next_head.x += self->velocity.x;
200004de:	0001      	movs	r1, r0
200004e0:	187b      	adds	r3, r7, r1
200004e2:	781a      	ldrb	r2, [r3, #0]
200004e4:	687b      	ldr	r3, [r7, #4]
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	b25b      	sxtb	r3, r3
200004ea:	b2db      	uxtb	r3, r3
200004ec:	18d3      	adds	r3, r2, r3
200004ee:	b2da      	uxtb	r2, r3
200004f0:	187b      	adds	r3, r7, r1
200004f2:	701a      	strb	r2, [r3, #0]
	next_head.y += self->velocity.y;
200004f4:	187b      	adds	r3, r7, r1
200004f6:	785a      	ldrb	r2, [r3, #1]
200004f8:	687b      	ldr	r3, [r7, #4]
200004fa:	785b      	ldrb	r3, [r3, #1]
200004fc:	b25b      	sxtb	r3, r3
200004fe:	b2db      	uxtb	r3, r3
20000500:	18d3      	adds	r3, r2, r3
20000502:	b2da      	uxtb	r2, r3
20000504:	187b      	adds	r3, r7, r1
20000506:	705a      	strb	r2, [r3, #1]
	if (next_head.x < 0 || next_head.x >= 128 || next_head.y < 0 || next_head.y >= 64) {
20000508:	187b      	adds	r3, r7, r1
2000050a:	781b      	ldrb	r3, [r3, #0]
2000050c:	b25b      	sxtb	r3, r3
2000050e:	2b00      	cmp	r3, #0
20000510:	db04      	blt.n	2000051c <SNEK_move+0x54>
20000512:	2310      	movs	r3, #16
20000514:	18fb      	adds	r3, r7, r3
20000516:	785b      	ldrb	r3, [r3, #1]
20000518:	2b3f      	cmp	r3, #63	; 0x3f
2000051a:	d903      	bls.n	20000524 <SNEK_move+0x5c>
		// We have collided
		GAME_OVER = true;
2000051c:	4b4d      	ldr	r3, [pc, #308]	; (20000654 <SNEK_move+0x18c>)
2000051e:	2201      	movs	r2, #1
20000520:	701a      	strb	r2, [r3, #0]
		return;
20000522:	e094      	b.n	2000064e <SNEK_move+0x186>
	}
	for (int i = self->tail->bottom; i != self->tail->top; i = (i + 1) % 50) {
20000524:	687b      	ldr	r3, [r7, #4]
20000526:	685b      	ldr	r3, [r3, #4]
20000528:	689b      	ldr	r3, [r3, #8]
2000052a:	617b      	str	r3, [r7, #20]
2000052c:	e023      	b.n	20000576 <SNEK_move+0xae>
		if (next_head.x == self->tail->buffer[i].x && next_head.y == self->tail->buffer[i].y) {
2000052e:	2310      	movs	r3, #16
20000530:	18fb      	adds	r3, r7, r3
20000532:	781a      	ldrb	r2, [r3, #0]
20000534:	687b      	ldr	r3, [r7, #4]
20000536:	685b      	ldr	r3, [r3, #4]
20000538:	6819      	ldr	r1, [r3, #0]
2000053a:	697b      	ldr	r3, [r7, #20]
2000053c:	005b      	lsls	r3, r3, #1
2000053e:	18cb      	adds	r3, r1, r3
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	429a      	cmp	r2, r3
20000544:	d10f      	bne.n	20000566 <SNEK_move+0x9e>
20000546:	2310      	movs	r3, #16
20000548:	18fb      	adds	r3, r7, r3
2000054a:	785a      	ldrb	r2, [r3, #1]
2000054c:	687b      	ldr	r3, [r7, #4]
2000054e:	685b      	ldr	r3, [r3, #4]
20000550:	6819      	ldr	r1, [r3, #0]
20000552:	697b      	ldr	r3, [r7, #20]
20000554:	005b      	lsls	r3, r3, #1
20000556:	18cb      	adds	r3, r1, r3
20000558:	785b      	ldrb	r3, [r3, #1]
2000055a:	429a      	cmp	r2, r3
2000055c:	d103      	bne.n	20000566 <SNEK_move+0x9e>
			GAME_OVER = true;
2000055e:	4b3d      	ldr	r3, [pc, #244]	; (20000654 <SNEK_move+0x18c>)
20000560:	2201      	movs	r2, #1
20000562:	701a      	strb	r2, [r3, #0]
			return;
20000564:	e073      	b.n	2000064e <SNEK_move+0x186>
	for (int i = self->tail->bottom; i != self->tail->top; i = (i + 1) % 50) {
20000566:	697b      	ldr	r3, [r7, #20]
20000568:	3301      	adds	r3, #1
2000056a:	2132      	movs	r1, #50	; 0x32
2000056c:	0018      	movs	r0, r3
2000056e:	f000 ffc7 	bl	20001500 <__aeabi_idivmod>
20000572:	000b      	movs	r3, r1
20000574:	617b      	str	r3, [r7, #20]
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	685b      	ldr	r3, [r3, #4]
2000057a:	685b      	ldr	r3, [r3, #4]
2000057c:	697a      	ldr	r2, [r7, #20]
2000057e:	429a      	cmp	r2, r3
20000580:	d1d5      	bne.n	2000052e <SNEK_move+0x66>
		}
	}
	
	
	bool nomnomnom = false;
20000582:	2313      	movs	r3, #19
20000584:	18fb      	adds	r3, r7, r3
20000586:	2200      	movs	r2, #0
20000588:	701a      	strb	r2, [r3, #0]
	if (next_head.x == food.x && next_head.y == food.y) {
2000058a:	2310      	movs	r3, #16
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	781a      	ldrb	r2, [r3, #0]
20000590:	4b31      	ldr	r3, [pc, #196]	; (20000658 <SNEK_move+0x190>)
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	429a      	cmp	r2, r3
20000596:	d124      	bne.n	200005e2 <SNEK_move+0x11a>
20000598:	2310      	movs	r3, #16
2000059a:	18fb      	adds	r3, r7, r3
2000059c:	785a      	ldrb	r2, [r3, #1]
2000059e:	4b2e      	ldr	r3, [pc, #184]	; (20000658 <SNEK_move+0x190>)
200005a0:	785b      	ldrb	r3, [r3, #1]
200005a2:	429a      	cmp	r2, r3
200005a4:	d11d      	bne.n	200005e2 <SNEK_move+0x11a>
		nomnomnom = true;
200005a6:	2313      	movs	r3, #19
200005a8:	18fb      	adds	r3, r7, r3
200005aa:	2201      	movs	r2, #1
200005ac:	701a      	strb	r2, [r3, #0]
		gen_food(rngState);
200005ae:	4b2b      	ldr	r3, [pc, #172]	; (2000065c <SNEK_move+0x194>)
200005b0:	681b      	ldr	r3, [r3, #0]
200005b2:	0018      	movs	r0, r3
200005b4:	f7ff ff4c 	bl	20000450 <gen_food>
		points++;
200005b8:	4b29      	ldr	r3, [pc, #164]	; (20000660 <SNEK_move+0x198>)
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	3301      	adds	r3, #1
200005be:	b2da      	uxtb	r2, r3
200005c0:	4b27      	ldr	r3, [pc, #156]	; (20000660 <SNEK_move+0x198>)
200005c2:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(1,1);
200005c4:	2101      	movs	r1, #1
200005c6:	2001      	movs	r0, #1
200005c8:	f000 faa7 	bl	20000b1a <ascii_gotoxy>
		ascii_write_string("Length: ");
200005cc:	4b25      	ldr	r3, [pc, #148]	; (20000664 <SNEK_move+0x19c>)
200005ce:	0018      	movs	r0, r3
200005d0:	f000 fadb 	bl	20000b8a <ascii_write_string>
		ascii_write_char(points + '0');
200005d4:	4b22      	ldr	r3, [pc, #136]	; (20000660 <SNEK_move+0x198>)
200005d6:	781b      	ldrb	r3, [r3, #0]
200005d8:	3330      	adds	r3, #48	; 0x30
200005da:	b2db      	uxtb	r3, r3
200005dc:	0018      	movs	r0, r3
200005de:	f000 fac4 	bl	20000b6a <ascii_write_char>
	}
	
	
	
    // Lägg till ditt förra huvud, som första noden i listan
	buffer_push(self->tail ,self->head);
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	6858      	ldr	r0, [r3, #4]
200005e6:	687b      	ldr	r3, [r7, #4]
200005e8:	2202      	movs	r2, #2
200005ea:	5a9a      	ldrh	r2, [r3, r2]
200005ec:	2300      	movs	r3, #0
200005ee:	0412      	lsls	r2, r2, #16
200005f0:	0c12      	lsrs	r2, r2, #16
200005f2:	0c1b      	lsrs	r3, r3, #16
200005f4:	041b      	lsls	r3, r3, #16
200005f6:	4313      	orrs	r3, r2
200005f8:	0019      	movs	r1, r3
200005fa:	f7ff fe5d 	bl	200002b8 <buffer_push>
    // Gå fram ett steg rita ditt nya huvud
	self->head = next_head;
200005fe:	687b      	ldr	r3, [r7, #4]
20000600:	2102      	movs	r1, #2
20000602:	2210      	movs	r2, #16
20000604:	18ba      	adds	r2, r7, r2
20000606:	8812      	ldrh	r2, [r2, #0]
20000608:	525a      	strh	r2, [r3, r1]
	pixel(self->head.x, self->head.y, true);
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	7898      	ldrb	r0, [r3, #2]
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	78db      	ldrb	r3, [r3, #3]
20000612:	2201      	movs	r2, #1
20000614:	0019      	movs	r1, r3
20000616:	f000 fc57 	bl	20000ec8 <pixel>
	
    // Ta bort sista elementet i listan, cleara den pixeln
	if (!nomnomnom) {
2000061a:	2313      	movs	r3, #19
2000061c:	18fb      	adds	r3, r7, r3
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2201      	movs	r2, #1
20000622:	4053      	eors	r3, r2
20000624:	b2db      	uxtb	r3, r3
20000626:	2b00      	cmp	r3, #0
20000628:	d011      	beq.n	2000064e <SNEK_move+0x186>
		POINT clearMe;
		buffer_shift(self->tail, &clearMe);
2000062a:	687b      	ldr	r3, [r7, #4]
2000062c:	685b      	ldr	r3, [r3, #4]
2000062e:	220c      	movs	r2, #12
20000630:	0014      	movs	r4, r2
20000632:	18ba      	adds	r2, r7, r2
20000634:	0011      	movs	r1, r2
20000636:	0018      	movs	r0, r3
20000638:	f7ff fed7 	bl	200003ea <buffer_shift>
		pixel(clearMe.x, clearMe.y, false);
2000063c:	0022      	movs	r2, r4
2000063e:	18bb      	adds	r3, r7, r2
20000640:	7818      	ldrb	r0, [r3, #0]
20000642:	18bb      	adds	r3, r7, r2
20000644:	785b      	ldrb	r3, [r3, #1]
20000646:	2200      	movs	r2, #0
20000648:	0019      	movs	r1, r3
2000064a:	f000 fc3d 	bl	20000ec8 <pixel>
	}
        
}
2000064e:	46bd      	mov	sp, r7
20000650:	b007      	add	sp, #28
20000652:	bd90      	pop	{r4, r7, pc}
20000654:	20001524 	andcs	r1, r0, r4, lsr #10
20000658:	20001528 	andcs	r1, r0, r8, lsr #10
2000065c:	20001594 	mulcs	r0, r4, r5
20000660:	20001590 	mulcs	r0, r0, r5
20000664:	200015d8 	ldrdcs	r1, [r0], -r8

20000668 <SNEK_draw>:

void SNEK_draw(SNEK* self) {
20000668:	b580      	push	{r7, lr}
2000066a:	b082      	sub	sp, #8
2000066c:	af00      	add	r7, sp, #0
2000066e:	6078      	str	r0, [r7, #4]
    pixel(self->head.x, self->head.y, true);
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	7898      	ldrb	r0, [r3, #2]
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	78db      	ldrb	r3, [r3, #3]
20000678:	2201      	movs	r2, #1
2000067a:	0019      	movs	r1, r3
2000067c:	f000 fc24 	bl	20000ec8 <pixel>
}
20000680:	46c0      	nop			; (mov r8, r8)
20000682:	46bd      	mov	sp, r7
20000684:	b002      	add	sp, #8
20000686:	bd80      	pop	{r7, pc}

20000688 <SNEK_turn_left>:

void SNEK_turn_left(SNEK* self) {
20000688:	b580      	push	{r7, lr}
2000068a:	b084      	sub	sp, #16
2000068c:	af00      	add	r7, sp, #0
2000068e:	6078      	str	r0, [r7, #4]
	VECTOR new_velocity;
	new_velocity.x = self->velocity.y;
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	2201      	movs	r2, #1
20000694:	569a      	ldrsb	r2, [r3, r2]
20000696:	210c      	movs	r1, #12
20000698:	187b      	adds	r3, r7, r1
2000069a:	701a      	strb	r2, [r3, #0]
	new_velocity.y = -self->velocity.x;
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	b25b      	sxtb	r3, r3
200006a2:	b2db      	uxtb	r3, r3
200006a4:	425b      	negs	r3, r3
200006a6:	b2db      	uxtb	r3, r3
200006a8:	b25a      	sxtb	r2, r3
200006aa:	187b      	adds	r3, r7, r1
200006ac:	705a      	strb	r2, [r3, #1]
	self->velocity = new_velocity;
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	187a      	adds	r2, r7, r1
200006b2:	8812      	ldrh	r2, [r2, #0]
200006b4:	801a      	strh	r2, [r3, #0]
}
200006b6:	46c0      	nop			; (mov r8, r8)
200006b8:	46bd      	mov	sp, r7
200006ba:	b004      	add	sp, #16
200006bc:	bd80      	pop	{r7, pc}

200006be <SNEK_turn_right>:

void SNEK_turn_right(SNEK* self) {
200006be:	b580      	push	{r7, lr}
200006c0:	b084      	sub	sp, #16
200006c2:	af00      	add	r7, sp, #0
200006c4:	6078      	str	r0, [r7, #4]
	VECTOR new_velocity;
	new_velocity.x = -self->velocity.y;
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	785b      	ldrb	r3, [r3, #1]
200006ca:	b25b      	sxtb	r3, r3
200006cc:	b2db      	uxtb	r3, r3
200006ce:	425b      	negs	r3, r3
200006d0:	b2db      	uxtb	r3, r3
200006d2:	b25a      	sxtb	r2, r3
200006d4:	210c      	movs	r1, #12
200006d6:	187b      	adds	r3, r7, r1
200006d8:	701a      	strb	r2, [r3, #0]
	new_velocity.y = self->velocity.x;
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	2200      	movs	r2, #0
200006de:	569a      	ldrsb	r2, [r3, r2]
200006e0:	187b      	adds	r3, r7, r1
200006e2:	705a      	strb	r2, [r3, #1]
	self->velocity = new_velocity;
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	187a      	adds	r2, r7, r1
200006e8:	8812      	ldrh	r2, [r2, #0]
200006ea:	801a      	strh	r2, [r3, #0]
}
200006ec:	46c0      	nop			; (mov r8, r8)
200006ee:	46bd      	mov	sp, r7
200006f0:	b004      	add	sp, #16
200006f2:	bd80      	pop	{r7, pc}

200006f4 <app_init>:
	.turn_right = SNEK_turn_right,
	.velocity = (VECTOR) {1,0}
};


void app_init(void) {
200006f4:	b580      	push	{r7, lr}
200006f6:	af00      	add	r7, sp, #0
	#ifdef USBDM
		GPIO_clock_start();
200006f8:	f000 fd58 	bl	200011ac <GPIO_clock_start>
		*((uint32_t*) 0x40023844) |= 0x4000;
200006fc:	4b0c      	ldr	r3, [pc, #48]	; (20000730 <app_init+0x3c>)
200006fe:	681a      	ldr	r2, [r3, #0]
20000700:	4b0b      	ldr	r3, [pc, #44]	; (20000730 <app_init+0x3c>)
20000702:	2180      	movs	r1, #128	; 0x80
20000704:	01c9      	lsls	r1, r1, #7
20000706:	430a      	orrs	r2, r1
20000708:	601a      	str	r2, [r3, #0]
		*((uint32_t*) 0xE000ED08) = 0x2001C000;
2000070a:	4b0a      	ldr	r3, [pc, #40]	; (20000734 <app_init+0x40>)
2000070c:	4a0a      	ldr	r2, [pc, #40]	; (20000738 <app_init+0x44>)
2000070e:	601a      	str	r2, [r3, #0]
	#endif
	seedRng(&rngState, 0);
20000710:	4b0a      	ldr	r3, [pc, #40]	; (2000073c <app_init+0x48>)
20000712:	2100      	movs	r1, #0
20000714:	0018      	movs	r0, r3
20000716:	f7ff fc7b 	bl	20000010 <seedRng>
	nb_init_delay();
2000071a:	f000 fd05 	bl	20001128 <nb_init_delay>
	graphic_init();
2000071e:	f000 fca2 	bl	20001066 <graphic_init>
	init_keypad(GPIO_D);
20000722:	4b07      	ldr	r3, [pc, #28]	; (20000740 <app_init+0x4c>)
20000724:	0018      	movs	r0, r3
20000726:	f7ff fcc7 	bl	200000b8 <init_keypad>
}
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	46bd      	mov	sp, r7
2000072e:	bd80      	pop	{r7, pc}
20000730:	40023844 	andmi	r3, r2, r4, asr #16
20000734:	e000ed08 	and	lr, r0, r8, lsl #26
20000738:	2001c000 	andcs	ip, r1, r0
2000073c:	20001594 	mulcs	r0, r4, r5
20000740:	40020c00 	andmi	r0, r2, r0, lsl #24

20000744 <app_reset>:

void app_reset(void) {
20000744:	b580      	push	{r7, lr}
20000746:	b082      	sub	sp, #8
20000748:	af00      	add	r7, sp, #0
	ascii_init();
2000074a:	f000 f9cf 	bl	20000aec <ascii_init>
	graphic_clear_screen();
2000074e:	f000 fc57 	bl	20001000 <graphic_clear_screen>
	player.head = (POINT) {64, 32};
20000752:	4b11      	ldr	r3, [pc, #68]	; (20000798 <app_reset+0x54>)
20000754:	2102      	movs	r1, #2
20000756:	4a11      	ldr	r2, [pc, #68]	; (2000079c <app_reset+0x58>)
20000758:	8812      	ldrh	r2, [r2, #0]
2000075a:	525a      	strh	r2, [r3, r1]
	player.tail->bottom = 0;
2000075c:	4b0e      	ldr	r3, [pc, #56]	; (20000798 <app_reset+0x54>)
2000075e:	685b      	ldr	r3, [r3, #4]
20000760:	2200      	movs	r2, #0
20000762:	609a      	str	r2, [r3, #8]
	player.tail->top = 0;
20000764:	4b0c      	ldr	r3, [pc, #48]	; (20000798 <app_reset+0x54>)
20000766:	685b      	ldr	r3, [r3, #4]
20000768:	2200      	movs	r2, #0
2000076a:	605a      	str	r2, [r3, #4]
	buffer_unshift(player.tail, (POINT) {63,32});
2000076c:	4b0a      	ldr	r3, [pc, #40]	; (20000798 <app_reset+0x54>)
2000076e:	6858      	ldr	r0, [r3, #4]
20000770:	1d3b      	adds	r3, r7, #4
20000772:	4a0b      	ldr	r2, [pc, #44]	; (200007a0 <app_reset+0x5c>)
20000774:	8812      	ldrh	r2, [r2, #0]
20000776:	801a      	strh	r2, [r3, #0]
20000778:	1d3b      	adds	r3, r7, #4
2000077a:	6819      	ldr	r1, [r3, #0]
2000077c:	f7ff fe02 	bl	20000384 <buffer_unshift>
	gen_food(rngState);
20000780:	4b08      	ldr	r3, [pc, #32]	; (200007a4 <app_reset+0x60>)
20000782:	681b      	ldr	r3, [r3, #0]
20000784:	0018      	movs	r0, r3
20000786:	f7ff fe63 	bl	20000450 <gen_food>
	points = 1;
2000078a:	4b07      	ldr	r3, [pc, #28]	; (200007a8 <app_reset+0x64>)
2000078c:	2201      	movs	r2, #1
2000078e:	701a      	strb	r2, [r3, #0]
}
20000790:	46c0      	nop			; (mov r8, r8)
20000792:	46bd      	mov	sp, r7
20000794:	b002      	add	sp, #8
20000796:	bd80      	pop	{r7, pc}
20000798:	200015b0 			; <UNDEFINED> instruction: 0x200015b0
2000079c:	200015e4 	andcs	r1, r0, r4, ror #11
200007a0:	200015e8 	andcs	r1, r0, r8, ror #11
200007a4:	20001594 	mulcs	r0, r4, r5
200007a8:	20001590 	mulcs	r0, r0, r5

200007ac <main>:

int main(void) {
200007ac:	b590      	push	{r4, r7, lr}
200007ae:	b083      	sub	sp, #12
200007b0:	af00      	add	r7, sp, #0
	app_init();
200007b2:	f7ff ff9f 	bl	200006f4 <app_init>
	while(true){
		app_reset();
200007b6:	f7ff ffc5 	bl	20000744 <app_reset>
		player.draw(&player);
200007ba:	4b32      	ldr	r3, [pc, #200]	; (20000884 <main+0xd8>)
200007bc:	68db      	ldr	r3, [r3, #12]
200007be:	4a31      	ldr	r2, [pc, #196]	; (20000884 <main+0xd8>)
200007c0:	0010      	movs	r0, r2
200007c2:	4798      	blx	r3
		ascii_gotoxy(1,1);
200007c4:	2101      	movs	r1, #1
200007c6:	2001      	movs	r0, #1
200007c8:	f000 f9a7 	bl	20000b1a <ascii_gotoxy>
		ascii_write_string("Press 5 to play");
200007cc:	4b2e      	ldr	r3, [pc, #184]	; (20000888 <main+0xdc>)
200007ce:	0018      	movs	r0, r3
200007d0:	f000 f9db 	bl	20000b8a <ascii_write_string>
		ascii_gotoxy(1,2);
200007d4:	2102      	movs	r1, #2
200007d6:	2001      	movs	r0, #1
200007d8:	f000 f99f 	bl	20000b1a <ascii_gotoxy>
		ascii_write_string("again!");
200007dc:	4b2b      	ldr	r3, [pc, #172]	; (2000088c <main+0xe0>)
200007de:	0018      	movs	r0, r3
200007e0:	f000 f9d3 	bl	20000b8a <ascii_write_string>
		while (kread_keypad(GPIO_D) != 5);
200007e4:	46c0      	nop			; (mov r8, r8)
200007e6:	4b2a      	ldr	r3, [pc, #168]	; (20000890 <main+0xe4>)
200007e8:	0018      	movs	r0, r3
200007ea:	f7ff fd23 	bl	20000234 <kread_keypad>
200007ee:	0003      	movs	r3, r0
200007f0:	2b05      	cmp	r3, #5
200007f2:	d1f8      	bne.n	200007e6 <main+0x3a>
		ascii_init();
200007f4:	f000 f97a 	bl	20000aec <ascii_init>
		ascii_write_string("Length: 1");
200007f8:	4b26      	ldr	r3, [pc, #152]	; (20000894 <main+0xe8>)
200007fa:	0018      	movs	r0, r3
200007fc:	f000 f9c5 	bl	20000b8a <ascii_write_string>
		
		while (true) {
			// Grejer som ska göras varje gametick;
			player.move(&player);
20000800:	4b20      	ldr	r3, [pc, #128]	; (20000884 <main+0xd8>)
20000802:	689b      	ldr	r3, [r3, #8]
20000804:	4a1f      	ldr	r2, [pc, #124]	; (20000884 <main+0xd8>)
20000806:	0010      	movs	r0, r2
20000808:	4798      	blx	r3
			
			
			
			nb_delay(10000); // Calla inte delay efter det här
2000080a:	4b23      	ldr	r3, [pc, #140]	; (20000898 <main+0xec>)
2000080c:	0018      	movs	r0, r3
2000080e:	f000 fc9d 	bl	2000114c <nb_delay>
			while (true) {
				// Grejer som kan göras medans delay är igång (INTE GREJER SOM KRÄVER DELAY)
				if (systick_flag) {
20000812:	4b22      	ldr	r3, [pc, #136]	; (2000089c <main+0xf0>)
20000814:	781b      	ldrb	r3, [r3, #0]
20000816:	b2db      	uxtb	r3, r3
20000818:	2b00      	cmp	r3, #0
2000081a:	d100      	bne.n	2000081e <main+0x72>
2000081c:	e7f9      	b.n	20000812 <main+0x66>
					break;
2000081e:	46c0      	nop			; (mov r8, r8)
				}
			} // Nu är det fine att calla delay igen
			uint8_t c = kread_keypad(GPIO_D);
20000820:	1dfc      	adds	r4, r7, #7
20000822:	4b1b      	ldr	r3, [pc, #108]	; (20000890 <main+0xe4>)
20000824:	0018      	movs	r0, r3
20000826:	f7ff fd05 	bl	20000234 <kread_keypad>
2000082a:	0003      	movs	r3, r0
2000082c:	7023      	strb	r3, [r4, #0]
			switch(c) {
2000082e:	1dfb      	adds	r3, r7, #7
20000830:	781b      	ldrb	r3, [r3, #0]
20000832:	2b04      	cmp	r3, #4
20000834:	d002      	beq.n	2000083c <main+0x90>
20000836:	2b06      	cmp	r3, #6
20000838:	d006      	beq.n	20000848 <main+0x9c>
2000083a:	e00b      	b.n	20000854 <main+0xa8>
				case 4: 
					player.turn_left(&player);
2000083c:	4b11      	ldr	r3, [pc, #68]	; (20000884 <main+0xd8>)
2000083e:	691b      	ldr	r3, [r3, #16]
20000840:	4a10      	ldr	r2, [pc, #64]	; (20000884 <main+0xd8>)
20000842:	0010      	movs	r0, r2
20000844:	4798      	blx	r3
					break;
20000846:	e005      	b.n	20000854 <main+0xa8>
				case 6:
					player.turn_right(&player);
20000848:	4b0e      	ldr	r3, [pc, #56]	; (20000884 <main+0xd8>)
2000084a:	695b      	ldr	r3, [r3, #20]
2000084c:	4a0d      	ldr	r2, [pc, #52]	; (20000884 <main+0xd8>)
2000084e:	0010      	movs	r0, r2
20000850:	4798      	blx	r3
					break;
20000852:	46c0      	nop			; (mov r8, r8)
			}
			if (GAME_OVER) {
20000854:	4b12      	ldr	r3, [pc, #72]	; (200008a0 <main+0xf4>)
20000856:	781b      	ldrb	r3, [r3, #0]
20000858:	2b00      	cmp	r3, #0
2000085a:	d0d1      	beq.n	20000800 <main+0x54>
				ascii_gotoxy(1,1);
2000085c:	2101      	movs	r1, #1
2000085e:	2001      	movs	r0, #1
20000860:	f000 f95b 	bl	20000b1a <ascii_gotoxy>
				ascii_init();
20000864:	f000 f942 	bl	20000aec <ascii_init>
				ascii_write_string("GAME OVER!");
20000868:	4b0e      	ldr	r3, [pc, #56]	; (200008a4 <main+0xf8>)
2000086a:	0018      	movs	r0, r3
2000086c:	f000 f98d 	bl	20000b8a <ascii_write_string>
				delay_millis(200000);
20000870:	4b0d      	ldr	r3, [pc, #52]	; (200008a8 <main+0xfc>)
20000872:	0018      	movs	r0, r3
20000874:	f000 fda6 	bl	200013c4 <delay_millis>
				GAME_OVER = false;
20000878:	4b09      	ldr	r3, [pc, #36]	; (200008a0 <main+0xf4>)
2000087a:	2200      	movs	r2, #0
2000087c:	701a      	strb	r2, [r3, #0]
				break;
2000087e:	46c0      	nop			; (mov r8, r8)
		app_reset();
20000880:	e799      	b.n	200007b6 <main+0xa>
20000882:	46c0      	nop			; (mov r8, r8)
20000884:	200015b0 			; <UNDEFINED> instruction: 0x200015b0
20000888:	200015ec 	andcs	r1, r0, ip, ror #11
2000088c:	200015fc 	strdcs	r1, [r0], -ip
20000890:	40020c00 	andmi	r0, r2, r0, lsl #24
20000894:	20001604 	andcs	r1, r0, r4, lsl #12
20000898:	00002710 	andeq	r2, r0, r0, lsl r7
2000089c:	2000159c 	mulcs	r0, ip, r5
200008a0:	20001524 	andcs	r1, r0, r4, lsr #10
200008a4:	20001610 	andcs	r1, r0, r0, lsl r6
200008a8:	00030d40 	andeq	r0, r3, r0, asr #26

200008ac <ascii_ctrl_bit_set>:
#define BITMASK_E 0x40
#define BITMASK_SELECT 0x4
#define BITMASK_RW 0x2
#define BITMASK_RS 0x1

void ascii_ctrl_bit_set(unsigned char x) {
200008ac:	b580      	push	{r7, lr}
200008ae:	b084      	sub	sp, #16
200008b0:	af00      	add	r7, sp, #0
200008b2:	0002      	movs	r2, r0
200008b4:	1dfb      	adds	r3, r7, #7
200008b6:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = GPIO_E->odr_low;
200008b8:	4a0c      	ldr	r2, [pc, #48]	; (200008ec <ascii_ctrl_bit_set+0x40>)
200008ba:	210f      	movs	r1, #15
200008bc:	187b      	adds	r3, r7, r1
200008be:	7d12      	ldrb	r2, [r2, #20]
200008c0:	701a      	strb	r2, [r3, #0]
    c |= (BITMASK_SELECT | x);
200008c2:	1dfa      	adds	r2, r7, #7
200008c4:	187b      	adds	r3, r7, r1
200008c6:	7812      	ldrb	r2, [r2, #0]
200008c8:	781b      	ldrb	r3, [r3, #0]
200008ca:	4313      	orrs	r3, r2
200008cc:	b2da      	uxtb	r2, r3
200008ce:	0008      	movs	r0, r1
200008d0:	187b      	adds	r3, r7, r1
200008d2:	2104      	movs	r1, #4
200008d4:	430a      	orrs	r2, r1
200008d6:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
200008d8:	4a04      	ldr	r2, [pc, #16]	; (200008ec <ascii_ctrl_bit_set+0x40>)
200008da:	0001      	movs	r1, r0
200008dc:	187b      	adds	r3, r7, r1
200008de:	781b      	ldrb	r3, [r3, #0]
200008e0:	7513      	strb	r3, [r2, #20]
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b004      	add	sp, #16
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	40021000 	andmi	r1, r2, r0

200008f0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
200008f0:	b580      	push	{r7, lr}
200008f2:	b084      	sub	sp, #16
200008f4:	af00      	add	r7, sp, #0
200008f6:	0002      	movs	r2, r0
200008f8:	1dfb      	adds	r3, r7, #7
200008fa:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = GPIO_E->odr_low;
200008fc:	4a0d      	ldr	r2, [pc, #52]	; (20000934 <ascii_ctrl_bit_clear+0x44>)
200008fe:	210f      	movs	r1, #15
20000900:	187b      	adds	r3, r7, r1
20000902:	7d12      	ldrb	r2, [r2, #20]
20000904:	701a      	strb	r2, [r3, #0]
    c &= (BITMASK_SELECT | ~x);
20000906:	1dfb      	adds	r3, r7, #7
20000908:	781b      	ldrb	r3, [r3, #0]
2000090a:	b25b      	sxtb	r3, r3
2000090c:	43db      	mvns	r3, r3
2000090e:	b25b      	sxtb	r3, r3
20000910:	2204      	movs	r2, #4
20000912:	4313      	orrs	r3, r2
20000914:	b25b      	sxtb	r3, r3
20000916:	187a      	adds	r2, r7, r1
20000918:	7812      	ldrb	r2, [r2, #0]
2000091a:	b252      	sxtb	r2, r2
2000091c:	4013      	ands	r3, r2
2000091e:	b25a      	sxtb	r2, r3
20000920:	187b      	adds	r3, r7, r1
20000922:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000924:	4a03      	ldr	r2, [pc, #12]	; (20000934 <ascii_ctrl_bit_clear+0x44>)
20000926:	187b      	adds	r3, r7, r1
20000928:	781b      	ldrb	r3, [r3, #0]
2000092a:	7513      	strb	r3, [r2, #20]
}
2000092c:	46c0      	nop			; (mov r8, r8)
2000092e:	46bd      	mov	sp, r7
20000930:	b004      	add	sp, #16
20000932:	bd80      	pop	{r7, pc}
20000934:	40021000 	andmi	r1, r2, r0

20000938 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000938:	b580      	push	{r7, lr}
2000093a:	b082      	sub	sp, #8
2000093c:	af00      	add	r7, sp, #0
2000093e:	0002      	movs	r2, r0
20000940:	1dfb      	adds	r3, r7, #7
20000942:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_E);
20000944:	2040      	movs	r0, #64	; 0x40
20000946:	f7ff ffb1 	bl	200008ac <ascii_ctrl_bit_set>
    GPIO_E->odr_high = byte;
2000094a:	4a06      	ldr	r2, [pc, #24]	; (20000964 <ascii_write_controller+0x2c>)
2000094c:	1dfb      	adds	r3, r7, #7
2000094e:	781b      	ldrb	r3, [r3, #0]
20000950:	7553      	strb	r3, [r2, #21]
    ascii_ctrl_bit_clear(BITMASK_E);
20000952:	2040      	movs	r0, #64	; 0x40
20000954:	f7ff ffcc 	bl	200008f0 <ascii_ctrl_bit_clear>
    delay_250ns();
20000958:	f000 fcf2 	bl	20001340 <delay_250ns>
}
2000095c:	46c0      	nop			; (mov r8, r8)
2000095e:	46bd      	mov	sp, r7
20000960:	b002      	add	sp, #8
20000962:	bd80      	pop	{r7, pc}
20000964:	40021000 	andmi	r1, r2, r0

20000968 <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
20000968:	b580      	push	{r7, lr}
2000096a:	b082      	sub	sp, #8
2000096c:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(BITMASK_E);
2000096e:	2040      	movs	r0, #64	; 0x40
20000970:	f7ff ff9c 	bl	200008ac <ascii_ctrl_bit_set>
    delay_250ns();
20000974:	f000 fce4 	bl	20001340 <delay_250ns>
    delay_250ns();
20000978:	f000 fce2 	bl	20001340 <delay_250ns>
    unsigned char rv = GPIO_E->idr_high;
2000097c:	4a06      	ldr	r2, [pc, #24]	; (20000998 <ascii_read_controller+0x30>)
2000097e:	1dfb      	adds	r3, r7, #7
20000980:	7c52      	ldrb	r2, [r2, #17]
20000982:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_E);
20000984:	2040      	movs	r0, #64	; 0x40
20000986:	f7ff ffb3 	bl	200008f0 <ascii_ctrl_bit_clear>
    return rv;
2000098a:	1dfb      	adds	r3, r7, #7
2000098c:	781b      	ldrb	r3, [r3, #0]
}
2000098e:	0018      	movs	r0, r3
20000990:	46bd      	mov	sp, r7
20000992:	b002      	add	sp, #8
20000994:	bd80      	pop	{r7, pc}
20000996:	46c0      	nop			; (mov r8, r8)
20000998:	40021000 	andmi	r1, r2, r0

2000099c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
2000099c:	b580      	push	{r7, lr}
2000099e:	b082      	sub	sp, #8
200009a0:	af00      	add	r7, sp, #0
200009a2:	0002      	movs	r2, r0
200009a4:	1dfb      	adds	r3, r7, #7
200009a6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
200009a8:	2003      	movs	r0, #3
200009aa:	f7ff ffa1 	bl	200008f0 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
200009ae:	1dfb      	adds	r3, r7, #7
200009b0:	781b      	ldrb	r3, [r3, #0]
200009b2:	0018      	movs	r0, r3
200009b4:	f7ff ffc0 	bl	20000938 <ascii_write_controller>
}
200009b8:	46c0      	nop			; (mov r8, r8)
200009ba:	46bd      	mov	sp, r7
200009bc:	b002      	add	sp, #8
200009be:	bd80      	pop	{r7, pc}

200009c0 <ascii_write_data>:

void ascii_write_data(unsigned char data) {
200009c0:	b580      	push	{r7, lr}
200009c2:	b082      	sub	sp, #8
200009c4:	af00      	add	r7, sp, #0
200009c6:	0002      	movs	r2, r0
200009c8:	1dfb      	adds	r3, r7, #7
200009ca:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_RS);
200009cc:	2001      	movs	r0, #1
200009ce:	f7ff ff6d 	bl	200008ac <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(BITMASK_RW);
200009d2:	2002      	movs	r0, #2
200009d4:	f7ff ff8c 	bl	200008f0 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200009d8:	1dfb      	adds	r3, r7, #7
200009da:	781b      	ldrb	r3, [r3, #0]
200009dc:	0018      	movs	r0, r3
200009de:	f7ff ffab 	bl	20000938 <ascii_write_controller>
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	b002      	add	sp, #8
200009e8:	bd80      	pop	{r7, pc}

200009ea <ascii_read_status>:

unsigned char ascii_read_status(void) {
200009ea:	b590      	push	{r4, r7, lr}
200009ec:	b083      	sub	sp, #12
200009ee:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x00005555;
200009f0:	4b0b      	ldr	r3, [pc, #44]	; (20000a20 <ascii_read_status+0x36>)
200009f2:	4a0c      	ldr	r2, [pc, #48]	; (20000a24 <ascii_read_status+0x3a>)
200009f4:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(BITMASK_RS);
200009f6:	2001      	movs	r0, #1
200009f8:	f7ff ff7a 	bl	200008f0 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(BITMASK_RW);
200009fc:	2002      	movs	r0, #2
200009fe:	f7ff ff55 	bl	200008ac <ascii_ctrl_bit_set>
    unsigned char c = ascii_read_controller();
20000a02:	1dfc      	adds	r4, r7, #7
20000a04:	f7ff ffb0 	bl	20000968 <ascii_read_controller>
20000a08:	0003      	movs	r3, r0
20000a0a:	7023      	strb	r3, [r4, #0]
    GPIO_E->moder = 0x55555555;
20000a0c:	4b04      	ldr	r3, [pc, #16]	; (20000a20 <ascii_read_status+0x36>)
20000a0e:	4a06      	ldr	r2, [pc, #24]	; (20000a28 <ascii_read_status+0x3e>)
20000a10:	601a      	str	r2, [r3, #0]
    return c;
20000a12:	1dfb      	adds	r3, r7, #7
20000a14:	781b      	ldrb	r3, [r3, #0]
}
20000a16:	0018      	movs	r0, r3
20000a18:	46bd      	mov	sp, r7
20000a1a:	b003      	add	sp, #12
20000a1c:	bd90      	pop	{r4, r7, pc}
20000a1e:	46c0      	nop			; (mov r8, r8)
20000a20:	40021000 	andmi	r1, r2, r0
20000a24:	00005555 	andeq	r5, r0, r5, asr r5
20000a28:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000a2c <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000a2c:	b590      	push	{r4, r7, lr}
20000a2e:	b083      	sub	sp, #12
20000a30:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x00005555;
20000a32:	4b0b      	ldr	r3, [pc, #44]	; (20000a60 <ascii_read_data+0x34>)
20000a34:	4a0b      	ldr	r2, [pc, #44]	; (20000a64 <ascii_read_data+0x38>)
20000a36:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(BITMASK_RS);
20000a38:	2001      	movs	r0, #1
20000a3a:	f7ff ff37 	bl	200008ac <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(BITMASK_RW);
20000a3e:	2002      	movs	r0, #2
20000a40:	f7ff ff34 	bl	200008ac <ascii_ctrl_bit_set>
    unsigned char c = ascii_read_controller();
20000a44:	1dfc      	adds	r4, r7, #7
20000a46:	f7ff ff8f 	bl	20000968 <ascii_read_controller>
20000a4a:	0003      	movs	r3, r0
20000a4c:	7023      	strb	r3, [r4, #0]
    GPIO_E->moder = 0x55555555;
20000a4e:	4b04      	ldr	r3, [pc, #16]	; (20000a60 <ascii_read_data+0x34>)
20000a50:	4a05      	ldr	r2, [pc, #20]	; (20000a68 <ascii_read_data+0x3c>)
20000a52:	601a      	str	r2, [r3, #0]
    return c;
20000a54:	1dfb      	adds	r3, r7, #7
20000a56:	781b      	ldrb	r3, [r3, #0]
}
20000a58:	0018      	movs	r0, r3
20000a5a:	46bd      	mov	sp, r7
20000a5c:	b003      	add	sp, #12
20000a5e:	bd90      	pop	{r4, r7, pc}
20000a60:	40021000 	andmi	r1, r2, r0
20000a64:	00005555 	andeq	r5, r0, r5, asr r5
20000a68:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000a6c <ascii_write_cmd_delay>:

void ascii_write_cmd_delay(unsigned char cmd, unsigned int delay) {
20000a6c:	b580      	push	{r7, lr}
20000a6e:	b082      	sub	sp, #8
20000a70:	af00      	add	r7, sp, #0
20000a72:	0002      	movs	r2, r0
20000a74:	6039      	str	r1, [r7, #0]
20000a76:	1dfb      	adds	r3, r7, #7
20000a78:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80);
20000a7a:	46c0      	nop			; (mov r8, r8)
20000a7c:	f7ff ffb5 	bl	200009ea <ascii_read_status>
20000a80:	0003      	movs	r3, r0
20000a82:	001a      	movs	r2, r3
20000a84:	2380      	movs	r3, #128	; 0x80
20000a86:	4013      	ands	r3, r2
20000a88:	2b80      	cmp	r3, #128	; 0x80
20000a8a:	d0f7      	beq.n	20000a7c <ascii_write_cmd_delay+0x10>
    delay_micros(8);
20000a8c:	2008      	movs	r0, #8
20000a8e:	f000 fc7b 	bl	20001388 <delay_micros>
    ascii_write_cmd(cmd);
20000a92:	1dfb      	adds	r3, r7, #7
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	0018      	movs	r0, r3
20000a98:	f7ff ff80 	bl	2000099c <ascii_write_cmd>
    delay_micros(delay);
20000a9c:	683b      	ldr	r3, [r7, #0]
20000a9e:	0018      	movs	r0, r3
20000aa0:	f000 fc72 	bl	20001388 <delay_micros>
}
20000aa4:	46c0      	nop			; (mov r8, r8)
20000aa6:	46bd      	mov	sp, r7
20000aa8:	b002      	add	sp, #8
20000aaa:	bd80      	pop	{r7, pc}

20000aac <ascii_write_data_delay>:

void ascii_write_data_delay(unsigned char data, unsigned int delay) {
20000aac:	b580      	push	{r7, lr}
20000aae:	b082      	sub	sp, #8
20000ab0:	af00      	add	r7, sp, #0
20000ab2:	0002      	movs	r2, r0
20000ab4:	6039      	str	r1, [r7, #0]
20000ab6:	1dfb      	adds	r3, r7, #7
20000ab8:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80);
20000aba:	46c0      	nop			; (mov r8, r8)
20000abc:	f7ff ff95 	bl	200009ea <ascii_read_status>
20000ac0:	0003      	movs	r3, r0
20000ac2:	001a      	movs	r2, r3
20000ac4:	2380      	movs	r3, #128	; 0x80
20000ac6:	4013      	ands	r3, r2
20000ac8:	2b80      	cmp	r3, #128	; 0x80
20000aca:	d0f7      	beq.n	20000abc <ascii_write_data_delay+0x10>
    delay_micros(8);
20000acc:	2008      	movs	r0, #8
20000ace:	f000 fc5b 	bl	20001388 <delay_micros>
    ascii_write_data(data);
20000ad2:	1dfb      	adds	r3, r7, #7
20000ad4:	781b      	ldrb	r3, [r3, #0]
20000ad6:	0018      	movs	r0, r3
20000ad8:	f7ff ff72 	bl	200009c0 <ascii_write_data>
    delay_micros(delay);
20000adc:	683b      	ldr	r3, [r7, #0]
20000ade:	0018      	movs	r0, r3
20000ae0:	f000 fc52 	bl	20001388 <delay_micros>
}
20000ae4:	46c0      	nop			; (mov r8, r8)
20000ae6:	46bd      	mov	sp, r7
20000ae8:	b002      	add	sp, #8
20000aea:	bd80      	pop	{r7, pc}

20000aec <ascii_init>:

void ascii_init(void) {
20000aec:	b580      	push	{r7, lr}
20000aee:	af00      	add	r7, sp, #0
    ascii_write_cmd_delay(1, 2000); // Clear display
20000af0:	23fa      	movs	r3, #250	; 0xfa
20000af2:	00db      	lsls	r3, r3, #3
20000af4:	0019      	movs	r1, r3
20000af6:	2001      	movs	r0, #1
20000af8:	f7ff ffb8 	bl	20000a6c <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0x38, 40);// 2 rows, 5x8px chars
20000afc:	2128      	movs	r1, #40	; 0x28
20000afe:	2038      	movs	r0, #56	; 0x38
20000b00:	f7ff ffb4 	bl	20000a6c <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0xE, 40); // Turn on display, always show cursor
20000b04:	2128      	movs	r1, #40	; 0x28
20000b06:	200e      	movs	r0, #14
20000b08:	f7ff ffb0 	bl	20000a6c <ascii_write_cmd_delay>
    ascii_write_cmd_delay(0x6, 40); // Adress using increment, no shifting of adress buffer
20000b0c:	2128      	movs	r1, #40	; 0x28
20000b0e:	2006      	movs	r0, #6
20000b10:	f7ff ffac 	bl	20000a6c <ascii_write_cmd_delay>
}
20000b14:	46c0      	nop			; (mov r8, r8)
20000b16:	46bd      	mov	sp, r7
20000b18:	bd80      	pop	{r7, pc}

20000b1a <ascii_gotoxy>:


void ascii_gotoxy(unsigned char row, unsigned char column) {
20000b1a:	b580      	push	{r7, lr}
20000b1c:	b084      	sub	sp, #16
20000b1e:	af00      	add	r7, sp, #0
20000b20:	0002      	movs	r2, r0
20000b22:	1dfb      	adds	r3, r7, #7
20000b24:	701a      	strb	r2, [r3, #0]
20000b26:	1dbb      	adds	r3, r7, #6
20000b28:	1c0a      	adds	r2, r1, #0
20000b2a:	701a      	strb	r2, [r3, #0]
    unsigned char adress = row - 1;
20000b2c:	230f      	movs	r3, #15
20000b2e:	18fb      	adds	r3, r7, r3
20000b30:	1dfa      	adds	r2, r7, #7
20000b32:	7812      	ldrb	r2, [r2, #0]
20000b34:	3a01      	subs	r2, #1
20000b36:	701a      	strb	r2, [r3, #0]
    if (column > 1) {
20000b38:	1dbb      	adds	r3, r7, #6
20000b3a:	781b      	ldrb	r3, [r3, #0]
20000b3c:	2b01      	cmp	r3, #1
20000b3e:	d905      	bls.n	20000b4c <ascii_gotoxy+0x32>
        adress += 0x40;
20000b40:	220f      	movs	r2, #15
20000b42:	18bb      	adds	r3, r7, r2
20000b44:	18ba      	adds	r2, r7, r2
20000b46:	7812      	ldrb	r2, [r2, #0]
20000b48:	3240      	adds	r2, #64	; 0x40
20000b4a:	701a      	strb	r2, [r3, #0]
    }
    ascii_write_cmd_delay(0x80 | adress, 40);
20000b4c:	230f      	movs	r3, #15
20000b4e:	18fb      	adds	r3, r7, r3
20000b50:	781b      	ldrb	r3, [r3, #0]
20000b52:	2280      	movs	r2, #128	; 0x80
20000b54:	4252      	negs	r2, r2
20000b56:	4313      	orrs	r3, r2
20000b58:	b2db      	uxtb	r3, r3
20000b5a:	2128      	movs	r1, #40	; 0x28
20000b5c:	0018      	movs	r0, r3
20000b5e:	f7ff ff85 	bl	20000a6c <ascii_write_cmd_delay>
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b004      	add	sp, #16
20000b68:	bd80      	pop	{r7, pc}

20000b6a <ascii_write_char>:

void ascii_write_char(char c) {
20000b6a:	b580      	push	{r7, lr}
20000b6c:	b082      	sub	sp, #8
20000b6e:	af00      	add	r7, sp, #0
20000b70:	0002      	movs	r2, r0
20000b72:	1dfb      	adds	r3, r7, #7
20000b74:	701a      	strb	r2, [r3, #0]
    ascii_write_data_delay(c,43);
20000b76:	1dfb      	adds	r3, r7, #7
20000b78:	781b      	ldrb	r3, [r3, #0]
20000b7a:	212b      	movs	r1, #43	; 0x2b
20000b7c:	0018      	movs	r0, r3
20000b7e:	f7ff ff95 	bl	20000aac <ascii_write_data_delay>
}
20000b82:	46c0      	nop			; (mov r8, r8)
20000b84:	46bd      	mov	sp, r7
20000b86:	b002      	add	sp, #8
20000b88:	bd80      	pop	{r7, pc}

20000b8a <ascii_write_string>:

void ascii_write_string(char *c) {
20000b8a:	b580      	push	{r7, lr}
20000b8c:	b082      	sub	sp, #8
20000b8e:	af00      	add	r7, sp, #0
20000b90:	6078      	str	r0, [r7, #4]
    while(*c) {
20000b92:	e006      	b.n	20000ba2 <ascii_write_string+0x18>
        ascii_write_char(*c++);
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	1c5a      	adds	r2, r3, #1
20000b98:	607a      	str	r2, [r7, #4]
20000b9a:	781b      	ldrb	r3, [r3, #0]
20000b9c:	0018      	movs	r0, r3
20000b9e:	f7ff ffe4 	bl	20000b6a <ascii_write_char>
    while(*c) {
20000ba2:	687b      	ldr	r3, [r7, #4]
20000ba4:	781b      	ldrb	r3, [r3, #0]
20000ba6:	2b00      	cmp	r3, #0
20000ba8:	d1f4      	bne.n	20000b94 <ascii_write_string+0xa>
    }
20000baa:	46c0      	nop			; (mov r8, r8)
20000bac:	46bd      	mov	sp, r7
20000bae:	b002      	add	sp, #8
20000bb0:	bd80      	pop	{r7, pc}
20000bb2:	46c0      	nop			; (mov r8, r8)

20000bb4 <graphic_ctrl_bit_set>:
#define LCD_SET_PAGE 0xB8
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

// choose graphic display, and set the bits from x
void graphic_ctrl_bit_set(uint8_t x) {
20000bb4:	b580      	push	{r7, lr}
20000bb6:	b084      	sub	sp, #16
20000bb8:	af00      	add	r7, sp, #0
20000bba:	0002      	movs	r2, r0
20000bbc:	1dfb      	adds	r3, r7, #7
20000bbe:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
20000bc0:	4a0c      	ldr	r2, [pc, #48]	; (20000bf4 <graphic_ctrl_bit_set+0x40>)
20000bc2:	210f      	movs	r1, #15
20000bc4:	187b      	adds	r3, r7, r1
20000bc6:	7d12      	ldrb	r2, [r2, #20]
20000bc8:	701a      	strb	r2, [r3, #0]
    c |= (x & ~BITMASK_SELECT);
20000bca:	1dfb      	adds	r3, r7, #7
20000bcc:	781b      	ldrb	r3, [r3, #0]
20000bce:	b25b      	sxtb	r3, r3
20000bd0:	2204      	movs	r2, #4
20000bd2:	4393      	bics	r3, r2
20000bd4:	b25a      	sxtb	r2, r3
20000bd6:	187b      	adds	r3, r7, r1
20000bd8:	781b      	ldrb	r3, [r3, #0]
20000bda:	b25b      	sxtb	r3, r3
20000bdc:	4313      	orrs	r3, r2
20000bde:	b25a      	sxtb	r2, r3
20000be0:	187b      	adds	r3, r7, r1
20000be2:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000be4:	4a03      	ldr	r2, [pc, #12]	; (20000bf4 <graphic_ctrl_bit_set+0x40>)
20000be6:	187b      	adds	r3, r7, r1
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	7513      	strb	r3, [r2, #20]
}
20000bec:	46c0      	nop			; (mov r8, r8)
20000bee:	46bd      	mov	sp, r7
20000bf0:	b004      	add	sp, #16
20000bf2:	bd80      	pop	{r7, pc}
20000bf4:	40021000 	andmi	r1, r2, r0

20000bf8 <graphic_ctrl_bit_clear>:
// Choose graphic display, and clear the bits from x
void graphic_ctrl_bit_clear(uint8_t x) {
20000bf8:	b580      	push	{r7, lr}
20000bfa:	b084      	sub	sp, #16
20000bfc:	af00      	add	r7, sp, #0
20000bfe:	0002      	movs	r2, r0
20000c00:	1dfb      	adds	r3, r7, #7
20000c02:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
20000c04:	4a0d      	ldr	r2, [pc, #52]	; (20000c3c <graphic_ctrl_bit_clear+0x44>)
20000c06:	210f      	movs	r1, #15
20000c08:	187b      	adds	r3, r7, r1
20000c0a:	7d12      	ldrb	r2, [r2, #20]
20000c0c:	701a      	strb	r2, [r3, #0]
    c &= (~x & ~BITMASK_SELECT); 
20000c0e:	1dfb      	adds	r3, r7, #7
20000c10:	781b      	ldrb	r3, [r3, #0]
20000c12:	43db      	mvns	r3, r3
20000c14:	b2db      	uxtb	r3, r3
20000c16:	187a      	adds	r2, r7, r1
20000c18:	7812      	ldrb	r2, [r2, #0]
20000c1a:	4013      	ands	r3, r2
20000c1c:	b2da      	uxtb	r2, r3
20000c1e:	0008      	movs	r0, r1
20000c20:	187b      	adds	r3, r7, r1
20000c22:	2104      	movs	r1, #4
20000c24:	438a      	bics	r2, r1
20000c26:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000c28:	4a04      	ldr	r2, [pc, #16]	; (20000c3c <graphic_ctrl_bit_clear+0x44>)
20000c2a:	0001      	movs	r1, r0
20000c2c:	187b      	adds	r3, r7, r1
20000c2e:	781b      	ldrb	r3, [r3, #0]
20000c30:	7513      	strb	r3, [r2, #20]
}
20000c32:	46c0      	nop			; (mov r8, r8)
20000c34:	46bd      	mov	sp, r7
20000c36:	b004      	add	sp, #16
20000c38:	bd80      	pop	{r7, pc}
20000c3a:	46c0      	nop			; (mov r8, r8)
20000c3c:	40021000 	andmi	r1, r2, r0

20000c40 <select_controller>:
// Select chip
void select_controller(uint8_t controller) {
20000c40:	b580      	push	{r7, lr}
20000c42:	b082      	sub	sp, #8
20000c44:	af00      	add	r7, sp, #0
20000c46:	0002      	movs	r2, r0
20000c48:	1dfb      	adds	r3, r7, #7
20000c4a:	701a      	strb	r2, [r3, #0]
    switch (controller) {
20000c4c:	1dfb      	adds	r3, r7, #7
20000c4e:	781b      	ldrb	r3, [r3, #0]
20000c50:	2b08      	cmp	r3, #8
20000c52:	d00c      	beq.n	20000c6e <select_controller+0x2e>
20000c54:	dc02      	bgt.n	20000c5c <select_controller+0x1c>
20000c56:	2b00      	cmp	r3, #0
20000c58:	d005      	beq.n	20000c66 <select_controller+0x26>
            break;
        case BITMASK_CS1 | BITMASK_CS2:
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
            break;
    }
}
20000c5a:	e01a      	b.n	20000c92 <select_controller+0x52>
    switch (controller) {
20000c5c:	2b10      	cmp	r3, #16
20000c5e:	d00d      	beq.n	20000c7c <select_controller+0x3c>
20000c60:	2b18      	cmp	r3, #24
20000c62:	d012      	beq.n	20000c8a <select_controller+0x4a>
}
20000c64:	e015      	b.n	20000c92 <select_controller+0x52>
            graphic_ctrl_bit_clear (BITMASK_CS1 | BITMASK_CS2);
20000c66:	2018      	movs	r0, #24
20000c68:	f7ff ffc6 	bl	20000bf8 <graphic_ctrl_bit_clear>
            break;
20000c6c:	e011      	b.n	20000c92 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1);
20000c6e:	2008      	movs	r0, #8
20000c70:	f7ff ffa0 	bl	20000bb4 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS2);
20000c74:	2010      	movs	r0, #16
20000c76:	f7ff ffbf 	bl	20000bf8 <graphic_ctrl_bit_clear>
            break;
20000c7a:	e00a      	b.n	20000c92 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS2);
20000c7c:	2010      	movs	r0, #16
20000c7e:	f7ff ff99 	bl	20000bb4 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS1);
20000c82:	2008      	movs	r0, #8
20000c84:	f7ff ffb8 	bl	20000bf8 <graphic_ctrl_bit_clear>
            break;
20000c88:	e003      	b.n	20000c92 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
20000c8a:	2018      	movs	r0, #24
20000c8c:	f7ff ff92 	bl	20000bb4 <graphic_ctrl_bit_set>
            break;
20000c90:	46c0      	nop			; (mov r8, r8)
}
20000c92:	46c0      	nop			; (mov r8, r8)
20000c94:	46bd      	mov	sp, r7
20000c96:	b002      	add	sp, #8
20000c98:	bd80      	pop	{r7, pc}

20000c9a <graphic_wait_ready>:

void graphic_wait_ready() {
20000c9a:	b580      	push	{r7, lr}
20000c9c:	b082      	sub	sp, #8
20000c9e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(BITMASK_E);
20000ca0:	2040      	movs	r0, #64	; 0x40
20000ca2:	f7ff ffa9 	bl	20000bf8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
20000ca6:	4b15      	ldr	r3, [pc, #84]	; (20000cfc <graphic_wait_ready+0x62>)
20000ca8:	4a15      	ldr	r2, [pc, #84]	; (20000d00 <graphic_wait_ready+0x66>)
20000caa:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RW);
20000cac:	2002      	movs	r0, #2
20000cae:	f7ff ff81 	bl	20000bb4 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(BITMASK_RS);
20000cb2:	2001      	movs	r0, #1
20000cb4:	f7ff ffa0 	bl	20000bf8 <graphic_ctrl_bit_clear>
    delay_500ns();
20000cb8:	f000 fb54 	bl	20001364 <delay_500ns>
    
    uint8_t c;
    do {
        graphic_ctrl_bit_set(BITMASK_E);
20000cbc:	2040      	movs	r0, #64	; 0x40
20000cbe:	f7ff ff79 	bl	20000bb4 <graphic_ctrl_bit_set>
        delay_500ns();
20000cc2:	f000 fb4f 	bl	20001364 <delay_500ns>
        c = GPIO_E->idr_high & LCD_BUSY;
20000cc6:	4b0d      	ldr	r3, [pc, #52]	; (20000cfc <graphic_wait_ready+0x62>)
20000cc8:	7c5b      	ldrb	r3, [r3, #17]
20000cca:	b2da      	uxtb	r2, r3
20000ccc:	1dfb      	adds	r3, r7, #7
20000cce:	217f      	movs	r1, #127	; 0x7f
20000cd0:	438a      	bics	r2, r1
20000cd2:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(BITMASK_E);
20000cd4:	2040      	movs	r0, #64	; 0x40
20000cd6:	f7ff ff8f 	bl	20000bf8 <graphic_ctrl_bit_clear>
        delay_500ns();
20000cda:	f000 fb43 	bl	20001364 <delay_500ns>
    }while(c);
20000cde:	1dfb      	adds	r3, r7, #7
20000ce0:	781b      	ldrb	r3, [r3, #0]
20000ce2:	2b00      	cmp	r3, #0
20000ce4:	d1ea      	bne.n	20000cbc <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(BITMASK_E);
20000ce6:	2040      	movs	r0, #64	; 0x40
20000ce8:	f7ff ff64 	bl	20000bb4 <graphic_ctrl_bit_set>
    GPIO_E->moder = 0x55555555;
20000cec:	4b03      	ldr	r3, [pc, #12]	; (20000cfc <graphic_wait_ready+0x62>)
20000cee:	4a05      	ldr	r2, [pc, #20]	; (20000d04 <graphic_wait_ready+0x6a>)
20000cf0:	601a      	str	r2, [r3, #0]
}
20000cf2:	46c0      	nop			; (mov r8, r8)
20000cf4:	46bd      	mov	sp, r7
20000cf6:	b002      	add	sp, #8
20000cf8:	bd80      	pop	{r7, pc}
20000cfa:	46c0      	nop			; (mov r8, r8)
20000cfc:	40021000 	andmi	r1, r2, r0
20000d00:	00005555 	andeq	r5, r0, r5, asr r5
20000d04:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d08 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
20000d08:	b580      	push	{r7, lr}
20000d0a:	b084      	sub	sp, #16
20000d0c:	af00      	add	r7, sp, #0
20000d0e:	0002      	movs	r2, r0
20000d10:	1dfb      	adds	r3, r7, #7
20000d12:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000d14:	2040      	movs	r0, #64	; 0x40
20000d16:	f7ff ff6f 	bl	20000bf8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
20000d1a:	4b1c      	ldr	r3, [pc, #112]	; (20000d8c <graphic_read+0x84>)
20000d1c:	4a1c      	ldr	r2, [pc, #112]	; (20000d90 <graphic_read+0x88>)
20000d1e:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RS | BITMASK_RW);
20000d20:	2003      	movs	r0, #3
20000d22:	f7ff ff47 	bl	20000bb4 <graphic_ctrl_bit_set>
    select_controller(controller);
20000d26:	1dfb      	adds	r3, r7, #7
20000d28:	781b      	ldrb	r3, [r3, #0]
20000d2a:	0018      	movs	r0, r3
20000d2c:	f7ff ff88 	bl	20000c40 <select_controller>
    delay_500ns();
20000d30:	f000 fb18 	bl	20001364 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000d34:	2040      	movs	r0, #64	; 0x40
20000d36:	f7ff ff3d 	bl	20000bb4 <graphic_ctrl_bit_set>
    delay_500ns();
20000d3a:	f000 fb13 	bl	20001364 <delay_500ns>
    uint8_t returnvalue = GPIO_E->idr_high;
20000d3e:	4a13      	ldr	r2, [pc, #76]	; (20000d8c <graphic_read+0x84>)
20000d40:	230f      	movs	r3, #15
20000d42:	18fb      	adds	r3, r7, r3
20000d44:	7c52      	ldrb	r2, [r2, #17]
20000d46:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000d48:	2040      	movs	r0, #64	; 0x40
20000d4a:	f7ff ff55 	bl	20000bf8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555;
20000d4e:	4b0f      	ldr	r3, [pc, #60]	; (20000d8c <graphic_read+0x84>)
20000d50:	4a10      	ldr	r2, [pc, #64]	; (20000d94 <graphic_read+0x8c>)
20000d52:	601a      	str	r2, [r3, #0]
    if(controller & BITMASK_CS1) {
20000d54:	1dfb      	adds	r3, r7, #7
20000d56:	781b      	ldrb	r3, [r3, #0]
20000d58:	2208      	movs	r2, #8
20000d5a:	4013      	ands	r3, r2
20000d5c:	d004      	beq.n	20000d68 <graphic_read+0x60>
        select_controller(BITMASK_CS1);
20000d5e:	2008      	movs	r0, #8
20000d60:	f7ff ff6e 	bl	20000c40 <select_controller>
        graphic_wait_ready();
20000d64:	f7ff ff99 	bl	20000c9a <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
20000d68:	1dfb      	adds	r3, r7, #7
20000d6a:	781b      	ldrb	r3, [r3, #0]
20000d6c:	2210      	movs	r2, #16
20000d6e:	4013      	ands	r3, r2
20000d70:	d004      	beq.n	20000d7c <graphic_read+0x74>
        select_controller(BITMASK_CS1);
20000d72:	2008      	movs	r0, #8
20000d74:	f7ff ff64 	bl	20000c40 <select_controller>
        graphic_wait_ready();
20000d78:	f7ff ff8f 	bl	20000c9a <graphic_wait_ready>
    }
    return returnvalue;
20000d7c:	230f      	movs	r3, #15
20000d7e:	18fb      	adds	r3, r7, r3
20000d80:	781b      	ldrb	r3, [r3, #0]
}
20000d82:	0018      	movs	r0, r3
20000d84:	46bd      	mov	sp, r7
20000d86:	b004      	add	sp, #16
20000d88:	bd80      	pop	{r7, pc}
20000d8a:	46c0      	nop			; (mov r8, r8)
20000d8c:	40021000 	andmi	r1, r2, r0
20000d90:	00005555 	andeq	r5, r0, r5, asr r5
20000d94:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d98 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000d98:	b580      	push	{r7, lr}
20000d9a:	b082      	sub	sp, #8
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	0002      	movs	r2, r0
20000da0:	1dfb      	adds	r3, r7, #7
20000da2:	701a      	strb	r2, [r3, #0]
20000da4:	1dbb      	adds	r3, r7, #6
20000da6:	1c0a      	adds	r2, r1, #0
20000da8:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_high = value;
20000daa:	4a1a      	ldr	r2, [pc, #104]	; (20000e14 <graphic_write+0x7c>)
20000dac:	1dfb      	adds	r3, r7, #7
20000dae:	781b      	ldrb	r3, [r3, #0]
20000db0:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
20000db2:	1dbb      	adds	r3, r7, #6
20000db4:	781b      	ldrb	r3, [r3, #0]
20000db6:	0018      	movs	r0, r3
20000db8:	f7ff ff42 	bl	20000c40 <select_controller>
    delay_500ns();
20000dbc:	f000 fad2 	bl	20001364 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000dc0:	2040      	movs	r0, #64	; 0x40
20000dc2:	f7ff fef7 	bl	20000bb4 <graphic_ctrl_bit_set>
    delay_500ns();
20000dc6:	f000 facd 	bl	20001364 <delay_500ns>
    graphic_ctrl_bit_clear(BITMASK_E);
20000dca:	2040      	movs	r0, #64	; 0x40
20000dcc:	f7ff ff14 	bl	20000bf8 <graphic_ctrl_bit_clear>
    if(controller & BITMASK_CS1) {
20000dd0:	1dbb      	adds	r3, r7, #6
20000dd2:	781b      	ldrb	r3, [r3, #0]
20000dd4:	2208      	movs	r2, #8
20000dd6:	4013      	ands	r3, r2
20000dd8:	d004      	beq.n	20000de4 <graphic_write+0x4c>
        select_controller(BITMASK_CS1);
20000dda:	2008      	movs	r0, #8
20000ddc:	f7ff ff30 	bl	20000c40 <select_controller>
        graphic_wait_ready();
20000de0:	f7ff ff5b 	bl	20000c9a <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
20000de4:	1dbb      	adds	r3, r7, #6
20000de6:	781b      	ldrb	r3, [r3, #0]
20000de8:	2210      	movs	r2, #16
20000dea:	4013      	ands	r3, r2
20000dec:	d004      	beq.n	20000df8 <graphic_write+0x60>
        select_controller(BITMASK_CS2);
20000dee:	2010      	movs	r0, #16
20000df0:	f7ff ff26 	bl	20000c40 <select_controller>
        graphic_wait_ready();
20000df4:	f7ff ff51 	bl	20000c9a <graphic_wait_ready>
    }
    GPIO_E->odr_high = 0;
20000df8:	4b06      	ldr	r3, [pc, #24]	; (20000e14 <graphic_write+0x7c>)
20000dfa:	2200      	movs	r2, #0
20000dfc:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(BITMASK_E);
20000dfe:	2040      	movs	r0, #64	; 0x40
20000e00:	f7ff fed8 	bl	20000bb4 <graphic_ctrl_bit_set>
    select_controller(0);
20000e04:	2000      	movs	r0, #0
20000e06:	f7ff ff1b 	bl	20000c40 <select_controller>
}
20000e0a:	46c0      	nop			; (mov r8, r8)
20000e0c:	46bd      	mov	sp, r7
20000e0e:	b002      	add	sp, #8
20000e10:	bd80      	pop	{r7, pc}
20000e12:	46c0      	nop			; (mov r8, r8)
20000e14:	40021000 	andmi	r1, r2, r0

20000e18 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
20000e18:	b580      	push	{r7, lr}
20000e1a:	b082      	sub	sp, #8
20000e1c:	af00      	add	r7, sp, #0
20000e1e:	0002      	movs	r2, r0
20000e20:	1dfb      	adds	r3, r7, #7
20000e22:	701a      	strb	r2, [r3, #0]
20000e24:	1dbb      	adds	r3, r7, #6
20000e26:	1c0a      	adds	r2, r1, #0
20000e28:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000e2a:	2040      	movs	r0, #64	; 0x40
20000e2c:	f7ff fee4 	bl	20000bf8 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000e30:	1dbb      	adds	r3, r7, #6
20000e32:	781b      	ldrb	r3, [r3, #0]
20000e34:	0018      	movs	r0, r3
20000e36:	f7ff ff03 	bl	20000c40 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
20000e3a:	2003      	movs	r0, #3
20000e3c:	f7ff fedc 	bl	20000bf8 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000e40:	1dbb      	adds	r3, r7, #6
20000e42:	781a      	ldrb	r2, [r3, #0]
20000e44:	1dfb      	adds	r3, r7, #7
20000e46:	781b      	ldrb	r3, [r3, #0]
20000e48:	0011      	movs	r1, r2
20000e4a:	0018      	movs	r0, r3
20000e4c:	f7ff ffa4 	bl	20000d98 <graphic_write>
}
20000e50:	46c0      	nop			; (mov r8, r8)
20000e52:	46bd      	mov	sp, r7
20000e54:	b002      	add	sp, #8
20000e56:	bd80      	pop	{r7, pc}

20000e58 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
20000e58:	b580      	push	{r7, lr}
20000e5a:	b082      	sub	sp, #8
20000e5c:	af00      	add	r7, sp, #0
20000e5e:	0002      	movs	r2, r0
20000e60:	1dfb      	adds	r3, r7, #7
20000e62:	701a      	strb	r2, [r3, #0]
20000e64:	1dbb      	adds	r3, r7, #6
20000e66:	1c0a      	adds	r2, r1, #0
20000e68:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000e6a:	2040      	movs	r0, #64	; 0x40
20000e6c:	f7ff fec4 	bl	20000bf8 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000e70:	1dbb      	adds	r3, r7, #6
20000e72:	781b      	ldrb	r3, [r3, #0]
20000e74:	0018      	movs	r0, r3
20000e76:	f7ff fee3 	bl	20000c40 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RW);
20000e7a:	2002      	movs	r0, #2
20000e7c:	f7ff febc 	bl	20000bf8 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(BITMASK_RS);
20000e80:	2001      	movs	r0, #1
20000e82:	f7ff fe97 	bl	20000bb4 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
20000e86:	1dbb      	adds	r3, r7, #6
20000e88:	781a      	ldrb	r2, [r3, #0]
20000e8a:	1dfb      	adds	r3, r7, #7
20000e8c:	781b      	ldrb	r3, [r3, #0]
20000e8e:	0011      	movs	r1, r2
20000e90:	0018      	movs	r0, r3
20000e92:	f7ff ff81 	bl	20000d98 <graphic_write>
}
20000e96:	46c0      	nop			; (mov r8, r8)
20000e98:	46bd      	mov	sp, r7
20000e9a:	b002      	add	sp, #8
20000e9c:	bd80      	pop	{r7, pc}

20000e9e <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
20000e9e:	b580      	push	{r7, lr}
20000ea0:	b082      	sub	sp, #8
20000ea2:	af00      	add	r7, sp, #0
20000ea4:	0002      	movs	r2, r0
20000ea6:	1dfb      	adds	r3, r7, #7
20000ea8:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000eaa:	1dfb      	adds	r3, r7, #7
20000eac:	781b      	ldrb	r3, [r3, #0]
20000eae:	0018      	movs	r0, r3
20000eb0:	f7ff ff2a 	bl	20000d08 <graphic_read>
    return graphic_read(controller);
20000eb4:	1dfb      	adds	r3, r7, #7
20000eb6:	781b      	ldrb	r3, [r3, #0]
20000eb8:	0018      	movs	r0, r3
20000eba:	f7ff ff25 	bl	20000d08 <graphic_read>
20000ebe:	0003      	movs	r3, r0
}
20000ec0:	0018      	movs	r0, r3
20000ec2:	46bd      	mov	sp, r7
20000ec4:	b002      	add	sp, #8
20000ec6:	bd80      	pop	{r7, pc}

20000ec8 <pixel>:

void pixel(uint8_t x, uint8_t y, bool set) {
20000ec8:	b5b0      	push	{r4, r5, r7, lr}
20000eca:	b084      	sub	sp, #16
20000ecc:	af00      	add	r7, sp, #0
20000ece:	0004      	movs	r4, r0
20000ed0:	0008      	movs	r0, r1
20000ed2:	0011      	movs	r1, r2
20000ed4:	1dfb      	adds	r3, r7, #7
20000ed6:	1c22      	adds	r2, r4, #0
20000ed8:	701a      	strb	r2, [r3, #0]
20000eda:	1dbb      	adds	r3, r7, #6
20000edc:	1c02      	adds	r2, r0, #0
20000ede:	701a      	strb	r2, [r3, #0]
20000ee0:	1d7b      	adds	r3, r7, #5
20000ee2:	1c0a      	adds	r2, r1, #0
20000ee4:	701a      	strb	r2, [r3, #0]
    // Create bitmask for the pixel
    uint8_t index, mask, controller;
    index = (y-1) / 8;
20000ee6:	1dbb      	adds	r3, r7, #6
20000ee8:	781b      	ldrb	r3, [r3, #0]
20000eea:	3b01      	subs	r3, #1
20000eec:	2b00      	cmp	r3, #0
20000eee:	da00      	bge.n	20000ef2 <pixel+0x2a>
20000ef0:	3307      	adds	r3, #7
20000ef2:	10db      	asrs	r3, r3, #3
20000ef4:	001a      	movs	r2, r3
20000ef6:	230d      	movs	r3, #13
20000ef8:	18fb      	adds	r3, r7, r3
20000efa:	701a      	strb	r2, [r3, #0]
    mask = 0x1 << ((y-1) % 8);
20000efc:	1dbb      	adds	r3, r7, #6
20000efe:	781b      	ldrb	r3, [r3, #0]
20000f00:	3b01      	subs	r3, #1
20000f02:	4a3e      	ldr	r2, [pc, #248]	; (20000ffc <pixel+0x134>)
20000f04:	4013      	ands	r3, r2
20000f06:	d504      	bpl.n	20000f12 <pixel+0x4a>
20000f08:	3b01      	subs	r3, #1
20000f0a:	2208      	movs	r2, #8
20000f0c:	4252      	negs	r2, r2
20000f0e:	4313      	orrs	r3, r2
20000f10:	3301      	adds	r3, #1
20000f12:	001a      	movs	r2, r3
20000f14:	2301      	movs	r3, #1
20000f16:	4093      	lsls	r3, r2
20000f18:	001a      	movs	r2, r3
20000f1a:	230f      	movs	r3, #15
20000f1c:	18fb      	adds	r3, r7, r3
20000f1e:	701a      	strb	r2, [r3, #0]
    if (x > 64) {
20000f20:	1dfb      	adds	r3, r7, #7
20000f22:	781b      	ldrb	r3, [r3, #0]
20000f24:	2b40      	cmp	r3, #64	; 0x40
20000f26:	d909      	bls.n	20000f3c <pixel+0x74>
        controller = BITMASK_CS2;
20000f28:	230e      	movs	r3, #14
20000f2a:	18fb      	adds	r3, r7, r3
20000f2c:	2210      	movs	r2, #16
20000f2e:	701a      	strb	r2, [r3, #0]
        x -= 65;
20000f30:	1dfb      	adds	r3, r7, #7
20000f32:	1dfa      	adds	r2, r7, #7
20000f34:	7812      	ldrb	r2, [r2, #0]
20000f36:	3a41      	subs	r2, #65	; 0x41
20000f38:	701a      	strb	r2, [r3, #0]
20000f3a:	e008      	b.n	20000f4e <pixel+0x86>
    }else {
        controller = BITMASK_CS1;
20000f3c:	230e      	movs	r3, #14
20000f3e:	18fb      	adds	r3, r7, r3
20000f40:	2208      	movs	r2, #8
20000f42:	701a      	strb	r2, [r3, #0]
        x--;
20000f44:	1dfb      	adds	r3, r7, #7
20000f46:	781a      	ldrb	r2, [r3, #0]
20000f48:	1dfb      	adds	r3, r7, #7
20000f4a:	3a01      	subs	r2, #1
20000f4c:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
20000f4e:	1dfb      	adds	r3, r7, #7
20000f50:	781b      	ldrb	r3, [r3, #0]
20000f52:	2240      	movs	r2, #64	; 0x40
20000f54:	4313      	orrs	r3, r2
20000f56:	b2da      	uxtb	r2, r3
20000f58:	250e      	movs	r5, #14
20000f5a:	197b      	adds	r3, r7, r5
20000f5c:	781b      	ldrb	r3, [r3, #0]
20000f5e:	0019      	movs	r1, r3
20000f60:	0010      	movs	r0, r2
20000f62:	f7ff ff59 	bl	20000e18 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000f66:	230d      	movs	r3, #13
20000f68:	18fb      	adds	r3, r7, r3
20000f6a:	781b      	ldrb	r3, [r3, #0]
20000f6c:	2248      	movs	r2, #72	; 0x48
20000f6e:	4252      	negs	r2, r2
20000f70:	4313      	orrs	r3, r2
20000f72:	b2da      	uxtb	r2, r3
20000f74:	197b      	adds	r3, r7, r5
20000f76:	781b      	ldrb	r3, [r3, #0]
20000f78:	0019      	movs	r1, r3
20000f7a:	0010      	movs	r0, r2
20000f7c:	f7ff ff4c 	bl	20000e18 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000f80:	230c      	movs	r3, #12
20000f82:	18fc      	adds	r4, r7, r3
20000f84:	197b      	adds	r3, r7, r5
20000f86:	781b      	ldrb	r3, [r3, #0]
20000f88:	0018      	movs	r0, r3
20000f8a:	f7ff ff88 	bl	20000e9e <graphic_read_data>
20000f8e:	0003      	movs	r3, r0
20000f90:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000f92:	1dfb      	adds	r3, r7, #7
20000f94:	781b      	ldrb	r3, [r3, #0]
20000f96:	2240      	movs	r2, #64	; 0x40
20000f98:	4313      	orrs	r3, r2
20000f9a:	b2da      	uxtb	r2, r3
20000f9c:	197b      	adds	r3, r7, r5
20000f9e:	781b      	ldrb	r3, [r3, #0]
20000fa0:	0019      	movs	r1, r3
20000fa2:	0010      	movs	r0, r2
20000fa4:	f7ff ff38 	bl	20000e18 <graphic_write_command>
    if (set) {
20000fa8:	1d7b      	adds	r3, r7, #5
20000faa:	781b      	ldrb	r3, [r3, #0]
20000fac:	2b00      	cmp	r3, #0
20000fae:	d009      	beq.n	20000fc4 <pixel+0xfc>
        mask |= temp;
20000fb0:	220f      	movs	r2, #15
20000fb2:	18bb      	adds	r3, r7, r2
20000fb4:	18b9      	adds	r1, r7, r2
20000fb6:	220c      	movs	r2, #12
20000fb8:	18ba      	adds	r2, r7, r2
20000fba:	7809      	ldrb	r1, [r1, #0]
20000fbc:	7812      	ldrb	r2, [r2, #0]
20000fbe:	430a      	orrs	r2, r1
20000fc0:	701a      	strb	r2, [r3, #0]
20000fc2:	e00d      	b.n	20000fe0 <pixel+0x118>
    }else {
        mask = ~mask & temp;
20000fc4:	210f      	movs	r1, #15
20000fc6:	187b      	adds	r3, r7, r1
20000fc8:	781b      	ldrb	r3, [r3, #0]
20000fca:	b25b      	sxtb	r3, r3
20000fcc:	43db      	mvns	r3, r3
20000fce:	b25b      	sxtb	r3, r3
20000fd0:	220c      	movs	r2, #12
20000fd2:	18ba      	adds	r2, r7, r2
20000fd4:	7812      	ldrb	r2, [r2, #0]
20000fd6:	b252      	sxtb	r2, r2
20000fd8:	4013      	ands	r3, r2
20000fda:	b25a      	sxtb	r2, r3
20000fdc:	187b      	adds	r3, r7, r1
20000fde:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000fe0:	230e      	movs	r3, #14
20000fe2:	18fb      	adds	r3, r7, r3
20000fe4:	781a      	ldrb	r2, [r3, #0]
20000fe6:	230f      	movs	r3, #15
20000fe8:	18fb      	adds	r3, r7, r3
20000fea:	781b      	ldrb	r3, [r3, #0]
20000fec:	0011      	movs	r1, r2
20000fee:	0018      	movs	r0, r3
20000ff0:	f7ff ff32 	bl	20000e58 <graphic_write_data>
}
20000ff4:	46c0      	nop			; (mov r8, r8)
20000ff6:	46bd      	mov	sp, r7
20000ff8:	b004      	add	sp, #16
20000ffa:	bdb0      	pop	{r4, r5, r7, pc}
20000ffc:	80000007 	andhi	r0, r0, r7

20001000 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20001000:	b580      	push	{r7, lr}
20001002:	b082      	sub	sp, #8
20001004:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++ ) {
20001006:	1dfb      	adds	r3, r7, #7
20001008:	2200      	movs	r2, #0
2000100a:	701a      	strb	r2, [r3, #0]
2000100c:	e023      	b.n	20001056 <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page, BITMASK_CS1 | BITMASK_CS2);
2000100e:	1dfb      	adds	r3, r7, #7
20001010:	781b      	ldrb	r3, [r3, #0]
20001012:	2248      	movs	r2, #72	; 0x48
20001014:	4252      	negs	r2, r2
20001016:	4313      	orrs	r3, r2
20001018:	b2db      	uxtb	r3, r3
2000101a:	2118      	movs	r1, #24
2000101c:	0018      	movs	r0, r3
2000101e:	f7ff fefb 	bl	20000e18 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD  | 0, BITMASK_CS1 | BITMASK_CS2);
20001022:	2118      	movs	r1, #24
20001024:	2040      	movs	r0, #64	; 0x40
20001026:	f7ff fef7 	bl	20000e18 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
2000102a:	1dbb      	adds	r3, r7, #6
2000102c:	2200      	movs	r2, #0
2000102e:	701a      	strb	r2, [r3, #0]
20001030:	e008      	b.n	20001044 <graphic_clear_screen+0x44>
            graphic_write_data(0, BITMASK_CS1 | BITMASK_CS2);
20001032:	2118      	movs	r1, #24
20001034:	2000      	movs	r0, #0
20001036:	f7ff ff0f 	bl	20000e58 <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
2000103a:	1dbb      	adds	r3, r7, #6
2000103c:	781a      	ldrb	r2, [r3, #0]
2000103e:	1dbb      	adds	r3, r7, #6
20001040:	3201      	adds	r2, #1
20001042:	701a      	strb	r2, [r3, #0]
20001044:	1dbb      	adds	r3, r7, #6
20001046:	781b      	ldrb	r3, [r3, #0]
20001048:	2b3f      	cmp	r3, #63	; 0x3f
2000104a:	d9f2      	bls.n	20001032 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++ ) {
2000104c:	1dfb      	adds	r3, r7, #7
2000104e:	781a      	ldrb	r2, [r3, #0]
20001050:	1dfb      	adds	r3, r7, #7
20001052:	3201      	adds	r2, #1
20001054:	701a      	strb	r2, [r3, #0]
20001056:	1dfb      	adds	r3, r7, #7
20001058:	781b      	ldrb	r3, [r3, #0]
2000105a:	2b07      	cmp	r3, #7
2000105c:	d9d7      	bls.n	2000100e <graphic_clear_screen+0xe>
        }
    }
}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	46bd      	mov	sp, r7
20001062:	b002      	add	sp, #8
20001064:	bd80      	pop	{r7, pc}

20001066 <graphic_init>:


void graphic_init(void) {
20001066:	b580      	push	{r7, lr}
20001068:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(BITMASK_E);
2000106a:	2040      	movs	r0, #64	; 0x40
2000106c:	f7ff fda2 	bl	20000bb4 <graphic_ctrl_bit_set>
    delay_micros(10);
20001070:	200a      	movs	r0, #10
20001072:	f000 f989 	bl	20001388 <delay_micros>
    graphic_ctrl_bit_clear(BITMASK_CS1 | BITMASK_CS2 | BITMASK_RESET | BITMASK_E);
20001076:	2078      	movs	r0, #120	; 0x78
20001078:	f7ff fdbe 	bl	20000bf8 <graphic_ctrl_bit_clear>
    delay_millis(30);
2000107c:	201e      	movs	r0, #30
2000107e:	f000 f9a1 	bl	200013c4 <delay_millis>
    graphic_ctrl_bit_set(BITMASK_RESET);
20001082:	2020      	movs	r0, #32
20001084:	f7ff fd96 	bl	20000bb4 <graphic_ctrl_bit_set>
    
    // Toggle display
    graphic_write_command(LCD_OFF, BITMASK_CS1 | BITMASK_CS2);
20001088:	2118      	movs	r1, #24
2000108a:	203e      	movs	r0, #62	; 0x3e
2000108c:	f7ff fec4 	bl	20000e18 <graphic_write_command>
    graphic_write_command(LCD_ON, BITMASK_CS1 | BITMASK_CS2);
20001090:	2118      	movs	r1, #24
20001092:	203f      	movs	r0, #63	; 0x3f
20001094:	f7ff fec0 	bl	20000e18 <graphic_write_command>
    //Start = 0
    graphic_write_command(LCD_DISP_START, BITMASK_CS1 | BITMASK_CS2);
20001098:	2118      	movs	r1, #24
2000109a:	20c0      	movs	r0, #192	; 0xc0
2000109c:	f7ff febc 	bl	20000e18 <graphic_write_command>
    // Add = 0
    graphic_write_command(LCD_SET_ADD, BITMASK_CS1 | BITMASK_CS2);
200010a0:	2118      	movs	r1, #24
200010a2:	2040      	movs	r0, #64	; 0x40
200010a4:	f7ff feb8 	bl	20000e18 <graphic_write_command>
    // Page = 0
    graphic_write_command(LCD_SET_PAGE, BITMASK_CS1 | BITMASK_CS2);
200010a8:	2118      	movs	r1, #24
200010aa:	20b8      	movs	r0, #184	; 0xb8
200010ac:	f7ff feb4 	bl	20000e18 <graphic_write_command>
    // Deactivate both CS signals
    select_controller(0);
200010b0:	2000      	movs	r0, #0
200010b2:	f7ff fdc5 	bl	20000c40 <select_controller>
200010b6:	46c0      	nop			; (mov r8, r8)
200010b8:	46bd      	mov	sp, r7
200010ba:	bd80      	pop	{r7, pc}

200010bc <nb_delay_micro>:
#include "nb_delay.h"

volatile bool systick_flag;
volatile int32_t delay_count;

void nb_delay_micro(void) {
200010bc:	b580      	push	{r7, lr}
200010be:	af00      	add	r7, sp, #0
    systick_flag = false;
200010c0:	4b08      	ldr	r3, [pc, #32]	; (200010e4 <nb_delay_micro+0x28>)
200010c2:	2200      	movs	r2, #0
200010c4:	701a      	strb	r2, [r3, #0]
    SysTick->ctrl = 0;
200010c6:	4b08      	ldr	r3, [pc, #32]	; (200010e8 <nb_delay_micro+0x2c>)
200010c8:	2200      	movs	r2, #0
200010ca:	601a      	str	r2, [r3, #0]
    SysTick->load = 168-1;
200010cc:	4b06      	ldr	r3, [pc, #24]	; (200010e8 <nb_delay_micro+0x2c>)
200010ce:	22a7      	movs	r2, #167	; 0xa7
200010d0:	605a      	str	r2, [r3, #4]
    SysTick->val = 0;
200010d2:	4b05      	ldr	r3, [pc, #20]	; (200010e8 <nb_delay_micro+0x2c>)
200010d4:	2200      	movs	r2, #0
200010d6:	609a      	str	r2, [r3, #8]
    SysTick->ctrl = 7;
200010d8:	4b03      	ldr	r3, [pc, #12]	; (200010e8 <nb_delay_micro+0x2c>)
200010da:	2207      	movs	r2, #7
200010dc:	601a      	str	r2, [r3, #0]
}
200010de:	46c0      	nop			; (mov r8, r8)
200010e0:	46bd      	mov	sp, r7
200010e2:	bd80      	pop	{r7, pc}
200010e4:	2000159c 	mulcs	r0, ip, r5
200010e8:	e000e010 	and	lr, r0, r0, lsl r0

200010ec <systick_irq_handler>:

void systick_irq_handler(void) {
200010ec:	b580      	push	{r7, lr}
200010ee:	af00      	add	r7, sp, #0
    delay_count--;
200010f0:	4b0a      	ldr	r3, [pc, #40]	; (2000111c <systick_irq_handler+0x30>)
200010f2:	681b      	ldr	r3, [r3, #0]
200010f4:	1e5a      	subs	r2, r3, #1
200010f6:	4b09      	ldr	r3, [pc, #36]	; (2000111c <systick_irq_handler+0x30>)
200010f8:	601a      	str	r2, [r3, #0]
    if (delay_count) {
200010fa:	4b08      	ldr	r3, [pc, #32]	; (2000111c <systick_irq_handler+0x30>)
200010fc:	681b      	ldr	r3, [r3, #0]
200010fe:	2b00      	cmp	r3, #0
20001100:	d002      	beq.n	20001108 <systick_irq_handler+0x1c>
        nb_delay_micro();
20001102:	f7ff ffdb 	bl	200010bc <nb_delay_micro>
    }else {
        systick_flag = true;
		SysTick->ctrl = 0;
    }
}
20001106:	e005      	b.n	20001114 <systick_irq_handler+0x28>
        systick_flag = true;
20001108:	4b05      	ldr	r3, [pc, #20]	; (20001120 <systick_irq_handler+0x34>)
2000110a:	2201      	movs	r2, #1
2000110c:	701a      	strb	r2, [r3, #0]
		SysTick->ctrl = 0;
2000110e:	4b05      	ldr	r3, [pc, #20]	; (20001124 <systick_irq_handler+0x38>)
20001110:	2200      	movs	r2, #0
20001112:	601a      	str	r2, [r3, #0]
}
20001114:	46c0      	nop			; (mov r8, r8)
20001116:	46bd      	mov	sp, r7
20001118:	bd80      	pop	{r7, pc}
2000111a:	46c0      	nop			; (mov r8, r8)
2000111c:	20001598 	mulcs	r0, r8, r5
20001120:	2000159c 	mulcs	r0, ip, r5
20001124:	e000e010 	and	lr, r0, r0, lsl r0

20001128 <nb_init_delay>:

void nb_init_delay(void) {
20001128:	b580      	push	{r7, lr}
2000112a:	af00      	add	r7, sp, #0
    *((void (**)(void)) 0x2001C03C) = systick_irq_handler;
2000112c:	4b04      	ldr	r3, [pc, #16]	; (20001140 <nb_init_delay+0x18>)
2000112e:	4a05      	ldr	r2, [pc, #20]	; (20001144 <nb_init_delay+0x1c>)
20001130:	601a      	str	r2, [r3, #0]
    systick_flag = false;
20001132:	4b05      	ldr	r3, [pc, #20]	; (20001148 <nb_init_delay+0x20>)
20001134:	2200      	movs	r2, #0
20001136:	701a      	strb	r2, [r3, #0]
}
20001138:	46c0      	nop			; (mov r8, r8)
2000113a:	46bd      	mov	sp, r7
2000113c:	bd80      	pop	{r7, pc}
2000113e:	46c0      	nop			; (mov r8, r8)
20001140:	2001c03c 	andcs	ip, r1, ip, lsr r0
20001144:	200010ed 	andcs	r1, r0, sp, ror #1
20001148:	2000159c 	mulcs	r0, ip, r5

2000114c <nb_delay>:

void nb_delay(uint32_t us) {
2000114c:	b580      	push	{r7, lr}
2000114e:	b082      	sub	sp, #8
20001150:	af00      	add	r7, sp, #0
20001152:	6078      	str	r0, [r7, #4]
    delay_count = us;
20001154:	687a      	ldr	r2, [r7, #4]
20001156:	4b04      	ldr	r3, [pc, #16]	; (20001168 <nb_delay+0x1c>)
20001158:	601a      	str	r2, [r3, #0]
    nb_delay_micro();
2000115a:	f7ff ffaf 	bl	200010bc <nb_delay_micro>
}
2000115e:	46c0      	nop			; (mov r8, r8)
20001160:	46bd      	mov	sp, r7
20001162:	b002      	add	sp, #8
20001164:	bd80      	pop	{r7, pc}
20001166:	46c0      	nop			; (mov r8, r8)
20001168:	20001598 	mulcs	r0, r8, r5

2000116c <init_GPIO>:
2000116c:	6001      	str	r1, [r0, #0]
2000116e:	4770      	bx	lr

20001170 <GPIO_split_mode>:
20001170:	424b      	negs	r3, r1
20001172:	4159      	adcs	r1, r3
20001174:	4b05      	ldr	r3, [pc, #20]	; (2000118c <GPIO_split_mode+0x1c>)
20001176:	4249      	negs	r1, r1
20001178:	4019      	ands	r1, r3
2000117a:	4b05      	ldr	r3, [pc, #20]	; (20001190 <GPIO_split_mode+0x20>)
2000117c:	469c      	mov	ip, r3
2000117e:	4461      	add	r1, ip
20001180:	2a00      	cmp	r2, #0
20001182:	d001      	beq.n	20001188 <GPIO_split_mode+0x18>
20001184:	4b03      	ldr	r3, [pc, #12]	; (20001194 <GPIO_split_mode+0x24>)
20001186:	4319      	orrs	r1, r3
20001188:	6001      	str	r1, [r0, #0]
2000118a:	4770      	bx	lr
2000118c:	aaab0000 	bge	1eac1194 <startup-0x153ee6c>
20001190:	55550000 	ldrbpl	r0, [r5, #-0]
20001194:	00005555 	andeq	r5, r0, r5, asr r5

20001198 <GPIO_output>:
20001198:	4b01      	ldr	r3, [pc, #4]	; (200011a0 <GPIO_output+0x8>)
2000119a:	6003      	str	r3, [r0, #0]
2000119c:	4770      	bx	lr
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200011a4 <GPIO_input>:
200011a4:	2300      	movs	r3, #0
200011a6:	6003      	str	r3, [r0, #0]
200011a8:	4770      	bx	lr
200011aa:	46c0      	nop			; (mov r8, r8)

200011ac <GPIO_clock_start>:
200011ac:	2218      	movs	r2, #24
200011ae:	4b01      	ldr	r3, [pc, #4]	; (200011b4 <GPIO_clock_start+0x8>)
200011b0:	601a      	str	r2, [r3, #0]
200011b2:	4770      	bx	lr
200011b4:	40023830 	andmi	r3, r2, r0, lsr r8

200011b8 <GPIO_init_keypad>:
200011b8:	b570      	push	{r4, r5, r6, lr}
200011ba:	2900      	cmp	r1, #0
200011bc:	d113      	bne.n	200011e6 <GPIO_init_keypad+0x2e>
200011be:	23ff      	movs	r3, #255	; 0xff
200011c0:	26aa      	movs	r6, #170	; 0xaa
200011c2:	25aa      	movs	r5, #170	; 0xaa
200011c4:	4c0c      	ldr	r4, [pc, #48]	; (200011f8 <GPIO_init_keypad+0x40>)
200011c6:	310f      	adds	r1, #15
200011c8:	021b      	lsls	r3, r3, #8
200011ca:	01f6      	lsls	r6, r6, #7
200011cc:	6802      	ldr	r2, [r0, #0]
200011ce:	4022      	ands	r2, r4
200011d0:	4332      	orrs	r2, r6
200011d2:	6002      	str	r2, [r0, #0]
200011d4:	8882      	ldrh	r2, [r0, #4]
200011d6:	401a      	ands	r2, r3
200011d8:	430a      	orrs	r2, r1
200011da:	8082      	strh	r2, [r0, #4]
200011dc:	68c3      	ldr	r3, [r0, #12]
200011de:	4023      	ands	r3, r4
200011e0:	432b      	orrs	r3, r5
200011e2:	60c3      	str	r3, [r0, #12]
200011e4:	bd70      	pop	{r4, r5, r6, pc}
200011e6:	21f0      	movs	r1, #240	; 0xf0
200011e8:	25aa      	movs	r5, #170	; 0xaa
200011ea:	26aa      	movs	r6, #170	; 0xaa
200011ec:	23ff      	movs	r3, #255	; 0xff
200011ee:	4c03      	ldr	r4, [pc, #12]	; (200011fc <GPIO_init_keypad+0x44>)
200011f0:	0109      	lsls	r1, r1, #4
200011f2:	042d      	lsls	r5, r5, #16
200011f4:	05f6      	lsls	r6, r6, #23
200011f6:	e7e9      	b.n	200011cc <GPIO_init_keypad+0x14>
200011f8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200011fc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001200 <activate_row>:
20001200:	2308      	movs	r3, #8
20001202:	4093      	lsls	r3, r2
20001204:	b2db      	uxtb	r3, r3
20001206:	2900      	cmp	r1, #0
20001208:	d001      	beq.n	2000120e <activate_row+0xe>
2000120a:	7543      	strb	r3, [r0, #21]
2000120c:	4770      	bx	lr
2000120e:	7503      	strb	r3, [r0, #20]
20001210:	e7fc      	b.n	2000120c <activate_row+0xc>
20001212:	46c0      	nop			; (mov r8, r8)

20001214 <read_column>:
20001214:	2900      	cmp	r1, #0
20001216:	d00a      	beq.n	2000122e <read_column+0x1a>
20001218:	230f      	movs	r3, #15
2000121a:	7c42      	ldrb	r2, [r0, #17]
2000121c:	4013      	ands	r3, r2
2000121e:	2000      	movs	r0, #0
20001220:	2b00      	cmp	r3, #0
20001222:	d003      	beq.n	2000122c <read_column+0x18>
20001224:	3001      	adds	r0, #1
20001226:	b240      	sxtb	r0, r0
20001228:	085b      	lsrs	r3, r3, #1
2000122a:	d1fb      	bne.n	20001224 <read_column+0x10>
2000122c:	4770      	bx	lr
2000122e:	230f      	movs	r3, #15
20001230:	7c02      	ldrb	r2, [r0, #16]
20001232:	4013      	ands	r3, r2
20001234:	e7f3      	b.n	2000121e <read_column+0xa>
20001236:	46c0      	nop			; (mov r8, r8)

20001238 <key_value>:
20001238:	b5f0      	push	{r4, r5, r6, r7, lr}
2000123a:	b085      	sub	sp, #20
2000123c:	466a      	mov	r2, sp
2000123e:	0014      	movs	r4, r2
20001240:	4b0b      	ldr	r3, [pc, #44]	; (20001270 <key_value+0x38>)
20001242:	3801      	subs	r0, #1
20001244:	cbe0      	ldmia	r3!, {r5, r6, r7}
20001246:	c4e0      	stmia	r4!, {r5, r6, r7}
20001248:	681b      	ldr	r3, [r3, #0]
2000124a:	6023      	str	r3, [r4, #0]
2000124c:	b2c3      	uxtb	r3, r0
2000124e:	2b03      	cmp	r3, #3
20001250:	d80a      	bhi.n	20001268 <key_value+0x30>
20001252:	1e4b      	subs	r3, r1, #1
20001254:	b2db      	uxtb	r3, r3
20001256:	2b03      	cmp	r3, #3
20001258:	d806      	bhi.n	20001268 <key_value+0x30>
2000125a:	0080      	lsls	r0, r0, #2
2000125c:	1812      	adds	r2, r2, r0
2000125e:	2001      	movs	r0, #1
20001260:	1852      	adds	r2, r2, r1
20001262:	4240      	negs	r0, r0
20001264:	5610      	ldrsb	r0, [r2, r0]
20001266:	e000      	b.n	2000126a <key_value+0x32>
20001268:	2000      	movs	r0, #0
2000126a:	b005      	add	sp, #20
2000126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000126e:	46c0      	nop			; (mov r8, r8)
20001270:	2000161c 	andcs	r1, r0, ip, lsl r6

20001274 <GPIO_read_keypad>:
20001274:	2301      	movs	r3, #1
20001276:	b5f0      	push	{r4, r5, r6, r7, lr}
20001278:	46c6      	mov	lr, r8
2000127a:	0005      	movs	r5, r0
2000127c:	469c      	mov	ip, r3
2000127e:	2708      	movs	r7, #8
20001280:	260f      	movs	r6, #15
20001282:	b500      	push	{lr}
20001284:	b084      	sub	sp, #16
20001286:	003b      	movs	r3, r7
20001288:	4662      	mov	r2, ip
2000128a:	4093      	lsls	r3, r2
2000128c:	b2db      	uxtb	r3, r3
2000128e:	2900      	cmp	r1, #0
20001290:	d017      	beq.n	200012c2 <GPIO_read_keypad+0x4e>
20001292:	756b      	strb	r3, [r5, #21]
20001294:	7c68      	ldrb	r0, [r5, #17]
20001296:	4030      	ands	r0, r6
20001298:	2800      	cmp	r0, #0
2000129a:	d007      	beq.n	200012ac <GPIO_read_keypad+0x38>
2000129c:	2300      	movs	r3, #0
2000129e:	b2da      	uxtb	r2, r3
200012a0:	1c53      	adds	r3, r2, #1
200012a2:	b25b      	sxtb	r3, r3
200012a4:	0840      	lsrs	r0, r0, #1
200012a6:	d1fa      	bne.n	2000129e <GPIO_read_keypad+0x2a>
200012a8:	2b00      	cmp	r3, #0
200012aa:	d10e      	bne.n	200012ca <GPIO_read_keypad+0x56>
200012ac:	2301      	movs	r3, #1
200012ae:	4698      	mov	r8, r3
200012b0:	44c4      	add	ip, r8
200012b2:	4663      	mov	r3, ip
200012b4:	2b05      	cmp	r3, #5
200012b6:	d1e6      	bne.n	20001286 <GPIO_read_keypad+0x12>
200012b8:	2010      	movs	r0, #16
200012ba:	b004      	add	sp, #16
200012bc:	bc04      	pop	{r2}
200012be:	4690      	mov	r8, r2
200012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200012c2:	752b      	strb	r3, [r5, #20]
200012c4:	7c28      	ldrb	r0, [r5, #16]
200012c6:	4030      	ands	r0, r6
200012c8:	e7e6      	b.n	20001298 <GPIO_read_keypad+0x24>
200012ca:	46e8      	mov	r8, sp
200012cc:	4646      	mov	r6, r8
200012ce:	4d07      	ldr	r5, [pc, #28]	; (200012ec <GPIO_read_keypad+0x78>)
200012d0:	cd92      	ldmia	r5!, {r1, r4, r7}
200012d2:	c692      	stmia	r6!, {r1, r4, r7}
200012d4:	682d      	ldr	r5, [r5, #0]
200012d6:	6035      	str	r5, [r6, #0]
200012d8:	2a03      	cmp	r2, #3
200012da:	d8ee      	bhi.n	200012ba <GPIO_read_keypad+0x46>
200012dc:	4664      	mov	r4, ip
200012de:	3c01      	subs	r4, #1
200012e0:	00a4      	lsls	r4, r4, #2
200012e2:	4444      	add	r4, r8
200012e4:	18e3      	adds	r3, r4, r3
200012e6:	3b01      	subs	r3, #1
200012e8:	7818      	ldrb	r0, [r3, #0]
200012ea:	e7e6      	b.n	200012ba <GPIO_read_keypad+0x46>
200012ec:	2000161c 	andcs	r1, r0, ip, lsl r6

200012f0 <GPIO_init_seven_seg>:
200012f0:	1e4b      	subs	r3, r1, #1
200012f2:	4199      	sbcs	r1, r3
200012f4:	4b03      	ldr	r3, [pc, #12]	; (20001304 <GPIO_init_seven_seg+0x14>)
200012f6:	4249      	negs	r1, r1
200012f8:	4019      	ands	r1, r3
200012fa:	4b03      	ldr	r3, [pc, #12]	; (20001308 <GPIO_init_seven_seg+0x18>)
200012fc:	469c      	mov	ip, r3
200012fe:	4461      	add	r1, ip
20001300:	6001      	str	r1, [r0, #0]
20001302:	4770      	bx	lr
20001304:	5554aaab 	ldrbpl	sl, [r4, #-2731]	; 0xfffff555
20001308:	00005555 	andeq	r5, r0, r5, asr r5

2000130c <GPIO_put_seven_seg>:
2000130c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000130e:	b085      	sub	sp, #20
20001310:	466c      	mov	r4, sp
20001312:	468c      	mov	ip, r1
20001314:	0025      	movs	r5, r4
20001316:	4b09      	ldr	r3, [pc, #36]	; (2000133c <GPIO_put_seven_seg+0x30>)
20001318:	cbc2      	ldmia	r3!, {r1, r6, r7}
2000131a:	c5c2      	stmia	r5!, {r1, r6, r7}
2000131c:	4661      	mov	r1, ip
2000131e:	681b      	ldr	r3, [r3, #0]
20001320:	602b      	str	r3, [r5, #0]
20001322:	1e4b      	subs	r3, r1, #1
20001324:	4199      	sbcs	r1, r3
20001326:	1841      	adds	r1, r0, r1
20001328:	3114      	adds	r1, #20
2000132a:	2a0f      	cmp	r2, #15
2000132c:	d803      	bhi.n	20001336 <GPIO_put_seven_seg+0x2a>
2000132e:	5ca3      	ldrb	r3, [r4, r2]
20001330:	700b      	strb	r3, [r1, #0]
20001332:	b005      	add	sp, #20
20001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001336:	2300      	movs	r3, #0
20001338:	700b      	strb	r3, [r1, #0]
2000133a:	e7fa      	b.n	20001332 <GPIO_put_seven_seg+0x26>
2000133c:	2000162c 	andcs	r1, r0, ip, lsr #12

20001340 <delay_250ns>:
20001340:	2300      	movs	r3, #0
20001342:	2129      	movs	r1, #41	; 0x29
20001344:	4a06      	ldr	r2, [pc, #24]	; (20001360 <delay_250ns+0x20>)
20001346:	6013      	str	r3, [r2, #0]
20001348:	6051      	str	r1, [r2, #4]
2000134a:	2180      	movs	r1, #128	; 0x80
2000134c:	6093      	str	r3, [r2, #8]
2000134e:	3305      	adds	r3, #5
20001350:	6013      	str	r3, [r2, #0]
20001352:	0249      	lsls	r1, r1, #9
20001354:	6813      	ldr	r3, [r2, #0]
20001356:	420b      	tst	r3, r1
20001358:	d0fc      	beq.n	20001354 <delay_250ns+0x14>
2000135a:	2300      	movs	r3, #0
2000135c:	6013      	str	r3, [r2, #0]
2000135e:	4770      	bx	lr
20001360:	e000e010 	and	lr, r0, r0, lsl r0

20001364 <delay_500ns>:
20001364:	2300      	movs	r3, #0
20001366:	2153      	movs	r1, #83	; 0x53
20001368:	4a06      	ldr	r2, [pc, #24]	; (20001384 <delay_500ns+0x20>)
2000136a:	6013      	str	r3, [r2, #0]
2000136c:	6051      	str	r1, [r2, #4]
2000136e:	2180      	movs	r1, #128	; 0x80
20001370:	6093      	str	r3, [r2, #8]
20001372:	3305      	adds	r3, #5
20001374:	6013      	str	r3, [r2, #0]
20001376:	0249      	lsls	r1, r1, #9
20001378:	6813      	ldr	r3, [r2, #0]
2000137a:	420b      	tst	r3, r1
2000137c:	d0fc      	beq.n	20001378 <delay_500ns+0x14>
2000137e:	2300      	movs	r3, #0
20001380:	6013      	str	r3, [r2, #0]
20001382:	4770      	bx	lr
20001384:	e000e010 	and	lr, r0, r0, lsl r0

20001388 <delay_micros>:
20001388:	2280      	movs	r2, #128	; 0x80
2000138a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000138c:	2400      	movs	r4, #0
2000138e:	2700      	movs	r7, #0
20001390:	2653      	movs	r6, #83	; 0x53
20001392:	2505      	movs	r5, #5
20001394:	4b0a      	ldr	r3, [pc, #40]	; (200013c0 <delay_micros+0x38>)
20001396:	0a80      	lsrs	r0, r0, #10
20001398:	0252      	lsls	r2, r2, #9
2000139a:	601f      	str	r7, [r3, #0]
2000139c:	605e      	str	r6, [r3, #4]
2000139e:	609f      	str	r7, [r3, #8]
200013a0:	601d      	str	r5, [r3, #0]
200013a2:	6819      	ldr	r1, [r3, #0]
200013a4:	4211      	tst	r1, r2
200013a6:	d0fc      	beq.n	200013a2 <delay_micros+0x1a>
200013a8:	601c      	str	r4, [r3, #0]
200013aa:	601c      	str	r4, [r3, #0]
200013ac:	605e      	str	r6, [r3, #4]
200013ae:	609c      	str	r4, [r3, #8]
200013b0:	601d      	str	r5, [r3, #0]
200013b2:	6819      	ldr	r1, [r3, #0]
200013b4:	4211      	tst	r1, r2
200013b6:	d0fc      	beq.n	200013b2 <delay_micros+0x2a>
200013b8:	601c      	str	r4, [r3, #0]
200013ba:	3801      	subs	r0, #1
200013bc:	d2ed      	bcs.n	2000139a <delay_micros+0x12>
200013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
200013c0:	e000e010 	and	lr, r0, r0, lsl r0

200013c4 <delay_millis>:
200013c4:	0002      	movs	r2, r0
200013c6:	b510      	push	{r4, lr}
200013c8:	0140      	lsls	r0, r0, #5
200013ca:	1a80      	subs	r0, r0, r2
200013cc:	0080      	lsls	r0, r0, #2
200013ce:	1880      	adds	r0, r0, r2
200013d0:	00c0      	lsls	r0, r0, #3
200013d2:	f7ff ffd9 	bl	20001388 <delay_micros>
200013d6:	bd10      	pop	{r4, pc}

200013d8 <__divsi3>:
200013d8:	e3510000 	cmp	r1, #0
200013dc:	0a000043 	beq	200014f0 <.divsi3_skip_div0_test+0x110>

200013e0 <.divsi3_skip_div0_test>:
200013e0:	e020c001 	eor	ip, r0, r1
200013e4:	42611000 	rsbmi	r1, r1, #0
200013e8:	e2512001 	subs	r2, r1, #1
200013ec:	0a000027 	beq	20001490 <.divsi3_skip_div0_test+0xb0>
200013f0:	e1b03000 	movs	r3, r0
200013f4:	42603000 	rsbmi	r3, r0, #0
200013f8:	e1530001 	cmp	r3, r1
200013fc:	9a000026 	bls	2000149c <.divsi3_skip_div0_test+0xbc>
20001400:	e1110002 	tst	r1, r2
20001404:	0a000028 	beq	200014ac <.divsi3_skip_div0_test+0xcc>
20001408:	e311020e 	tst	r1, #-536870912	; 0xe0000000
2000140c:	01a01181 	lsleq	r1, r1, #3
20001410:	03a02008 	moveq	r2, #8
20001414:	13a02001 	movne	r2, #1
20001418:	e3510201 	cmp	r1, #268435456	; 0x10000000
2000141c:	31510003 	cmpcc	r1, r3
20001420:	31a01201 	lslcc	r1, r1, #4
20001424:	31a02202 	lslcc	r2, r2, #4
20001428:	3afffffa 	bcc	20001418 <.divsi3_skip_div0_test+0x38>
2000142c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
20001430:	31510003 	cmpcc	r1, r3
20001434:	31a01081 	lslcc	r1, r1, #1
20001438:	31a02082 	lslcc	r2, r2, #1
2000143c:	3afffffa 	bcc	2000142c <.divsi3_skip_div0_test+0x4c>
20001440:	e3a00000 	mov	r0, #0
20001444:	e1530001 	cmp	r3, r1
20001448:	20433001 	subcs	r3, r3, r1
2000144c:	21800002 	orrcs	r0, r0, r2
20001450:	e15300a1 	cmp	r3, r1, lsr #1
20001454:	204330a1 	subcs	r3, r3, r1, lsr #1
20001458:	218000a2 	orrcs	r0, r0, r2, lsr #1
2000145c:	e1530121 	cmp	r3, r1, lsr #2
20001460:	20433121 	subcs	r3, r3, r1, lsr #2
20001464:	21800122 	orrcs	r0, r0, r2, lsr #2
20001468:	e15301a1 	cmp	r3, r1, lsr #3
2000146c:	204331a1 	subcs	r3, r3, r1, lsr #3
20001470:	218001a2 	orrcs	r0, r0, r2, lsr #3
20001474:	e3530000 	cmp	r3, #0
20001478:	11b02222 	lsrsne	r2, r2, #4
2000147c:	11a01221 	lsrne	r1, r1, #4
20001480:	1affffef 	bne	20001444 <.divsi3_skip_div0_test+0x64>
20001484:	e35c0000 	cmp	ip, #0
20001488:	42600000 	rsbmi	r0, r0, #0
2000148c:	e12fff1e 	bx	lr
20001490:	e13c0000 	teq	ip, r0
20001494:	42600000 	rsbmi	r0, r0, #0
20001498:	e12fff1e 	bx	lr
2000149c:	33a00000 	movcc	r0, #0
200014a0:	01a00fcc 	asreq	r0, ip, #31
200014a4:	03800001 	orreq	r0, r0, #1
200014a8:	e12fff1e 	bx	lr
200014ac:	e3510801 	cmp	r1, #65536	; 0x10000
200014b0:	21a01821 	lsrcs	r1, r1, #16
200014b4:	23a02010 	movcs	r2, #16
200014b8:	33a02000 	movcc	r2, #0
200014bc:	e3510c01 	cmp	r1, #256	; 0x100
200014c0:	21a01421 	lsrcs	r1, r1, #8
200014c4:	22822008 	addcs	r2, r2, #8
200014c8:	e3510010 	cmp	r1, #16
200014cc:	21a01221 	lsrcs	r1, r1, #4
200014d0:	22822004 	addcs	r2, r2, #4
200014d4:	e3510004 	cmp	r1, #4
200014d8:	82822003 	addhi	r2, r2, #3
200014dc:	908220a1 	addls	r2, r2, r1, lsr #1
200014e0:	e35c0000 	cmp	ip, #0
200014e4:	e1a00233 	lsr	r0, r3, r2
200014e8:	42600000 	rsbmi	r0, r0, #0
200014ec:	e12fff1e 	bx	lr
200014f0:	e3500000 	cmp	r0, #0
200014f4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
200014f8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
200014fc:	ea000007 	b	20001520 <__aeabi_idiv0>

20001500 <__aeabi_idivmod>:
20001500:	e3510000 	cmp	r1, #0
20001504:	0afffff9 	beq	200014f0 <.divsi3_skip_div0_test+0x110>
20001508:	e92d4003 	push	{r0, r1, lr}
2000150c:	ebffffb3 	bl	200013e0 <.divsi3_skip_div0_test>
20001510:	e8bd4006 	pop	{r1, r2, lr}
20001514:	e0030092 	mul	r3, r2, r0
20001518:	e0411003 	sub	r1, r1, r3
2000151c:	e12fff1e 	bx	lr

20001520 <__aeabi_idiv0>:
20001520:	e12fff1e 	bx	lr

20001524 <GAME_OVER>:
20001524:	00000000 	andeq	r0, r0, r0

20001528 <food>:
20001528:	00000000 	andeq	r0, r0, r0

2000152c <arr>:
	...

20001590 <points>:
20001590:	00000000 	andeq	r0, r0, r0

20001594 <rngState>:
20001594:	00000000 	andeq	r0, r0, r0

20001598 <delay_count>:
20001598:	00000000 	andeq	r0, r0, r0

2000159c <systick_flag>:
2000159c:	00000000 	andeq	r0, r0, r0

200015a0 <buff>:
200015a0:	2000152c 	andcs	r1, r0, ip, lsr #10
	...
200015ac:	00000032 	andeq	r0, r0, r2, lsr r0

200015b0 <player>:
200015b0:	20400001 	subcs	r0, r0, r1
200015b4:	200015a0 	andcs	r1, r0, r0, lsr #11
200015b8:	200004c9 	andcs	r0, r0, r9, asr #9
200015bc:	20000669 	andcs	r0, r0, r9, ror #12
200015c0:	20000689 	andcs	r0, r0, r9, lsl #13
200015c4:	200006bf 			; <UNDEFINED> instruction: 0x200006bf
200015c8:	0a030201 	beq	200c1dd4 <player+0xc0824>
200015cc:	0b060504 	bleq	201829e4 <player+0x181434>
200015d0:	0c090807 	stceq	8, cr0, [r9], {7}
200015d4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200015a4 <buff+0x4>
200015d8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
200015dc:	203a6874 	eorscs	r6, sl, r4, ror r8
200015e0:	00000000 	andeq	r0, r0, r0
200015e4:	00002040 	andeq	r2, r0, r0, asr #32
200015e8:	0000203f 	andeq	r2, r0, pc, lsr r0
200015ec:	73657250 	cmnvc	r5, #80, 4
200015f0:	20352073 	eorscs	r2, r5, r3, ror r0
200015f4:	70206f74 	eorvc	r6, r0, r4, ror pc
200015f8:	0079616c 	rsbseq	r6, r9, ip, ror #2
200015fc:	69616761 	stmdbvs	r1!, {r0, r5, r6, r8, r9, sl, sp, lr}^
20001600:	0000216e 	andeq	r2, r0, lr, ror #2
20001604:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
20001608:	203a6874 	eorscs	r6, sl, r4, ror r8
2000160c:	00000031 	andeq	r0, r0, r1, lsr r0
20001610:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
20001614:	45564f20 	ldrbmi	r4, [r6, #-3872]	; 0xfffff0e0
20001618:	00002152 	andeq	r2, r0, r2, asr r1
2000161c:	0a030201 	beq	200c1e28 <player+0xc0878>
20001620:	0b060504 	bleq	20182a38 <player+0x181488>
20001624:	0c090807 	stceq	8, cr0, [r9], {7}
20001628:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200015f8 <player+0x48>
2000162c:	4f5b063f 	svcmi	0x005b063f
20001630:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001634:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001638:	71795e39 	cmnvc	r9, r9, lsr lr
2000163c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000011b 	andeq	r0, r0, fp, lsl r1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000006 	andeq	r0, r0, r6
      10:	0000d70c 	andeq	sp, r0, ip, lsl #14
      14:	00012000 	andeq	r2, r1, r0
      18:	00001000 	andeq	r1, r0, r0
      1c:	0000a820 	andeq	sl, r0, r0, lsr #16
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000080 	andeq	r0, r0, r0, lsl #1
      2c:	7e080102 	adfvce	f0, f0, f2
      30:	02000000 	andeq	r0, r0, #0
      34:	01040502 	tsteq	r4, r2, lsl #10
      38:	02020000 	andeq	r0, r2, #0
      3c:	00009407 	andeq	r9, r0, r7, lsl #8
      40:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      44:	000000ce 	andeq	r0, r0, lr, asr #1
      48:	0000a703 	andeq	sl, r0, r3, lsl #14
      4c:	534f0200 	movtpl	r0, #61952	; 0xf200
      50:	02000000 	andeq	r0, r0, #0
      54:	00b70704 	adcseq	r0, r7, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	0000c905 	andeq	ip, r0, r5, lsl #18
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	000000b2 	strheq	r0, [r0], -r2
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	00bc0704 	adcseq	r0, ip, r4, lsl #14
      74:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
      78:	03000000 	movweq	r0, #0
      7c:	00004830 	andeq	r4, r0, r0, lsr r8
      80:	010e0300 	mrseq	r0, ELR_hyp
      84:	05040000 	streq	r0, [r4, #-0]
      88:	00000076 	andeq	r0, r0, r6, ror r0
      8c:	00011805 	andeq	r1, r1, r5, lsl #16
      90:	760d0100 	strvc	r0, [sp], -r0, lsl #2
      94:	42000000 	andmi	r0, r0, #0
      98:	76200000 	strtvc	r0, [r0], -r0
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	0000d69c 	muleq	r0, ip, r6
      a4:	00000600 	andeq	r0, r0, r0, lsl #12
      a8:	0d010000 	stceq	0, cr0, [r1, #-0]
      ac:	000000d6 	ldrdeq	r0, [r0], -r6
      b0:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
      b4:	10010078 	andne	r0, r1, r8, ror r0
      b8:	00000081 	andeq	r0, r0, r1, lsl #1
      bc:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
      c0:	2000005e 	andcs	r0, r0, lr, asr r0
      c4:	0000004a 	andeq	r0, r0, sl, asr #32
      c8:	01006907 	tsteq	r0, r7, lsl #18
      cc:	00006811 	andeq	r6, r0, r1, lsl r8
      d0:	70910200 	addsvc	r0, r1, r0, lsl #4
      d4:	04090000 	streq	r0, [r9], #-0
      d8:	00000081 	andeq	r0, r0, r1, lsl #1
      dc:	00008c0a 	andeq	r8, r0, sl, lsl #24
      e0:	10050100 	andne	r0, r5, r0, lsl #2
      e4:	32200000 	eorcc	r0, r0, #0
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	0000069c 	muleq	r0, ip, r6
      f0:	05010000 	streq	r0, [r1, #-0]
      f4:	000000d6 	ldrdeq	r0, [r0], -r6
      f8:	0b6c9102 	bleq	1b24508 <startup-0x1e4dbaf8>
      fc:	05010073 	streq	r0, [r1, #-115]	; 0xffffff8d
     100:	00000076 	andeq	r0, r0, r6, ror r0
     104:	08689102 	stmdaeq	r8!, {r1, r8, ip, pc}^
     108:	20000020 	andcs	r0, r0, r0, lsr #32
     10c:	0000001a 	andeq	r0, r0, sl, lsl r0
     110:	01006907 	tsteq	r0, r7, lsl #18
     114:	00006808 	andeq	r6, r0, r8, lsl #16
     118:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     11c:	2d000000 	stccs	0, cr0, [r0, #-0]
     120:	04000003 	streq	r0, [r0], #-3
     124:	0000aa00 	andeq	sl, r0, r0, lsl #20
     128:	46010400 	strmi	r0, [r1], -r0, lsl #8
     12c:	0c000002 	stceq	0, cr0, [r0], {2}
     130:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     134:	00000120 	andeq	r0, r0, r0, lsr #2
     138:	200000b8 	strhcs	r0, [r0], -r8
     13c:	00000200 	andeq	r0, r0, r0, lsl #4
     140:	0000013f 	andeq	r0, r0, pc, lsr r1
     144:	00013c02 	andeq	r3, r1, r2, lsl #24
     148:	30290200 	eorcc	r0, r9, r0, lsl #4
     14c:	03000000 	movweq	r0, #0
     150:	00800601 	addeq	r0, r0, r1, lsl #12
     154:	45020000 	strmi	r0, [r2, #-0]
     158:	02000001 	andeq	r0, r0, #1
     15c:	0000422b 	andeq	r4, r0, fp, lsr #4
     160:	08010300 	stmdaeq	r1, {r8, r9}
     164:	0000007e 	andeq	r0, r0, lr, ror r0
     168:	04050203 	streq	r0, [r5], #-515	; 0xfffffdfd
     16c:	02000001 	andeq	r0, r0, #1
     170:	000001af 	andeq	r0, r0, pc, lsr #3
     174:	005b3902 	subseq	r3, fp, r2, lsl #18
     178:	02030000 	andeq	r0, r3, #0
     17c:	00009407 	andeq	r9, r0, r7, lsl #8
     180:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     184:	000000ce 	andeq	r0, r0, lr, asr #1
     188:	0000a702 	andeq	sl, r0, r2, lsl #14
     18c:	744f0200 	strbvc	r0, [pc], #-512	; 194 <startup-0x1ffffe6c>
     190:	03000000 	movweq	r0, #0
     194:	00b70704 	adcseq	r0, r7, r4, lsl #14
     198:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     19c:	0000c905 	andeq	ip, r0, r5, lsl #18
     1a0:	07080300 	streq	r0, [r8, -r0, lsl #6]
     1a4:	000000b2 	strheq	r0, [r0], -r2
     1a8:	69050404 	stmdbvs	r5, {r2, sl}
     1ac:	0300746e 	movweq	r7, #1134	; 0x46e
     1b0:	00bc0704 	adcseq	r0, ip, r4, lsl #14
     1b4:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
     1b8:	03000001 	movweq	r0, #1
     1bc:	00002514 	andeq	r2, r0, r4, lsl r5
     1c0:	01470200 	mrseq	r0, (UNDEF: 103)
     1c4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     1c8:	00000037 	andeq	r0, r0, r7, lsr r0
     1cc:	0001b102 	andeq	fp, r1, r2, lsl #2
     1d0:	50240300 	eorpl	r0, r4, r0, lsl #6
     1d4:	02000000 	andeq	r0, r0, #0
     1d8:	000000a9 	andeq	r0, r0, r9, lsr #1
     1dc:	00693003 	rsbeq	r3, r9, r3
     1e0:	aa050000 	bge	1401e8 <startup-0x1febfe18>
     1e4:	18000001 	stmdane	r0, {r0}
     1e8:	01540e04 	cmpeq	r4, r4, lsl #28
     1ec:	cc060000 	stcgt	0, cr0, [r6], {-0}
     1f0:	04000002 	streq	r0, [r0], #-2
     1f4:	0000b80f 	andeq	fp, r0, pc, lsl #16
     1f8:	77060000 	strvc	r0, [r6, -r0]
     1fc:	04000001 	streq	r0, [r0], #-1
     200:	0000ad10 	andeq	sl, r0, r0, lsl sp
     204:	ea060400 	b	18120c <startup-0x1fe7edf4>
     208:	04000002 	streq	r0, [r0], #-2
     20c:	0000ad11 	andeq	sl, r0, r1, lsl sp
     210:	5b060600 	blpl	181a18 <startup-0x1fe7e5e8>
     214:	04000001 	streq	r0, [r0], #-1
     218:	0000b812 	andeq	fp, r0, r2, lsl r8
     21c:	26060800 	strcs	r0, [r6], -r0, lsl #16
     220:	04000002 	streq	r0, [r0], #-2
     224:	0000b813 	andeq	fp, r0, r3, lsl r8
     228:	e2060c00 	and	r0, r6, #0, 24
     22c:	04000002 	streq	r0, [r0], #-2
     230:	0000a214 	andeq	sl, r0, r4, lsl r2
     234:	90061000 	andls	r1, r6, r0
     238:	04000001 	streq	r0, [r0], #-1
     23c:	0000a215 	andeq	sl, r0, r5, lsl r2
     240:	df061100 	svcle	0x00061100
     244:	04000001 	streq	r0, [r0], #-1
     248:	0000ad16 	andeq	sl, r0, r6, lsl sp
     24c:	ec061200 	sfm	f1, 4, [r6], {-0}
     250:	04000001 	streq	r0, [r0], #-1
     254:	0000a217 	andeq	sl, r0, r7, lsl r2
     258:	6e061400 	cfcpysvs	mvf1, mvf6
     25c:	04000001 	streq	r0, [r0], #-1
     260:	0000a218 	andeq	sl, r0, r8, lsl r2
     264:	f4061500 	vst3.8	{d1,d3,d5}, [r6], r0
     268:	04000001 	streq	r0, [r0], #-1
     26c:	0000ad19 	andeq	sl, r0, r9, lsl sp
     270:	02001600 	andeq	r1, r0, #0, 12
     274:	000001a5 	andeq	r0, r0, r5, lsr #3
     278:	00c31a04 	sbceq	r1, r3, r4, lsl #20
     27c:	54070000 	strpl	r0, [r7], #-0
     280:	08000001 	stmdaeq	r0, {r0}
     284:	00000201 	andeq	r0, r0, r1, lsl #4
     288:	00a23301 	adceq	r3, r2, r1, lsl #6
     28c:	02340000 	eorseq	r0, r4, #0
     290:	00842000 	addeq	r2, r4, r0
     294:	9c010000 	stcls	0, cr0, [r1], {-0}
     298:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     29c:	00024109 	andeq	r4, r2, r9, lsl #2
     2a0:	bc330100 	ldflts	f0, [r3], #-0
     2a4:	02000001 	andeq	r0, r0, #1
     2a8:	3c0a6491 	cfstrscc	mvf6, [sl], {145}	; 0x91
     2ac:	72200002 	eorvc	r0, r0, #2
     2b0:	0b000000 	bleq	2b8 <startup-0x1ffffd48>
     2b4:	00776f72 	rsbseq	r6, r7, r2, ror pc
     2b8:	00973401 	addseq	r3, r7, r1, lsl #8
     2bc:	91020000 	mrsls	r0, (UNDEF: 2)
     2c0:	02460a6f 	subeq	r0, r6, #454656	; 0x6f000
     2c4:	004a2000 	subeq	r2, sl, r0
     2c8:	1f0c0000 	svcne	0x000c0000
     2cc:	01000002 	tsteq	r0, r2
     2d0:	00009736 	andeq	r9, r0, r6, lsr r7
     2d4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     2d8:	0d000000 	stceq	0, cr0, [r0, #-0]
     2dc:	00015f04 	andeq	r5, r1, r4, lsl #30
     2e0:	01630e00 	cmneq	r3, r0, lsl #28
     2e4:	26010000 	strcs	r0, [r1], -r0
     2e8:	00000097 	muleq	r0, r7, r0
     2ec:	200001be 			; <UNDEFINED> instruction: 0x200001be
     2f0:	00000076 	andeq	r0, r0, r6, ror r0
     2f4:	02069c01 	andeq	r9, r6, #256	; 0x100
     2f8:	720f0000 	andvc	r0, pc, #0
     2fc:	0100776f 	tsteq	r0, pc, ror #14
     300:	00009726 	andeq	r9, r0, r6, lsr #14
     304:	5f910200 	svcpl	0x00910200
     308:	6c6f630f 	stclvs	3, cr6, [pc], #-60	; 2d4 <startup-0x1ffffd2c>
     30c:	97260100 	strls	r0, [r6, -r0, lsl #2]!
     310:	02000000 	andeq	r0, r0, #0
     314:	dd0c5e91 	stcle	14, cr5, [ip, #-580]	; 0xfffffdbc
     318:	01000002 	tsteq	r0, r2
     31c:	00020627 	andeq	r0, r2, r7, lsr #12
     320:	60910200 	addsvs	r0, r1, r0, lsl #4
     324:	00a21000 	adceq	r1, r2, r0
     328:	021c0000 	andseq	r0, ip, #0
     32c:	90110000 	andsls	r0, r1, r0
     330:	03000000 	movweq	r0, #0
     334:	00009011 	andeq	r9, r0, r1, lsl r0
     338:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
     33c:	00000219 	andeq	r0, r0, r9, lsl r2
     340:	00971b01 	addseq	r1, r7, r1, lsl #22
     344:	01640000 	cmneq	r4, r0
     348:	005a2000 	subseq	r2, sl, r0
     34c:	9c010000 	stcls	0, cr0, [r1], {-0}
     350:	00000260 	andeq	r0, r0, r0, ror #4
     354:	00024109 	andeq	r4, r2, r9, lsl #2
     358:	bc1b0100 	ldflts	f0, [fp], {-0}
     35c:	02000001 	andeq	r0, r0, #1
     360:	690b6c91 	stmdbvs	fp, {r0, r4, r7, sl, fp, sp, lr}
     364:	01007264 	tsteq	r0, r4, ror #4
     368:	0000a21c 	andeq	sl, r0, ip, lsl r2
     36c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     370:	6c6f630b 	stclvs	3, cr6, [pc], #-44	; 34c <startup-0x1ffffcb4>
     374:	971e0100 	ldrls	r0, [lr, -r0, lsl #2]
     378:	02000000 	andeq	r0, r0, #0
     37c:	12007691 	andne	r7, r0, #152043520	; 0x9100000
     380:	000002be 			; <UNDEFINED> instruction: 0x000002be
     384:	013c1701 	teqeq	ip, r1, lsl #14
     388:	00282000 	eoreq	r2, r8, r0
     38c:	9c010000 	stcls	0, cr0, [r1], {-0}
     390:	00000292 	muleq	r0, r2, r2
     394:	00024109 	andeq	r4, r2, r9, lsl #2
     398:	bc170100 	ldflts	f0, [r7], {-0}
     39c:	02000001 	andeq	r0, r0, #1
     3a0:	7e097491 	mcrvc	4, 0, r7, cr9, cr1, {4}
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009717 	andeq	r9, r0, r7, lsl r7
     3ac:	73910200 	orrsvc	r0, r1, #0, 4
     3b0:	01991300 	orrseq	r1, r9, r0, lsl #6
     3b4:	05010000 	streq	r0, [r1, #-0]
     3b8:	200000b8 	strhcs	r0, [r0], -r8
     3bc:	00000084 	andeq	r0, r0, r4, lsl #1
     3c0:	41099c01 	tstmi	r9, r1, lsl #24
     3c4:	01000002 	tsteq	r0, r2
     3c8:	0001bc05 	andeq	fp, r1, r5, lsl #24
     3cc:	4c910200 	lfmmi	f0, 4, [r1], {0}
     3d0:	00022c0c 	andeq	r2, r2, ip, lsl #24
     3d4:	b8060100 	stmdalt	r6, {r8}
     3d8:	02000000 	andeq	r0, r0, #0
     3dc:	0e0c6c91 	mcreq	12, 0, r6, cr12, cr1, {4}
     3e0:	01000002 	tsteq	r0, r2
     3e4:	0000b806 	andeq	fp, r0, r6, lsl #16
     3e8:	60910200 	addsvs	r0, r1, r0, lsl #4
     3ec:	0002370c 	andeq	r3, r2, ip, lsl #14
     3f0:	b8060100 	stmdalt	r6, {r8}
     3f4:	02000000 	andeq	r0, r0, #0
     3f8:	860c6891 			; <UNDEFINED> instruction: 0x860c6891
     3fc:	01000001 	tsteq	r0, r1
     400:	0000b806 	andeq	fp, r0, r6, lsl #16
     404:	5c910200 	lfmpl	f0, 4, [r1], {0}
     408:	00014f0c 	andeq	r4, r1, ip, lsl #30
     40c:	ad070100 	stfges	f0, [r7, #-0]
     410:	02000000 	andeq	r0, r0, #0
     414:	d20c6691 	andle	r6, ip, #152043520	; 0x9100000
     418:	01000002 	tsteq	r0, r2
     41c:	0000ad07 	andeq	sl, r0, r7, lsl #26
     420:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     424:	0002cc0c 	andeq	ip, r2, ip, lsl #24
     428:	b80f0100 	stmdalt	pc, {r8}	; <UNPREDICTABLE>
     42c:	02000000 	andeq	r0, r0, #0
     430:	770c5891 			; <UNDEFINED> instruction: 0x770c5891
     434:	01000001 	tsteq	r0, r1
     438:	0000ad11 	andeq	sl, r0, r1, lsl sp
     43c:	56910200 	ldrpl	r0, [r1], r0, lsl #4
     440:	0002260c 	andeq	r2, r2, ip, lsl #12
     444:	b8130100 	ldmdalt	r3, {r8}
     448:	02000000 	andeq	r0, r0, #0
     44c:	00005091 	muleq	r0, r1, r0
     450:	000005d9 	ldrdeq	r0, [r0], -r9
     454:	01d00004 	bicseq	r0, r0, r4
     458:	01040000 	mrseq	r0, (UNDEF: 4)
     45c:	00000006 	andeq	r0, r0, r6
     460:	0003b80c 	andeq	fp, r3, ip, lsl #16
     464:	00012000 	andeq	r2, r1, r0
	...
     470:	00029800 	andeq	r9, r2, r0, lsl #16
     474:	013c0200 	teqeq	ip, r0, lsl #4
     478:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
     47c:	00000030 	andeq	r0, r0, r0, lsr r0
     480:	80060103 	andhi	r0, r6, r3, lsl #2
     484:	02000000 	andeq	r0, r0, #0
     488:	00000145 	andeq	r0, r0, r5, asr #2
     48c:	00422b02 	subeq	r2, r2, r2, lsl #22
     490:	01030000 	mrseq	r0, (UNDEF: 3)
     494:	00007e08 	andeq	r7, r0, r8, lsl #28
     498:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     49c:	00000104 	andeq	r0, r0, r4, lsl #2
     4a0:	0001af02 	andeq	sl, r1, r2, lsl #30
     4a4:	5b390200 	blpl	e40cac <startup-0x1f1bf354>
     4a8:	03000000 	movweq	r0, #0
     4ac:	00940702 	addseq	r0, r4, r2, lsl #14
     4b0:	04030000 	streq	r0, [r3], #-0
     4b4:	0000ce05 	andeq	ip, r0, r5, lsl #28
     4b8:	00a70200 	adceq	r0, r7, r0, lsl #4
     4bc:	4f020000 	svcmi	0x00020000
     4c0:	00000074 	andeq	r0, r0, r4, ror r0
     4c4:	b7070403 	strlt	r0, [r7, -r3, lsl #8]
     4c8:	03000000 	movweq	r0, #0
     4cc:	00c90508 	sbceq	r0, r9, r8, lsl #10
     4d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     4d4:	0000b207 	andeq	fp, r0, r7, lsl #4
     4d8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     4dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4e0:	bc070403 	cfstrslt	mvf0, [r7], {3}
     4e4:	02000000 	andeq	r0, r0, #0
     4e8:	0000013e 	andeq	r0, r0, lr, lsr r1
     4ec:	00251403 	eoreq	r1, r5, r3, lsl #8
     4f0:	47020000 	strmi	r0, [r2, -r0]
     4f4:	03000001 	movweq	r0, #1
     4f8:	00003718 	andeq	r3, r0, r8, lsl r7
     4fc:	01b10200 			; <UNDEFINED> instruction: 0x01b10200
     500:	24030000 	strcs	r0, [r3], #-0
     504:	00000050 	andeq	r0, r0, r0, asr r0
     508:	0000a902 	andeq	sl, r0, r2, lsl #18
     50c:	69300300 	ldmdbvs	r0!, {r8, r9}
     510:	05000000 	streq	r0, [r0, #-0]
     514:	000001aa 	andeq	r0, r0, sl, lsr #3
     518:	540e0418 	strpl	r0, [lr], #-1048	; 0xfffffbe8
     51c:	06000001 	streq	r0, [r0], -r1
     520:	000002cc 	andeq	r0, r0, ip, asr #5
     524:	00b80f04 	adcseq	r0, r8, r4, lsl #30
     528:	06000000 	streq	r0, [r0], -r0
     52c:	00000177 	andeq	r0, r0, r7, ror r1
     530:	00ad1004 	adceq	r1, sp, r4
     534:	06040000 	streq	r0, [r4], -r0
     538:	000002ea 	andeq	r0, r0, sl, ror #5
     53c:	00ad1104 	adceq	r1, sp, r4, lsl #2
     540:	06060000 	streq	r0, [r6], -r0
     544:	0000015b 	andeq	r0, r0, fp, asr r1
     548:	00b81204 	adcseq	r1, r8, r4, lsl #4
     54c:	06080000 	streq	r0, [r8], -r0
     550:	00000226 	andeq	r0, r0, r6, lsr #4
     554:	00b81304 	adcseq	r1, r8, r4, lsl #6
     558:	060c0000 	streq	r0, [ip], -r0
     55c:	000002e2 	andeq	r0, r0, r2, ror #5
     560:	00a21404 	adceq	r1, r2, r4, lsl #8
     564:	06100000 	ldreq	r0, [r0], -r0
     568:	00000190 	muleq	r0, r0, r1
     56c:	00a21504 	adceq	r1, r2, r4, lsl #10
     570:	06110000 	ldreq	r0, [r1], -r0
     574:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     578:	00ad1604 	adceq	r1, sp, r4, lsl #12
     57c:	06120000 	ldreq	r0, [r2], -r0
     580:	000001ec 	andeq	r0, r0, ip, ror #3
     584:	00a21704 	adceq	r1, r2, r4, lsl #14
     588:	06140000 	ldreq	r0, [r4], -r0
     58c:	0000016e 	andeq	r0, r0, lr, ror #2
     590:	00a21804 	adceq	r1, r2, r4, lsl #16
     594:	06150000 	ldreq	r0, [r5], -r0
     598:	000001f4 	strdeq	r0, [r0], -r4
     59c:	00ad1904 	adceq	r1, sp, r4, lsl #18
     5a0:	00160000 	andseq	r0, r6, r0
     5a4:	0001a502 	andeq	sl, r1, r2, lsl #10
     5a8:	c31a0400 	tstgt	sl, #0, 8
     5ac:	02000000 	andeq	r0, r0, #0
     5b0:	0000010e 	andeq	r0, r0, lr, lsl #2
     5b4:	00b80505 	adcseq	r0, r8, r5, lsl #10
     5b8:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
     5bc:	02000003 	andeq	r0, r0, #3
     5c0:	018b2301 	orreq	r2, fp, r1, lsl #6
     5c4:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
     5c8:	a2240100 	eorge	r0, r4, #0, 2
     5cc:	00000000 	andeq	r0, r0, r0
     5d0:	01007907 	tsteq	r0, r7, lsl #18
     5d4:	0000a225 	andeq	sl, r0, r5, lsr #4
     5d8:	02000100 	andeq	r0, r0, #0, 2
     5dc:	0000033c 	andeq	r0, r0, ip, lsr r3
     5e0:	016a2601 	cmneq	sl, r1, lsl #12
     5e4:	35050000 	strcc	r0, [r5, #-0]
     5e8:	02000003 	andeq	r0, r0, #3
     5ec:	01b72801 			; <UNDEFINED> instruction: 0x01b72801
     5f0:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
     5f4:	97290100 	strls	r0, [r9, -r0, lsl #2]!
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	01007907 	tsteq	r0, r7, lsl #18
     600:	0000972a 	andeq	r9, r0, sl, lsr #14
     604:	02000100 	andeq	r0, r0, #0, 2
     608:	00000457 	andeq	r0, r0, r7, asr r4
     60c:	01962b01 	orrseq	r2, r6, r1, lsl #22
     610:	10080000 	andne	r0, r8, r0
     614:	01fb2d01 	mvnseq	r2, r1, lsl #26
     618:	0c060000 	stceq	0, cr0, [r6], {-0}
     61c:	01000003 	tsteq	r0, r3
     620:	0001fb2e 	andeq	pc, r1, lr, lsr #22
     624:	74070000 	strvc	r0, [r7], #-0
     628:	0100706f 	tsteq	r0, pc, rrx
     62c:	0000892f 	andeq	r8, r0, pc, lsr #18
     630:	7c060400 	cfstrsvc	mvf0, [r6], {-0}
     634:	01000003 	tsteq	r0, r3
     638:	00008930 	andeq	r8, r0, r0, lsr r9
     63c:	97060800 	strls	r0, [r6, -r0, lsl #16]
     640:	01000003 	tsteq	r0, r3
     644:	00008931 	andeq	r8, r0, r1, lsr r9
     648:	09000c00 	stmdbeq	r0, {sl, fp}
     64c:	00018b04 	andeq	r8, r1, r4, lsl #22
     650:	03030200 	movweq	r0, #12800	; 0x3200
     654:	32010000 	andcc	r0, r1, #0
     658:	000001c2 	andeq	r0, r0, r2, asr #3
     65c:	0003ad05 	andeq	sl, r3, r5, lsl #26
     660:	34011800 	strcc	r1, [r1], #-2048	; 0xfffff800
     664:	0000026d 	andeq	r0, r0, sp, ror #4
     668:	00044e06 	andeq	r4, r4, r6, lsl #28
     66c:	b7350100 	ldrlt	r0, [r5, -r0, lsl #2]!
     670:	00000001 	andeq	r0, r0, r1
     674:	00043e06 	andeq	r3, r4, r6, lsl #28
     678:	8b360100 	blhi	d80a80 <startup-0x1f27f580>
     67c:	02000001 	andeq	r0, r0, #1
     680:	00036306 	andeq	r6, r3, r6, lsl #6
     684:	6d370100 	ldfvss	f0, [r7, #-0]
     688:	04000002 	streq	r0, [r0], #-2
     68c:	00043406 	andeq	r3, r4, r6, lsl #8
     690:	84380100 	ldrthi	r0, [r8], #-256	; 0xffffff00
     694:	08000002 	stmdaeq	r0, {r1}
     698:	0003e306 	andeq	lr, r3, r6, lsl #6
     69c:	84390100 	ldrthi	r0, [r9], #-256	; 0xffffff00
     6a0:	0c000002 	stceq	0, cr0, [r0], {2}
     6a4:	00040d06 	andeq	r0, r4, r6, lsl #26
     6a8:	843a0100 	ldrthi	r0, [sl], #-256	; 0xffffff00
     6ac:	10000002 	andne	r0, r0, r2
     6b0:	00041c06 	andeq	r1, r4, r6, lsl #24
     6b4:	843b0100 	ldrthi	r0, [fp], #-256	; 0xffffff00
     6b8:	14000002 	strne	r0, [r0], #-2
     6bc:	01040900 	tsteq	r4, r0, lsl #18
     6c0:	0a000002 	beq	6d0 <startup-0x1ffff930>
     6c4:	0000027e 	andeq	r0, r0, lr, ror r2
     6c8:	00027e0b 	andeq	r7, r2, fp, lsl #28
     6cc:	04090000 	streq	r0, [r9], #-0
     6d0:	0000020c 	andeq	r0, r0, ip, lsl #4
     6d4:	02730409 	rsbseq	r0, r3, #150994944	; 0x9000000
     6d8:	03020000 	movweq	r0, #8192	; 0x2000
     6dc:	01000004 	tsteq	r0, r4
     6e0:	00020c3c 	andeq	r0, r2, ip, lsr ip
     6e4:	03a30c00 			; <UNDEFINED> instruction: 0x03a30c00
     6e8:	8a010000 	bhi	406f0 <startup-0x1ffbf910>
     6ec:	000002a6 	andeq	r0, r0, r6, lsr #5
     6f0:	15240305 	strne	r0, [r4, #-773]!	; 0xfffffcfb
     6f4:	01032000 	mrseq	r2, (UNDEF: 3)
     6f8:	0003b202 	andeq	fp, r3, r2, lsl #4
     6fc:	02a60d00 	adceq	r0, r6, #0, 26
     700:	5a0c0000 	bpl	300708 <startup-0x1fcff8f8>
     704:	01000003 	tsteq	r0, r3
     708:	00015f8b 	andeq	r5, r1, fp, lsl #31
     70c:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     710:	0c200015 	stceq	0, cr0, [r0], #-84	; 0xffffffac
     714:	0000034e 	andeq	r0, r0, lr, asr #6
     718:	018b8c01 	orreq	r8, fp, r1, lsl #24
     71c:	03050000 	movweq	r0, #20480	; 0x5000
     720:	20001528 	andcs	r1, r0, r8, lsr #10
     724:	0003530c 	andeq	r5, r3, ip, lsl #6
     728:	a28d0100 	addge	r0, sp, #0, 2
     72c:	05000000 	streq	r0, [r0, #-0]
     730:	00159003 	andseq	r9, r5, r3
     734:	02f60e20 	rscseq	r0, r6, #32, 28	; 0x200
     738:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
     73c:	000002ad 	andeq	r0, r0, sp, lsr #5
     740:	00018b0f 	andeq	r8, r1, pc, lsl #22
     744:	00030000 	andeq	r0, r3, r0
     748:	00901000 	addseq	r1, r0, r0
     74c:	00310000 	eorseq	r0, r1, r0
     750:	72726111 	rsbsvc	r6, r2, #1073741828	; 0x40000004
     754:	f0db0100 			; <UNDEFINED> instruction: 0xf0db0100
     758:	05000002 	streq	r0, [r0, #-2]
     75c:	00152c03 	andseq	r2, r5, r3, lsl #24
     760:	03180c20 	tsteq	r8, #32, 24	; 0x2000
     764:	dc010000 	stcle	0, cr0, [r1], {-0}
     768:	00000201 	andeq	r0, r0, r1, lsl #4
     76c:	15a00305 	strne	r0, [r0, #773]!	; 0x305
     770:	430c2000 	movwmi	r2, #49152	; 0xc000
     774:	01000004 	tsteq	r0, r4
     778:	00028ae3 	andeq	r8, r2, r3, ror #21
     77c:	b0030500 	andlt	r0, r3, r0, lsl #10
     780:	12200015 	eorne	r0, r0, #21
     784:	00000313 	andeq	r0, r0, r3, lsl r3
     788:	89010501 	stmdbhi	r1, {r0, r8, sl}
     78c:	ac000000 	stcge	0, cr0, [r0], {-0}
     790:	00200007 	eoreq	r0, r0, r7
     794:	01000001 	tsteq	r0, r1
     798:	0003659c 	muleq	r3, ip, r5
     79c:	08001300 	stmdaeq	r0, {r8, r9, ip}
     7a0:	00802000 	addeq	r2, r0, r0
     7a4:	63140000 	tstvs	r4, #0
     7a8:	011f0100 	tsteq	pc, r0, lsl #2
     7ac:	000000a2 	andeq	r0, r0, r2, lsr #1
     7b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     7b4:	03721500 	cmneq	r2, #0, 10
     7b8:	fa010000 	blx	407c0 <startup-0x1ffbf840>
     7bc:	20000744 	andcs	r0, r0, r4, asr #14
     7c0:	00000068 	andeq	r0, r0, r8, rrx
     7c4:	ee159c01 	cdp	12, 1, cr9, cr5, cr1, {0}
     7c8:	01000003 	tsteq	r0, r3
     7cc:	0006f4ee 	andeq	pc, r6, lr, ror #9
     7d0:	00005020 	andeq	r5, r0, r0, lsr #32
     7d4:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     7d8:	00000417 	andeq	r0, r0, r7, lsl r4
     7dc:	06bed201 	ldrteq	sp, [lr], r1, lsl #4
     7e0:	00362000 	eorseq	r2, r6, r0
     7e4:	9c010000 	stcls	0, cr0, [r1], {-0}
     7e8:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
     7ec:	00038317 	andeq	r8, r3, r7, lsl r3
     7f0:	b9d20100 	ldmiblt	r2, {r8}^
     7f4:	02000003 	andeq	r0, r0, #3
     7f8:	4a186c91 	bmi	61ba44 <startup-0x1f9e45bc>
     7fc:	01000004 	tsteq	r0, r4
     800:	0001b7d3 	ldrdeq	fp, [r1], -r3
     804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     808:	8a040900 	bhi	102c10 <startup-0x1fefd3f0>
     80c:	16000002 	strne	r0, [r0], -r2
     810:	00000408 	andeq	r0, r0, r8, lsl #8
     814:	0688cb01 	streq	ip, [r8], r1, lsl #22
     818:	00362000 	eorseq	r2, r6, r0
     81c:	9c010000 	stcls	0, cr0, [r1], {-0}
     820:	000003f1 	strdeq	r0, [r0], -r1
     824:	00038317 	andeq	r8, r3, r7, lsl r3
     828:	b9cb0100 	stmiblt	fp, {r8}^
     82c:	02000003 	andeq	r0, r0, #3
     830:	4a186c91 	bmi	61ba7c <startup-0x1f9e4584>
     834:	01000004 	tsteq	r0, r4
     838:	0001b7cc 	andeq	fp, r1, ip, asr #15
     83c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     840:	03de1900 	bicseq	r1, lr, #0, 18
     844:	c7010000 	strgt	r0, [r1, -r0]
     848:	20000668 	andcs	r0, r0, r8, ror #12
     84c:	00000020 	andeq	r0, r0, r0, lsr #32
     850:	04159c01 	ldreq	r9, [r5], #-3073	; 0xfffff3ff
     854:	83170000 	tsthi	r7, #0
     858:	01000003 	tsteq	r0, r3
     85c:	0003b9c7 	andeq	fp, r3, r7, asr #19
     860:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     864:	042f1900 	strteq	r1, [pc], #-2304	; 86c <startup-0x1ffff794>
     868:	9a010000 	bls	40870 <startup-0x1ffbf790>
     86c:	200004c8 	andcs	r0, r0, r8, asr #9
     870:	000001a0 	andeq	r0, r0, r0, lsr #3
     874:	04879c01 	streq	r9, [r7], #3073	; 0xc01
     878:	83170000 	tsthi	r7, #0
     87c:	01000003 	tsteq	r0, r3
     880:	0003b99a 	muleq	r3, sl, r9
     884:	5c910200 	lfmpl	f0, 4, [r1], {0}
     888:	00043918 	andeq	r3, r4, r8, lsl r9
     88c:	8b9c0100 	blhi	fe700c94 <player+0xde6ff6e4>
     890:	02000001 	andeq	r0, r0, #1
     894:	68186891 	ldmdavs	r8, {r0, r4, r7, fp, sp, lr}
     898:	01000003 	tsteq	r0, r3
     89c:	0002a6ac 	andeq	sl, r2, ip, lsr #13
     8a0:	6b910200 	blvs	fe4410a8 <player+0xde43faf8>
     8a4:	0005241a 	andeq	r2, r5, sl, lsl r4
     8a8:	00005e20 	andeq	r5, r0, r0, lsr #28
     8ac:	00046e00 	andeq	r6, r4, r0, lsl #28
     8b0:	00691b00 	rsbeq	r1, r9, r0, lsl #22
     8b4:	0089a401 	addeq	sl, r9, r1, lsl #8
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	2a13006c 	bcs	4c0a74 <startup-0x1fb3f58c>
     8c0:	24200006 	strtcs	r0, [r0], #-6
     8c4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     8c8:	00000342 	andeq	r0, r0, r2, asr #6
     8cc:	018bc001 	orreq	ip, fp, r1
     8d0:	91020000 	mrsls	r0, (UNDEF: 2)
     8d4:	19000064 	stmdbne	r0, {r2, r5, r6}
     8d8:	0000034a 	andeq	r0, r0, sl, asr #6
     8dc:	04508f01 	ldrbeq	r8, [r0], #-3841	; 0xfffff0ff
     8e0:	00782000 	rsbseq	r2, r8, r0
     8e4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8e8:	000004c3 	andeq	r0, r0, r3, asr #9
     8ec:	00000017 	andeq	r0, r0, r7, lsl r0
     8f0:	5f8f0100 	svcpl	0x008f0100
     8f4:	02000001 	andeq	r0, r0, #1
     8f8:	781b6491 	ldmdavc	fp, {r0, r4, r7, sl, sp, lr}
     8fc:	a2900100 	addsge	r0, r0, #0, 2
     900:	02000000 	andeq	r0, r0, #0
     904:	791b6f91 	ldmdbvc	fp, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     908:	a2910100 	addsge	r0, r1, #0, 2
     90c:	02000000 	andeq	r0, r0, #0
     910:	1c006e91 	stcne	14, cr6, [r0], {145}	; 0x91
     914:	0000031d 	andeq	r0, r0, sp, lsl r3
     918:	00897601 	addeq	r7, r9, r1, lsl #12
     91c:	03ea0000 	mvneq	r0, #0
     920:	00662000 	rsbeq	r2, r6, r0
     924:	9c010000 	stcls	0, cr0, [r1], {-0}
     928:	00000505 	andeq	r0, r0, r5, lsl #10
     92c:	0100631d 	tsteq	r0, sp, lsl r3
     930:	00026d76 	andeq	r6, r2, r6, ror sp
     934:	6c910200 	lfmvs	f0, 4, [r1], {0}
     938:	00061e17 	andeq	r1, r6, r7, lsl lr
     93c:	fb760100 	blx	1d80d46 <startup-0x1e27f2ba>
     940:	02000001 	andeq	r0, r0, #1
     944:	9e186891 	mrcls	8, 0, r6, cr8, cr1, {4}
     948:	01000003 	tsteq	r0, r3
     94c:	00008977 	andeq	r8, r0, r7, ror r9
     950:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     954:	03881c00 	orreq	r1, r8, #0, 24
     958:	63010000 	movwvs	r0, #4096	; 0x1000
     95c:	00000089 	andeq	r0, r0, r9, lsl #1
     960:	20000384 	andcs	r0, r0, r4, lsl #7
     964:	00000066 	andeq	r0, r0, r6, rrx
     968:	05479c01 	strbeq	r9, [r7, #-3073]	; 0xfffff3ff
     96c:	631d0000 	tstvs	sp, #0
     970:	6d630100 	stfvse	f0, [r3, #-0]
     974:	02000002 	andeq	r0, r0, #2
     978:	1e176c91 	mrcne	12, 0, r6, cr7, cr1, {4}
     97c:	01000006 	tsteq	r0, r6
     980:	00018b63 	andeq	r8, r1, r3, ror #22
     984:	68910200 	ldmvs	r1, {r9}
     988:	00039e18 	andeq	r9, r3, r8, lsl lr
     98c:	89640100 	stmdbhi	r4!, {r8}^
     990:	02000000 	andeq	r0, r0, #0
     994:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
     998:	0000032a 	andeq	r0, r0, sl, lsr #6
     99c:	00895201 	addeq	r5, r9, r1, lsl #4
     9a0:	031e0000 	tsteq	lr, #0
     9a4:	00662000 	rsbeq	r2, r6, r0
     9a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     9ac:	00000589 	andeq	r0, r0, r9, lsl #11
     9b0:	0100631d 	tsteq	r0, sp, lsl r3
     9b4:	00026d52 	andeq	r6, r2, r2, asr sp
     9b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9bc:	00061e17 	andeq	r1, r6, r7, lsl lr
     9c0:	fb520100 	blx	1480dca <startup-0x1eb7f236>
     9c4:	02000001 	andeq	r0, r0, #1
     9c8:	9e186891 	mrcls	8, 0, r6, cr8, cr1, {4}
     9cc:	01000003 	tsteq	r0, r3
     9d0:	00008953 	andeq	r8, r0, r3, asr r9
     9d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9d8:	03f71c00 	mvnseq	r1, #0, 24
     9dc:	40010000 	andmi	r0, r1, r0
     9e0:	00000089 	andeq	r0, r0, r9, lsl #1
     9e4:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
     9e8:	00000066 	andeq	r0, r0, r6, rrx
     9ec:	05cb9c01 	strbeq	r9, [fp, #3073]	; 0xc01
     9f0:	631d0000 	tstvs	sp, #0
     9f4:	6d400100 	stfvse	f0, [r0, #-0]
     9f8:	02000002 	andeq	r0, r0, #2
     9fc:	1e176c91 	mrcne	12, 0, r6, cr7, cr1, {4}
     a00:	01000006 	tsteq	r0, r6
     a04:	00018b40 	andeq	r8, r1, r0, asr #22
     a08:	68910200 	ldmvs	r1, {r9}
     a0c:	00039e18 	andeq	r9, r3, r8, lsl lr
     a10:	89410100 	stmdbhi	r1, {r8}^
     a14:	02000000 	andeq	r0, r0, #0
     a18:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
     a1c:	00000427 	andeq	r0, r0, r7, lsr #8
     a20:	00001101 	andeq	r1, r0, r1, lsl #2
     a24:	000c2000 	andeq	r2, ip, r0
     a28:	9c010000 	stcls	0, cr0, [r1], {-0}
     a2c:	00038300 	andeq	r8, r3, r0, lsl #6
     a30:	a1000400 	tstge	r0, r0, lsl #8
     a34:	04000003 	streq	r0, [r0], #-3
     a38:	00024601 	andeq	r4, r2, r1, lsl #12
     a3c:	04de0c00 	ldrbeq	r0, [lr], #3072	; 0xc00
     a40:	01200000 			; <UNDEFINED> instruction: 0x01200000
     a44:	08ac0000 	stmiaeq	ip!, {}	; <UNPREDICTABLE>
     a48:	03062000 	movweq	r2, #24576	; 0x6000
     a4c:	04880000 	streq	r0, [r8], #0
     a50:	01020000 	mrseq	r0, (UNDEF: 2)
     a54:	00008006 	andeq	r8, r0, r6
     a58:	01450300 	mrseq	r0, (UNDEF: 117)
     a5c:	2b020000 	blcs	80a64 <startup-0x1ff7f59c>
     a60:	00000037 	andeq	r0, r0, r7, lsr r0
     a64:	7e080102 	adfvce	f0, f0, f2
     a68:	02000000 	andeq	r0, r0, #0
     a6c:	01040502 	tsteq	r4, r2, lsl #10
     a70:	af030000 	svcge	0x00030000
     a74:	02000001 	andeq	r0, r0, #1
     a78:	00005039 	andeq	r5, r0, r9, lsr r0
     a7c:	07020200 	streq	r0, [r2, -r0, lsl #4]
     a80:	00000094 	muleq	r0, r4, r0
     a84:	ce050402 	cdpgt	4, 0, cr0, cr5, cr2, {0}
     a88:	03000000 	movweq	r0, #0
     a8c:	000000a7 	andeq	r0, r0, r7, lsr #1
     a90:	00694f02 	rsbeq	r4, r9, r2, lsl #30
     a94:	04020000 	streq	r0, [r2], #-0
     a98:	0000b707 	andeq	fp, r0, r7, lsl #14
     a9c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     aa0:	000000c9 	andeq	r0, r0, r9, asr #1
     aa4:	b2070802 	andlt	r0, r7, #131072	; 0x20000
     aa8:	04000000 	streq	r0, [r0], #-0
     aac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     ab0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     ab4:	0000bc07 	andeq	fp, r0, r7, lsl #24
     ab8:	01470300 	mrseq	r0, (UNDEF: 119)
     abc:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     ac0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ac4:	0001b103 	andeq	fp, r1, r3, lsl #2
     ac8:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
     acc:	03000000 	movweq	r0, #0
     ad0:	000000a9 	andeq	r0, r0, r9, lsr #1
     ad4:	005e3003 	subseq	r3, lr, r3
     ad8:	aa050000 	bge	140ae0 <startup-0x1febf520>
     adc:	18000001 	stmdane	r0, {r0}
     ae0:	013e0e04 	teqeq	lr, r4, lsl #28
     ae4:	cc060000 	stcgt	0, cr0, [r6], {-0}
     ae8:	04000002 	streq	r0, [r0], #-2
     aec:	0000a20f 	andeq	sl, r0, pc, lsl #4
     af0:	77060000 	strvc	r0, [r6, -r0]
     af4:	04000001 	streq	r0, [r0], #-1
     af8:	00009710 	andeq	r9, r0, r0, lsl r7
     afc:	ea060400 	b	181b04 <startup-0x1fe7e4fc>
     b00:	04000002 	streq	r0, [r0], #-2
     b04:	00009711 	andeq	r9, r0, r1, lsl r7
     b08:	5b060600 	blpl	182310 <startup-0x1fe7dcf0>
     b0c:	04000001 	streq	r0, [r0], #-1
     b10:	0000a212 	andeq	sl, r0, r2, lsl r2
     b14:	26060800 	strcs	r0, [r6], -r0, lsl #16
     b18:	04000002 	streq	r0, [r0], #-2
     b1c:	0000a213 	andeq	sl, r0, r3, lsl r2
     b20:	e2060c00 	and	r0, r6, #0, 24
     b24:	04000002 	streq	r0, [r0], #-2
     b28:	00008c14 	andeq	r8, r0, r4, lsl ip
     b2c:	90061000 	andls	r1, r6, r0
     b30:	04000001 	streq	r0, [r0], #-1
     b34:	00008c15 	andeq	r8, r0, r5, lsl ip
     b38:	df061100 	svcle	0x00061100
     b3c:	04000001 	streq	r0, [r0], #-1
     b40:	00009716 	andeq	r9, r0, r6, lsl r7
     b44:	ec061200 	sfm	f1, 4, [r6], {-0}
     b48:	04000001 	streq	r0, [r0], #-1
     b4c:	00008c17 	andeq	r8, r0, r7, lsl ip
     b50:	6e061400 	cfcpysvs	mvf1, mvf6
     b54:	04000001 	streq	r0, [r0], #-1
     b58:	00008c18 	andeq	r8, r0, r8, lsl ip
     b5c:	f4061500 	vst3.8	{d1,d3,d5}, [r6], r0
     b60:	04000001 	streq	r0, [r0], #-1
     b64:	00009719 	andeq	r9, r0, r9, lsl r7
     b68:	03001600 	movweq	r1, #1536	; 0x600
     b6c:	000001a5 	andeq	r0, r0, r5, lsr #3
     b70:	00ad1a04 	adceq	r1, sp, r4, lsl #20
     b74:	b6070000 	strlt	r0, [r7], -r0
     b78:	01000004 	tsteq	r0, r4
     b7c:	000b8a67 	andeq	r8, fp, r7, ror #20
     b80:	00002820 	andeq	r2, r0, r0, lsr #16
     b84:	6b9c0100 	blvs	fe700f8c <player+0xde6ff9dc>
     b88:	08000001 	stmdaeq	r0, {r0}
     b8c:	67010063 	strvs	r0, [r1, -r3, rrx]
     b90:	0000016b 	andeq	r0, r0, fp, ror #2
     b94:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b98:	01710409 	cmneq	r1, r9, lsl #8
     b9c:	01020000 	mrseq	r0, (UNDEF: 2)
     ba0:	00008708 	andeq	r8, r0, r8, lsl #14
     ba4:	05020700 	streq	r0, [r2, #-1792]	; 0xfffff900
     ba8:	63010000 	movwvs	r0, #4096	; 0x1000
     bac:	20000b6a 	andcs	r0, r0, sl, ror #22
     bb0:	00000020 	andeq	r0, r0, r0, lsr #32
     bb4:	019a9c01 	orrseq	r9, sl, r1, lsl #24
     bb8:	63080000 	movwvs	r0, #32768	; 0x8000
     bbc:	71630100 	cmnvc	r3, r0, lsl #2
     bc0:	02000001 	andeq	r0, r0, #1
     bc4:	07007791 			; <UNDEFINED> instruction: 0x07007791
     bc8:	00000487 	andeq	r0, r0, r7, lsl #9
     bcc:	0b1a5b01 	bleq	6977d8 <startup-0x1f968828>
     bd0:	00502000 	subseq	r2, r0, r0
     bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
     bd8:	000001da 	ldrdeq	r0, [r0], -sl
     bdc:	776f7208 	strbvc	r7, [pc, -r8, lsl #4]!
     be0:	375b0100 	ldrbcc	r0, [fp, -r0, lsl #2]
     be4:	02000000 	andeq	r0, r0, #0
     be8:	1f0a6f91 	svcne	0x000a6f91
     bec:	01000002 	tsteq	r0, r2
     bf0:	0000375b 	andeq	r3, r0, fp, asr r7
     bf4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     bf8:	0005290b 	andeq	r2, r5, fp, lsl #18
     bfc:	375c0100 	ldrbcc	r0, [ip, -r0, lsl #2]
     c00:	02000000 	andeq	r0, r0, #0
     c04:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
     c08:	00000494 	muleq	r0, r4, r4
     c0c:	0aec5301 	beq	ffb15818 <player+0xdfb14268>
     c10:	002e2000 	eoreq	r2, lr, r0
     c14:	9c010000 	stcls	0, cr0, [r1], {-0}
     c18:	00049f07 	andeq	r9, r4, r7, lsl #30
     c1c:	ac4c0100 	stfgee	f0, [ip], {-0}
     c20:	4020000a 	eormi	r0, r0, sl
     c24:	01000000 	mrseq	r0, (UNDEF: 0)
     c28:	00021d9c 	muleq	r2, ip, sp
     c2c:	061e0a00 	ldreq	r0, [lr], -r0, lsl #20
     c30:	4c010000 	stcmi	0, cr0, [r1], {-0}
     c34:	00000037 	andeq	r0, r0, r7, lsr r0
     c38:	0a779102 	beq	1de5048 <startup-0x1e21afb8>
     c3c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     c40:	00854c01 	addeq	r4, r5, r1, lsl #24
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	5e070070 	mcrpl	0, 0, r0, cr7, cr0, {3}
     c4c:	01000004 	tsteq	r0, r4
     c50:	000a6c45 	andeq	r6, sl, r5, asr #24
     c54:	00004020 	andeq	r4, r0, r0, lsr #32
     c58:	4f9c0100 	svcmi	0x009c0100
     c5c:	08000002 	stmdaeq	r0, {r1}
     c60:	00646d63 	rsbeq	r6, r4, r3, ror #26
     c64:	00374501 	eorseq	r4, r7, r1, lsl #10
     c68:	91020000 	mrsls	r0, (UNDEF: 2)
     c6c:	04b00a77 	ldrteq	r0, [r0], #2679	; 0xa77
     c70:	45010000 	strmi	r0, [r1, #-0]
     c74:	00000085 	andeq	r0, r0, r5, lsl #1
     c78:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c7c:	00056f0d 	andeq	r6, r5, sp, lsl #30
     c80:	373c0100 	ldrcc	r0, [ip, -r0, lsl #2]!
     c84:	2c000000 	stccs	0, cr0, [r0], {-0}
     c88:	4020000a 	eormi	r0, r0, sl
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	0002759c 	muleq	r2, ip, r5
     c94:	00630e00 	rsbeq	r0, r3, r0, lsl #28
     c98:	00374001 	eorseq	r4, r7, r1
     c9c:	91020000 	mrsls	r0, (UNDEF: 2)
     ca0:	460d006f 	strmi	r0, [sp], -pc, rrx
     ca4:	01000005 	tsteq	r0, r5
     ca8:	00003733 	andeq	r3, r0, r3, lsr r7
     cac:	0009ea00 	andeq	lr, r9, r0, lsl #20
     cb0:	00004220 	andeq	r4, r0, r0, lsr #4
     cb4:	9b9c0100 	blls	fe7010bc <player+0xde6ffb0c>
     cb8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     cbc:	37010063 	strcc	r0, [r1, -r3, rrx]
     cc0:	00000037 	andeq	r0, r0, r7, lsr r0
     cc4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     cc8:	00053007 	andeq	r3, r5, r7
     ccc:	c02d0100 	eorgt	r0, sp, r0, lsl #2
     cd0:	2a200009 	bcs	800cfc <startup-0x1f7ff304>
     cd4:	01000000 	mrseq	r0, (UNDEF: 0)
     cd8:	0002bf9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
     cdc:	061e0a00 	ldreq	r0, [lr], -r0, lsl #20
     ce0:	2d010000 	stccs	0, cr0, [r1, #-0]
     ce4:	00000037 	andeq	r0, r0, r7, lsr r0
     ce8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     cec:	00057f07 	andeq	r7, r5, r7, lsl #30
     cf0:	9c280100 	stflss	f0, [r8], #-0
     cf4:	24200009 	strtcs	r0, [r0], #-9
     cf8:	01000000 	mrseq	r0, (UNDEF: 0)
     cfc:	0002e39c 	muleq	r2, ip, r3
     d00:	05bb0a00 	ldreq	r0, [fp, #2560]!	; 0xa00
     d04:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     d08:	00000037 	andeq	r0, r0, r7, lsr r0
     d0c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d10:	0005130d 	andeq	r1, r5, sp, lsl #6
     d14:	371f0100 	ldrcc	r0, [pc, -r0, lsl #2]
     d18:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     d1c:	34200009 	strtcc	r0, [r0], #-9
     d20:	01000000 	mrseq	r0, (UNDEF: 0)
     d24:	00030a9c 	muleq	r3, ip, sl
     d28:	76720e00 	ldrbtvc	r0, [r2], -r0, lsl #28
     d2c:	37230100 	strcc	r0, [r3, -r0, lsl #2]!
     d30:	02000000 	andeq	r0, r0, #0
     d34:	07007791 			; <UNDEFINED> instruction: 0x07007791
     d38:	00000558 	andeq	r0, r0, r8, asr r5
     d3c:	09381801 	ldmdbeq	r8!, {r0, fp, ip}
     d40:	00302000 	eorseq	r2, r0, r0
     d44:	9c010000 	stcls	0, cr0, [r1], {-0}
     d48:	0000032e 	andeq	r0, r0, lr, lsr #6
     d4c:	0005410a 	andeq	r4, r5, sl, lsl #2
     d50:	37180100 	ldrcc	r0, [r8, -r0, lsl #2]
     d54:	02000000 	andeq	r0, r0, #0
     d58:	0f007791 	svceq	0x00007791
     d5c:	000004c9 	andeq	r0, r0, r9, asr #9
     d60:	08f01101 	ldmeq	r0!, {r0, r8, ip}^
     d64:	00482000 	subeq	r2, r8, r0
     d68:	9c010000 	stcls	0, cr0, [r1], {-0}
     d6c:	0000035c 	andeq	r0, r0, ip, asr r3
     d70:	01007808 	tsteq	r0, r8, lsl #16
     d74:	00003711 	andeq	r3, r0, r1, lsl r7
     d78:	6f910200 	svcvs	0x00910200
     d7c:	0100630e 	tsteq	r0, lr, lsl #6
     d80:	00003712 	andeq	r3, r0, r2, lsl r7
     d84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d88:	04741000 	ldrbteq	r1, [r4], #-0
     d8c:	0a010000 	beq	40d94 <startup-0x1ffbf26c>
     d90:	200008ac 	andcs	r0, r0, ip, lsr #17
     d94:	00000044 	andeq	r0, r0, r4, asr #32
     d98:	78089c01 	stmdavc	r8, {r0, sl, fp, ip, pc}
     d9c:	370a0100 	strcc	r0, [sl, -r0, lsl #2]
     da0:	02000000 	andeq	r0, r0, #0
     da4:	630e6f91 	movwvs	r6, #61329	; 0xef91
     da8:	370b0100 	strcc	r0, [fp, -r0, lsl #2]
     dac:	02000000 	andeq	r0, r0, #0
     db0:	00007791 	muleq	r0, r1, r7
     db4:	000003aa 	andeq	r0, r0, sl, lsr #7
     db8:	04bb0004 	ldrteq	r0, [fp], #4
     dbc:	01040000 	mrseq	r0, (UNDEF: 4)
     dc0:	00000246 	andeq	r0, r0, r6, asr #4
     dc4:	0005c30c 	andeq	ip, r5, ip, lsl #6
     dc8:	00012000 	andeq	r2, r1, r0
     dcc:	000bb400 	andeq	fp, fp, r0, lsl #8
     dd0:	00050820 	andeq	r0, r5, r0, lsr #16
     dd4:	0005f800 	andeq	pc, r5, r0, lsl #16
     dd8:	06010200 	streq	r0, [r1], -r0, lsl #4
     ddc:	00000080 	andeq	r0, r0, r0, lsl #1
     de0:	00014503 	andeq	r4, r1, r3, lsl #10
     de4:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
     de8:	02000000 	andeq	r0, r0, #0
     dec:	007e0801 	rsbseq	r0, lr, r1, lsl #16
     df0:	02020000 	andeq	r0, r2, #0
     df4:	00010405 	andeq	r0, r1, r5, lsl #8
     df8:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
     dfc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     e00:	00000050 	andeq	r0, r0, r0, asr r0
     e04:	94070202 	strls	r0, [r7], #-514	; 0xfffffdfe
     e08:	02000000 	andeq	r0, r0, #0
     e0c:	00ce0504 	sbceq	r0, lr, r4, lsl #10
     e10:	a7030000 	strge	r0, [r3, -r0]
     e14:	02000000 	andeq	r0, r0, #0
     e18:	0000694f 	andeq	r6, r0, pc, asr #18
     e1c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     e20:	000000b7 	strheq	r0, [r0], -r7
     e24:	c9050802 	stmdbgt	r5, {r1, fp}
     e28:	02000000 	andeq	r0, r0, #0
     e2c:	00b20708 	adcseq	r0, r2, r8, lsl #14
     e30:	04040000 	streq	r0, [r4], #-0
     e34:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     e38:	07040200 	streq	r0, [r4, -r0, lsl #4]
     e3c:	000000bc 	strheq	r0, [r0], -ip
     e40:	00014703 	andeq	r4, r1, r3, lsl #14
     e44:	2c180300 	ldccs	3, cr0, [r8], {-0}
     e48:	03000000 	movweq	r0, #0
     e4c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     e50:	00452403 	subeq	r2, r5, r3, lsl #8
     e54:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     e58:	03000000 	movweq	r0, #0
     e5c:	00005e30 	andeq	r5, r0, r0, lsr lr
     e60:	01aa0500 			; <UNDEFINED> instruction: 0x01aa0500
     e64:	04180000 	ldreq	r0, [r8], #-0
     e68:	00013e0e 	andeq	r3, r1, lr, lsl #28
     e6c:	02cc0600 	sbceq	r0, ip, #0, 12
     e70:	0f040000 	svceq	0x00040000
     e74:	000000a2 	andeq	r0, r0, r2, lsr #1
     e78:	01770600 	cmneq	r7, r0, lsl #12
     e7c:	10040000 	andne	r0, r4, r0
     e80:	00000097 	muleq	r0, r7, r0
     e84:	02ea0604 	rsceq	r0, sl, #4, 12	; 0x400000
     e88:	11040000 	mrsne	r0, (UNDEF: 4)
     e8c:	00000097 	muleq	r0, r7, r0
     e90:	015b0606 	cmpeq	fp, r6, lsl #12
     e94:	12040000 	andne	r0, r4, #0
     e98:	000000a2 	andeq	r0, r0, r2, lsr #1
     e9c:	02260608 	eoreq	r0, r6, #8, 12	; 0x800000
     ea0:	13040000 	movwne	r0, #16384	; 0x4000
     ea4:	000000a2 	andeq	r0, r0, r2, lsr #1
     ea8:	02e2060c 	rsceq	r0, r2, #12, 12	; 0xc00000
     eac:	14040000 	strne	r0, [r4], #-0
     eb0:	0000008c 	andeq	r0, r0, ip, lsl #1
     eb4:	01900610 	orrseq	r0, r0, r0, lsl r6
     eb8:	15040000 	strne	r0, [r4, #-0]
     ebc:	0000008c 	andeq	r0, r0, ip, lsl #1
     ec0:	01df0611 	bicseq	r0, pc, r1, lsl r6	; <UNPREDICTABLE>
     ec4:	16040000 	strne	r0, [r4], -r0
     ec8:	00000097 	muleq	r0, r7, r0
     ecc:	01ec0612 	mvneq	r0, r2, lsl r6
     ed0:	17040000 	strne	r0, [r4, -r0]
     ed4:	0000008c 	andeq	r0, r0, ip, lsl #1
     ed8:	016e0614 	cmneq	lr, r4, lsl r6
     edc:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     ee0:	0000008c 	andeq	r0, r0, ip, lsl #1
     ee4:	01f40615 	mvnseq	r0, r5, lsl r6
     ee8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     eec:	00000097 	muleq	r0, r7, r0
     ef0:	a5030016 	strge	r0, [r3, #-22]	; 0xffffffea
     ef4:	04000001 	streq	r0, [r0], #-1
     ef8:	0000ad1a 	andeq	sl, r0, sl, lsl sp
     efc:	05a00700 	streq	r0, [r0, #1792]!	; 0x700
     f00:	aa010000 	bge	40f08 <startup-0x1ffbf0f8>
     f04:	20001066 	andcs	r1, r0, r6, rrx
     f08:	00000056 	andeq	r0, r0, r6, asr r0
     f0c:	ea089c01 	b	227f18 <startup-0x1fdd80e8>
     f10:	01000005 	tsteq	r0, r5
     f14:	0010009f 	mulseq	r0, pc, r0	; <UNPREDICTABLE>
     f18:	00006620 	andeq	r6, r0, r0, lsr #12
     f1c:	a09c0100 	addsge	r0, ip, r0, lsl #2
     f20:	09000001 	stmdbeq	r0, {r0}
     f24:	20001006 	andcs	r1, r0, r6
     f28:	00000058 	andeq	r0, r0, r8, asr r0
     f2c:	00060c0a 	andeq	r0, r6, sl, lsl #24
     f30:	8ca00100 	stfhis	f0, [r0]
     f34:	02000000 	andeq	r0, r0, #0
     f38:	2a097791 	bcs	25ed84 <startup-0x1fda127c>
     f3c:	22200010 	eorcs	r0, r0, #16
     f40:	0b000000 	bleq	f48 <startup-0x1ffff0b8>
     f44:	00646461 	rsbeq	r6, r4, r1, ror #8
     f48:	008ca301 	addeq	sl, ip, r1, lsl #6
     f4c:	91020000 	mrsls	r0, (UNDEF: 2)
     f50:	00000076 	andeq	r0, r0, r6, ror r0
     f54:	00058f08 	andeq	r8, r5, r8, lsl #30
     f58:	c8860100 	stmgt	r6, {r8}
     f5c:	3820000e 	stmdacc	r0!, {r1, r2, r3}
     f60:	01000001 	tsteq	r0, r1
     f64:	0002149c 	muleq	r2, ip, r4
     f68:	00780c00 	rsbseq	r0, r8, r0, lsl #24
     f6c:	008c8601 	addeq	r8, ip, r1, lsl #12
     f70:	91020000 	mrsls	r0, (UNDEF: 2)
     f74:	00790c67 	rsbseq	r0, r9, r7, ror #24
     f78:	008c8601 	addeq	r8, ip, r1, lsl #12
     f7c:	91020000 	mrsls	r0, (UNDEF: 2)
     f80:	65730c66 	ldrbvs	r0, [r3, #-3174]!	; 0xfffff39a
     f84:	86010074 			; <UNDEFINED> instruction: 0x86010074
     f88:	00000214 	andeq	r0, r0, r4, lsl r2
     f8c:	0a659102 	beq	196539c <startup-0x1e69ac64>
     f90:	00000595 	muleq	r0, r5, r5
     f94:	008c8801 	addeq	r8, ip, r1, lsl #16
     f98:	91020000 	mrsls	r0, (UNDEF: 2)
     f9c:	02320a6d 	eorseq	r0, r2, #446464	; 0x6d000
     fa0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     fa4:	0000008c 	andeq	r0, r0, ip, lsl #1
     fa8:	0a6f9102 	beq	1be53b8 <startup-0x1e41ac48>
     fac:	0000051e 	andeq	r0, r0, lr, lsl r5
     fb0:	008c8801 	addeq	r8, ip, r1, lsl #16
     fb4:	91020000 	mrsls	r0, (UNDEF: 2)
     fb8:	059b0a6e 	ldreq	r0, [fp, #2670]	; 0xa6e
     fbc:	95010000 	strls	r0, [r1, #-0]
     fc0:	0000008c 	andeq	r0, r0, ip, lsl #1
     fc4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     fc8:	b2020102 	andlt	r0, r2, #-2147483648	; 0x80000000
     fcc:	0d000003 	stceq	0, cr0, [r0, #-12]
     fd0:	00000611 	andeq	r0, r0, r1, lsl r6
     fd4:	008c8101 	addeq	r8, ip, r1, lsl #2
     fd8:	0e9e0000 	cdpeq	0, 9, cr0, cr14, cr0, {0}
     fdc:	002a2000 	eoreq	r2, sl, r0
     fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fe4:	00000243 	andeq	r0, r0, r3, asr #4
     fe8:	00051e0e 	andeq	r1, r5, lr, lsl #28
     fec:	8c810100 	stfhis	f0, [r1], {0}
     ff0:	02000000 	andeq	r0, r0, #0
     ff4:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     ff8:	00000623 	andeq	r0, r0, r3, lsr #12
     ffc:	0e587901 	vnmlseq.f16	s15, s16, s2	; <UNPREDICTABLE>
    1000:	00462000 	subeq	r2, r6, r0
    1004:	9c010000 	stcls	0, cr0, [r1], {-0}
    1008:	00000275 	andeq	r0, r0, r5, ror r2
    100c:	00061e0e 	andeq	r1, r6, lr, lsl #28
    1010:	8c790100 	ldfhie	f0, [r9], #-0
    1014:	02000000 	andeq	r0, r0, #0
    1018:	1e0e7791 	mcrne	7, 0, r7, cr14, cr1, {4}
    101c:	01000005 	tsteq	r0, r5
    1020:	00008c79 	andeq	r8, r0, r9, ror ip
    1024:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1028:	05ad0800 	streq	r0, [sp, #2048]!	; 0x800
    102c:	72010000 	andvc	r0, r1, #0
    1030:	20000e18 	andcs	r0, r0, r8, lsl lr
    1034:	00000040 	andeq	r0, r0, r0, asr #32
    1038:	02a79c01 	adceq	r9, r7, #256	; 0x100
    103c:	bb0e0000 	bllt	381044 <startup-0x1fc7efbc>
    1040:	01000005 	tsteq	r0, r5
    1044:	00008c72 	andeq	r8, r0, r2, ror ip
    1048:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    104c:	00051e0e 	andeq	r1, r5, lr, lsl #28
    1050:	8c720100 	ldfhie	f0, [r2], #-0
    1054:	02000000 	andeq	r0, r0, #0
    1058:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    105c:	0000064d 	andeq	r0, r0, sp, asr #12
    1060:	0d985e01 	ldceq	14, cr5, [r8, #4]
    1064:	00802000 	addeq	r2, r0, r0
    1068:	9c010000 	stcls	0, cr0, [r1], {-0}
    106c:	000002d9 	ldrdeq	r0, [r0], -r9
    1070:	0001680e 	andeq	r6, r1, lr, lsl #16
    1074:	8c5e0100 	ldfhie	f0, [lr], {-0}
    1078:	02000000 	andeq	r0, r0, #0
    107c:	1e0e7791 	mcrne	7, 0, r7, cr14, cr1, {4}
    1080:	01000005 	tsteq	r0, r5
    1084:	00008c5e 	andeq	r8, r0, lr, asr ip
    1088:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    108c:	05ff0d00 	ldrbeq	r0, [pc, #3328]!	; 1d94 <startup-0x1fffe26c>
    1090:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1094:	0000008c 	andeq	r0, r0, ip, lsl #1
    1098:	20000d08 	andcs	r0, r0, r8, lsl #26
    109c:	00000090 	muleq	r0, r0, r0
    10a0:	030f9c01 	movweq	r9, #64513	; 0xfc01
    10a4:	1e0e0000 	cdpne	0, 0, cr0, cr14, cr0, {0}
    10a8:	01000005 	tsteq	r0, r5
    10ac:	00008c48 	andeq	r8, r0, r8, asr #24
    10b0:	6f910200 	svcvs	0x00910200
    10b4:	0006950a 	andeq	r9, r6, sl, lsl #10
    10b8:	8c500100 	ldfhie	f0, [r0], {-0}
    10bc:	02000000 	andeq	r0, r0, #0
    10c0:	0f007791 	svceq	0x00007791
    10c4:	00000682 	andeq	r0, r0, r2, lsl #13
    10c8:	0c9a3401 	cfldrseq	mvf3, [sl], {1}
    10cc:	006e2000 	rsbeq	r2, lr, r0
    10d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    10d4:	00000331 	andeq	r0, r0, r1, lsr r3
    10d8:	0100630b 	tsteq	r0, fp, lsl #6
    10dc:	00008c3b 	andeq	r8, r0, fp, lsr ip
    10e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    10e4:	06700800 	ldrbteq	r0, [r0], -r0, lsl #16
    10e8:	21010000 	mrscs	r0, (UNDEF: 1)
    10ec:	20000c40 	andcs	r0, r0, r0, asr #24
    10f0:	0000005a 	andeq	r0, r0, sl, asr r0
    10f4:	03559c01 	cmpeq	r5, #256	; 0x100
    10f8:	1e0e0000 	cdpne	0, 0, cr0, cr14, cr0, {0}
    10fc:	01000005 	tsteq	r0, r5
    1100:	00008c21 	andeq	r8, r0, r1, lsr #24
    1104:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1108:	06361000 	ldrteq	r1, [r6], -r0
    110c:	1b010000 	blne	41114 <startup-0x1ffbeeec>
    1110:	20000bf8 	strdcs	r0, [r0], -r8
    1114:	00000048 	andeq	r0, r0, r8, asr #32
    1118:	03839c01 	orreq	r9, r3, #256	; 0x100
    111c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    1120:	8c1b0100 	ldfhis	f0, [fp], {-0}
    1124:	02000000 	andeq	r0, r0, #0
    1128:	630b6f91 	movwvs	r6, #49041	; 0xbf91
    112c:	8c1c0100 	ldfhis	f0, [ip], {-0}
    1130:	02000000 	andeq	r0, r0, #0
    1134:	11007791 			; <UNDEFINED> instruction: 0x11007791
    1138:	0000065b 	andeq	r0, r0, fp, asr r6
    113c:	0bb41501 	bleq	fed06548 <player+0xded04f98>
    1140:	00442000 	subeq	r2, r4, r0
    1144:	9c010000 	stcls	0, cr0, [r1], {-0}
    1148:	0100780c 	tsteq	r0, ip, lsl #16
    114c:	00008c15 	andeq	r8, r0, r5, lsl ip
    1150:	6f910200 	svcvs	0x00910200
    1154:	0100630b 	tsteq	r0, fp, lsl #6
    1158:	00008c16 	andeq	r8, r0, r6, lsl ip
    115c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1160:	01610000 	cmneq	r1, r0
    1164:	00040000 	andeq	r0, r4, r0
    1168:	000005ed 	andeq	r0, r0, sp, ror #11
    116c:	02460104 	subeq	r0, r6, #4, 2
    1170:	210c0000 	mrscs	r0, (UNDEF: 12)
    1174:	20000007 	andcs	r0, r0, r7
    1178:	bc000001 	stclt	0, cr0, [r0], {1}
    117c:	b0200010 	eorlt	r0, r0, r0, lsl r0
    1180:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1184:	02000007 	andeq	r0, r0, #7
    1188:	00800601 	addeq	r0, r0, r1, lsl #12
    118c:	01020000 	mrseq	r0, (UNDEF: 2)
    1190:	00007e08 	andeq	r7, r0, r8, lsl #28
    1194:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1198:	00000104 	andeq	r0, r0, r4, lsl #2
    119c:	94070202 	strls	r0, [r7], #-514	; 0xfffffdfe
    11a0:	03000000 	movweq	r0, #0
    11a4:	000006de 	ldrdeq	r0, [r0], -lr
    11a8:	004c4d02 	subeq	r4, ip, r2, lsl #26
    11ac:	04020000 	streq	r0, [r2], #-0
    11b0:	0000ce05 	andeq	ip, r0, r5, lsl #28
    11b4:	00a70300 	adceq	r0, r7, r0, lsl #6
    11b8:	4f020000 	svcmi	0x00020000
    11bc:	0000005e 	andeq	r0, r0, lr, asr r0
    11c0:	b7070402 	strlt	r0, [r7, -r2, lsl #8]
    11c4:	02000000 	andeq	r0, r0, #0
    11c8:	00c90508 	sbceq	r0, r9, r8, lsl #10
    11cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    11d0:	0000b207 	andeq	fp, r0, r7, lsl #4
    11d4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    11d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    11dc:	bc070402 	cfstrslt	mvf0, [r7], {2}
    11e0:	03000000 	movweq	r0, #0
    11e4:	000006e0 	andeq	r0, r0, r0, ror #13
    11e8:	00412c03 	subeq	r2, r1, r3, lsl #24
    11ec:	81050000 	mrshi	r0, (UNDEF: 5)
    11f0:	03000000 	movweq	r0, #0
    11f4:	000000a9 	andeq	r0, r0, r9, lsr #1
    11f8:	00533003 	subseq	r3, r3, r3
    11fc:	10060000 	andne	r0, r6, r0
    1200:	00d50304 	sbcseq	r0, r5, r4, lsl #6
    1204:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    1208:	04000007 	streq	r0, [r0], #-7
    120c:	00009104 	andeq	r9, r0, r4, lsl #2
    1210:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    1214:	04000006 	streq	r0, [r0], #-6
    1218:	00009105 	andeq	r9, r0, r5, lsl #2
    121c:	76080400 	strvc	r0, [r8], -r0, lsl #8
    1220:	04006c61 	streq	r6, [r0], #-3169	; 0xfffff39f
    1224:	00009106 	andeq	r9, r0, r6, lsl #2
    1228:	fb070800 	blx	1c3232 <startup-0x1fe3cdce>
    122c:	04000006 	streq	r0, [r0], #-6
    1230:	00009107 	andeq	r9, r0, r7, lsl #2
    1234:	09000c00 	stmdbeq	r0, {sl, fp}
    1238:	004b5453 	subeq	r5, fp, r3, asr r4
    123c:	009c0804 	addseq	r0, ip, r4, lsl #16
    1240:	f60a0000 			; <UNDEFINED> instruction: 0xf60a0000
    1244:	01000002 	tsteq	r0, r2
    1248:	0000f805 	andeq	pc, r0, r5, lsl #16
    124c:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    1250:	02200015 	eoreq	r0, r0, #21
    1254:	03b20201 			; <UNDEFINED> instruction: 0x03b20201
    1258:	f1050000 			; <UNDEFINED> instruction: 0xf1050000
    125c:	0a000000 	beq	1264 <startup-0x1fffed9c>
    1260:	00000715 	andeq	r0, r0, r5, lsl r7
    1264:	008c0601 	addeq	r0, ip, r1, lsl #12
    1268:	03050000 	movweq	r0, #20480	; 0x5000
    126c:	20001598 	mulcs	r0, r8, r5
    1270:	00074d0b 	andeq	r4, r7, fp, lsl #26
    1274:	4c1f0100 	ldfmis	f0, [pc], {-0}
    1278:	20200011 	eorcs	r0, r0, r1, lsl r0
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	0001319c 	muleq	r1, ip, r1
    1284:	73750c00 	cmnvc	r5, #0, 24
    1288:	911f0100 	tstls	pc, r0, lsl #2
    128c:	02000000 	andeq	r0, r0, #0
    1290:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    1294:	000006e8 	andeq	r0, r0, r8, ror #13
    1298:	11281a01 			; <UNDEFINED> instruction: 0x11281a01
    129c:	00242000 	eoreq	r2, r4, r0
    12a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12a4:	0007010e 	andeq	r0, r7, lr, lsl #2
    12a8:	ec100100 	ldfs	f0, [r0], {-0}
    12ac:	3c200010 	stccc	0, cr0, [r0], #-64	; 0xffffffc0
    12b0:	01000000 	mrseq	r0, (UNDEF: 0)
    12b4:	06cf0d9c 			; <UNDEFINED> instruction: 0x06cf0d9c
    12b8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    12bc:	200010bc 	strhcs	r1, [r0], -ip
    12c0:	00000030 	andeq	r0, r0, r0, lsr r0
    12c4:	Address 0x000012c4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  48:	97184006 	ldrls	r4, [r8, -r6]
  4c:	13011942 	movwne	r1, #6466	; 0x1942
  50:	05060000 	streq	r0, [r6, #-0]
  54:	3a0e0300 	bcc	380c5c <startup-0x1fc7f3a4>
  58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	00180213 	andseq	r0, r8, r3, lsl r2
  60:	00340700 	eorseq	r0, r4, r0, lsl #14
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	11010b08 	tstne	r1, r8, lsl #22
  74:	00061201 	andeq	r1, r6, r1, lsl #4
  78:	000f0900 	andeq	r0, pc, r0, lsl #18
  7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  80:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
  84:	03193f01 	tsteq	r9, #1, 30
  88:	3b0b3a0e 	blcc	2ce8c8 <startup-0x1fd31738>
  8c:	1119270b 	tstne	r9, fp, lsl #14
  90:	40061201 	andmi	r1, r6, r1, lsl #4
  94:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  98:	050b0000 	streq	r0, [fp, #-0]
  9c:	3a080300 	bcc	200ca4 <startup-0x1fdff35c>
  a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a4:	00180213 	andseq	r0, r8, r3, lsl r2
  a8:	11010000 	mrsne	r0, (UNDEF: 1)
  ac:	130e2501 	movwne	r2, #58625	; 0xe501
  b0:	1b0e030b 	blne	380ce4 <startup-0x1fc7f31c>
  b4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  b8:	00171006 	andseq	r1, r7, r6
  bc:	00160200 	andseq	r0, r6, r0, lsl #4
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c8:	24030000 	strcs	r0, [r3], #-0
  cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d0:	000e030b 	andeq	r0, lr, fp, lsl #6
  d4:	00240400 	eoreq	r0, r4, r0, lsl #8
  d8:	0b3e0b0b 	bleq	f82d0c <startup-0x1f07d2f4>
  dc:	00000803 	andeq	r0, r0, r3, lsl #16
  e0:	03011305 	movweq	r1, #4869	; 0x1305
  e4:	3a0b0b0e 	bcc	2c2d24 <startup-0x1fd3d2dc>
  e8:	010b3b0b 	tsteq	fp, fp, lsl #22
  ec:	06000013 			; <UNDEFINED> instruction: 0x06000013
  f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	0b381349 	bleq	e04e24 <startup-0x1f1fb1dc>
  fc:	35070000 	strcc	r0, [r7, #-0]
 100:	00134900 	andseq	r4, r3, r0, lsl #18
 104:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
 110:	13491927 	movtne	r1, #39207	; 0x9927
 114:	06120111 			; <UNDEFINED> instruction: 0x06120111
 118:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 11c:	00130119 	andseq	r0, r3, r9, lsl r1
 120:	00050900 	andeq	r0, r5, r0, lsl #18
 124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
 128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 12c:	00001802 	andeq	r1, r0, r2, lsl #16
 130:	11010b0a 	tstne	r1, sl, lsl #22
 134:	00061201 	andeq	r1, r6, r1, lsl #4
 138:	00340b00 	eorseq	r0, r4, r0, lsl #22
 13c:	0b3a0803 	bleq	e82150 <startup-0x1f17deb0>
 140:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	0300340c 	movweq	r3, #1036	; 0x40c
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 154:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 158:	0b0b000f 	bleq	2c019c <startup-0x1fd3fe64>
 15c:	00001349 	andeq	r1, r0, r9, asr #6
 160:	3f012e0e 	svccc	0x00012e0e
 164:	3a0e0319 	bcc	380dd0 <startup-0x1fc7f230>
 168:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 16c:	11134919 	tstne	r3, r9, lsl r9
 170:	40061201 	andmi	r1, r6, r1, lsl #4
 174:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 178:	00001301 	andeq	r1, r0, r1, lsl #6
 17c:	0300050f 	movweq	r0, #1295	; 0x50f
 180:	3b0b3a08 	blcc	2ce9a8 <startup-0x1fd31658>
 184:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 188:	10000018 	andne	r0, r0, r8, lsl r0
 18c:	13490101 	movtne	r0, #37121	; 0x9101
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
 198:	000b2f13 	andeq	r2, fp, r3, lsl pc
 19c:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 1a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	01111927 	tsteq	r1, r7, lsr #18
 1ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1b4:	13000013 	movwne	r0, #19
 1b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1bc:	0b3a0e03 	bleq	e839d0 <startup-0x1f17c630>
 1c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1cc:	00000019 	andeq	r0, r0, r9, lsl r0
 1d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1d8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 1dc:	10011117 	andne	r1, r1, r7, lsl r1
 1e0:	02000017 	andeq	r0, r0, #23
 1e4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	00001349 	andeq	r1, r0, r9, asr #6
 1f0:	0b002403 	bleq	9204 <startup-0x1fff6dfc>
 1f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1f8:	0400000e 	streq	r0, [r0], #-14
 1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
 200:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 204:	13050000 	movwne	r0, #20480	; 0x5000
 208:	0b0e0301 	bleq	380e14 <startup-0x1fc7f1ec>
 20c:	3b0b3a0b 	blcc	2cea40 <startup-0x1fd315c0>
 210:	0013010b 	andseq	r0, r3, fp, lsl #2
 214:	000d0600 	andeq	r0, sp, r0, lsl #12
 218:	0b3a0e03 	bleq	e83a2c <startup-0x1f17c5d4>
 21c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 220:	00000b38 	andeq	r0, r0, r8, lsr fp
 224:	03000d07 	movweq	r0, #3335	; 0xd07
 228:	3b0b3a08 	blcc	2cea50 <startup-0x1fd315b0>
 22c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 230:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 234:	0b0b0113 	bleq	2c0688 <startup-0x1fd3f978>
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	00001301 	andeq	r1, r0, r1, lsl #6
 240:	0b000f09 	bleq	3e6c <startup-0x1fffc194>
 244:	0013490b 	andseq	r4, r3, fp, lsl #18
 248:	01150a00 	tsteq	r5, r0, lsl #20
 24c:	13011927 	movwne	r1, #6439	; 0x1927
 250:	050b0000 	streq	r0, [fp, #-0]
 254:	00134900 	andseq	r4, r3, r0, lsl #18
 258:	00340c00 	eorseq	r0, r4, r0, lsl #24
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 264:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 268:	350d0000 	strcc	r0, [sp, #-0]
 26c:	00134900 	andseq	r4, r3, r0, lsl #18
 270:	00340e00 	eorseq	r0, r4, r0, lsl #28
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 280:	010f0000 	mrseq	r0, CPSR
 284:	01134901 	tsteq	r3, r1, lsl #18
 288:	10000013 	andne	r0, r0, r3, lsl r0
 28c:	13490021 	movtne	r0, #36897	; 0x9021
 290:	00000b2f 	andeq	r0, r0, pc, lsr #22
 294:	03003411 	movweq	r3, #1041	; 0x411
 298:	3b0b3a08 	blcc	2ceac0 <startup-0x1fd31540>
 29c:	3f13490b 	svccc	0x0013490b
 2a0:	00180219 	andseq	r0, r8, r9, lsl r2
 2a4:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 2a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2b0:	13491927 	movtne	r1, #39207	; 0x9927
 2b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2bc:	00130119 	andseq	r0, r3, r9, lsl r1
 2c0:	010b1300 	mrseq	r1, (UNDEF: 59)
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	34140000 	ldrcc	r0, [r4], #-0
 2cc:	3a080300 	bcc	200ed4 <startup-0x1fdff12c>
 2d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d4:	00180213 	andseq	r0, r8, r3, lsl r2
 2d8:	002e1500 	eoreq	r1, lr, r0, lsl #10
 2dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e0:	0b3b0b3a 	bleq	ec2fd0 <startup-0x1f13d030>
 2e4:	01111927 	tsteq	r1, r7, lsr #18
 2e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2ec:	00194296 	mulseq	r9, r6, r2
 2f0:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 2f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	01111927 	tsteq	r1, r7, lsr #18
 300:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 304:	01194297 			; <UNDEFINED> instruction: 0x01194297
 308:	17000013 	smladne	r0, r3, r0, r0
 30c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 318:	34180000 	ldrcc	r0, [r8], #-0
 31c:	3a0e0300 	bcc	380f24 <startup-0x1fc7f0dc>
 320:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 324:	00180213 	andseq	r0, r8, r3, lsl r2
 328:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 32c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	01111927 	tsteq	r1, r7, lsr #18
 338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 33c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 340:	1a000013 	bne	394 <startup-0x1ffffc6c>
 344:	0111010b 	tsteq	r1, fp, lsl #2
 348:	13010612 	movwne	r0, #5650	; 0x1612
 34c:	341b0000 	ldrcc	r0, [fp], #-0
 350:	3a080300 	bcc	200f58 <startup-0x1fdff0a8>
 354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	00180213 	andseq	r0, r8, r3, lsl r2
 35c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 360:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 364:	0b3b0b3a 	bleq	ec3054 <startup-0x1f13cfac>
 368:	13491927 	movtne	r1, #39207	; 0x9927
 36c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 374:	00130119 	andseq	r0, r3, r9, lsl r1
 378:	00051d00 	andeq	r1, r5, r0, lsl #26
 37c:	0b3a0803 	bleq	e82390 <startup-0x1f17dc70>
 380:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 384:	00001802 	andeq	r1, r0, r2, lsl #16
 388:	3f002e1e 	svccc	0x00002e1e
 38c:	3a0e0319 	bcc	380ff8 <startup-0x1fc7f008>
 390:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 394:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 398:	97184006 	ldrls	r4, [r8, -r6]
 39c:	00001942 	andeq	r1, r0, r2, asr #18
 3a0:	01110100 	tsteq	r1, r0, lsl #2
 3a4:	0b130e25 	bleq	4c3c40 <startup-0x1fb3c3c0>
 3a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b0:	00001710 	andeq	r1, r0, r0, lsl r7
 3b4:	0b002402 	bleq	93c4 <startup-0x1fff6c3c>
 3b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3bc:	0300000e 	movweq	r0, #14
 3c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3c4:	0b3b0b3a 	bleq	ec30b4 <startup-0x1f13cf4c>
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	0b002404 	bleq	93e4 <startup-0x1fff6c1c>
 3d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3d4:	05000008 	streq	r0, [r0, #-8]
 3d8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3dc:	0b3a0b0b 	bleq	e83010 <startup-0x1f17cff0>
 3e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3e4:	0d060000 	stceq	0, cr0, [r6, #-0]
 3e8:	3a0e0300 	bcc	380ff0 <startup-0x1fc7f010>
 3ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3f4:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 3f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3fc:	0b3b0b3a 	bleq	ec30ec <startup-0x1f13cf14>
 400:	01111927 	tsteq	r1, r7, lsr #18
 404:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 408:	01194296 			; <UNDEFINED> instruction: 0x01194296
 40c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 410:	08030005 	stmdaeq	r3, {r0, r2}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 41c:	0f090000 	svceq	0x00090000
 420:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 424:	0a000013 	beq	478 <startup-0x1ffffb88>
 428:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 42c:	0b3b0b3a 	bleq	ec311c <startup-0x1f13cee4>
 430:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 434:	340b0000 	strcc	r0, [fp], #-0
 438:	3a0e0300 	bcc	381040 <startup-0x1fc7efc0>
 43c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	00180213 	andseq	r0, r8, r3, lsl r2
 444:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 448:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 44c:	0b3b0b3a 	bleq	ec313c <startup-0x1f13cec4>
 450:	01111927 	tsteq	r1, r7, lsr #18
 454:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 458:	00194296 	mulseq	r9, r6, r2
 45c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 460:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 464:	0b3b0b3a 	bleq	ec3154 <startup-0x1f13ceac>
 468:	13491927 	movtne	r1, #39207	; 0x9927
 46c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 470:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 474:	00130119 	andseq	r0, r3, r9, lsl r1
 478:	00340e00 	eorseq	r0, r4, r0, lsl #28
 47c:	0b3a0803 	bleq	e82490 <startup-0x1f17db70>
 480:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 484:	00001802 	andeq	r1, r0, r2, lsl #16
 488:	3f012e0f 	svccc	0x00012e0f
 48c:	3a0e0319 	bcc	3810f8 <startup-0x1fc7ef08>
 490:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 494:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 498:	97184006 	ldrls	r4, [r8, -r6]
 49c:	13011942 	movwne	r1, #6466	; 0x1942
 4a0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 4a4:	03193f01 	tsteq	r9, #1, 30
 4a8:	3b0b3a0e 	blcc	2cece8 <startup-0x1fd31318>
 4ac:	1119270b 	tstne	r9, fp, lsl #14
 4b0:	40061201 	andmi	r1, r6, r1, lsl #4
 4b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4b8:	01000000 	mrseq	r0, (UNDEF: 0)
 4bc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4c0:	0e030b13 	vmoveq.32	d3[0], r0
 4c4:	01110e1b 	tsteq	r1, fp, lsl lr
 4c8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 4cc:	24020000 	strcs	r0, [r2], #-0
 4d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4d4:	000e030b 	andeq	r0, lr, fp, lsl #6
 4d8:	00160300 	andseq	r0, r6, r0, lsl #6
 4dc:	0b3a0e03 	bleq	e83cf0 <startup-0x1f17c310>
 4e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4e4:	24040000 	strcs	r0, [r4], #-0
 4e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4ec:	0008030b 	andeq	r0, r8, fp, lsl #6
 4f0:	01130500 	tsteq	r3, r0, lsl #10
 4f4:	0b0b0e03 	bleq	2c3d08 <startup-0x1fd3c2f8>
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	00001301 	andeq	r1, r0, r1, lsl #6
 500:	03000d06 	movweq	r0, #3334	; 0xd06
 504:	3b0b3a0e 	blcc	2ced44 <startup-0x1fd312bc>
 508:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 50c:	0700000b 	streq	r0, [r0, -fp]
 510:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 51c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 520:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 524:	08000019 	stmdaeq	r0, {r0, r3, r4}
 528:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 52c:	0b3a0e03 	bleq	e83d40 <startup-0x1f17c2c0>
 530:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 534:	06120111 			; <UNDEFINED> instruction: 0x06120111
 538:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 53c:	00130119 	andseq	r0, r3, r9, lsl r1
 540:	010b0900 	tsteq	fp, r0, lsl #18
 544:	06120111 			; <UNDEFINED> instruction: 0x06120111
 548:	340a0000 	strcc	r0, [sl], #-0
 54c:	3a0e0300 	bcc	381154 <startup-0x1fc7eeac>
 550:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 554:	00180213 	andseq	r0, r8, r3, lsl r2
 558:	00340b00 	eorseq	r0, r4, r0, lsl #22
 55c:	0b3a0803 	bleq	e82570 <startup-0x1f17da90>
 560:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 564:	00001802 	andeq	r1, r0, r2, lsl #16
 568:	0300050c 	movweq	r0, #1292	; 0x50c
 56c:	3b0b3a08 	blcc	2ced94 <startup-0x1fd3126c>
 570:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 574:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 578:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 57c:	0b3a0e03 	bleq	e83d90 <startup-0x1f17c270>
 580:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 584:	01111349 	tsteq	r1, r9, asr #6
 588:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 58c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 590:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 594:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
 59c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 5a4:	03193f01 	tsteq	r9, #1, 30
 5a8:	3b0b3a0e 	blcc	2cede8 <startup-0x1fd31218>
 5ac:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 5b0:	96184006 	ldrls	r4, [r8], -r6
 5b4:	13011942 	movwne	r1, #6466	; 0x1942
 5b8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 5bc:	03193f01 	tsteq	r9, #1, 30
 5c0:	3b0b3a0e 	blcc	2cee00 <startup-0x1fd31200>
 5c4:	1119270b 	tstne	r9, fp, lsl #14
 5c8:	40061201 	andmi	r1, r6, r1, lsl #4
 5cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5d0:	00001301 	andeq	r1, r0, r1, lsl #6
 5d4:	3f012e11 	svccc	0x00012e11
 5d8:	3a0e0319 	bcc	381244 <startup-0x1fc7edbc>
 5dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e4:	97184006 	ldrls	r4, [r8, -r6]
 5e8:	00001942 	andeq	r1, r0, r2, asr #18
 5ec:	01110100 	tsteq	r1, r0, lsl #2
 5f0:	0b130e25 	bleq	4c3e8c <startup-0x1fb3c174>
 5f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 5f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5fc:	00001710 	andeq	r1, r0, r0, lsl r7
 600:	0b002402 	bleq	9610 <startup-0x1fff69f0>
 604:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 608:	0300000e 	movweq	r0, #14
 60c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 610:	0b3b0b3a 	bleq	ec3300 <startup-0x1f13cd00>
 614:	00001349 	andeq	r1, r0, r9, asr #6
 618:	0b002404 	bleq	9630 <startup-0x1fff69d0>
 61c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 620:	05000008 	streq	r0, [r0, #-8]
 624:	13490035 	movtne	r0, #36917	; 0x9035
 628:	13060000 	movwne	r0, #24576	; 0x6000
 62c:	3a0b0b01 	bcc	2c3238 <startup-0x1fd3cdc8>
 630:	010b3b0b 	tsteq	fp, fp, lsl #22
 634:	07000013 	smladeq	r0, r3, r0, r0
 638:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 63c:	0b3b0b3a 	bleq	ec332c <startup-0x1f13ccd4>
 640:	0b381349 	bleq	e0536c <startup-0x1f1fac94>
 644:	0d080000 	stceq	0, cr0, [r8, #-0]
 648:	3a080300 	bcc	201250 <startup-0x1fdfedb0>
 64c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 650:	000b3813 	andeq	r3, fp, r3, lsl r8
 654:	00160900 	andseq	r0, r6, r0, lsl #18
 658:	0b3a0803 	bleq	e8266c <startup-0x1f17d994>
 65c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 660:	340a0000 	strcc	r0, [sl], #-0
 664:	3a0e0300 	bcc	38126c <startup-0x1fc7ed94>
 668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 66c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 670:	0b000018 	bleq	6d8 <startup-0x1ffff928>
 674:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 678:	0b3a0e03 	bleq	e83e8c <startup-0x1f17c174>
 67c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 680:	06120111 			; <UNDEFINED> instruction: 0x06120111
 684:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 688:	00130119 	andseq	r0, r3, r9, lsl r1
 68c:	00050c00 	andeq	r0, r5, r0, lsl #24
 690:	0b3a0803 	bleq	e826a4 <startup-0x1f17d95c>
 694:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 698:	00001802 	andeq	r1, r0, r2, lsl #16
 69c:	3f002e0d 	svccc	0x00002e0d
 6a0:	3a0e0319 	bcc	38130c <startup-0x1fc7ecf4>
 6a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6ac:	97184006 	ldrls	r4, [r8, -r6]
 6b0:	00001942 	andeq	r1, r0, r2, asr #18
 6b4:	3f002e0e 	svccc	0x00002e0e
 6b8:	3a0e0319 	bcc	381324 <startup-0x1fc7ecdc>
 6bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6c4:	96184006 	ldrls	r4, [r8], -r6
 6c8:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	011f0002 	tsteq	pc, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000b8 	strhcs	r0, [r0], -r8
  34:	00000200 	andeq	r0, r0, r0, lsl #4
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	04500002 	ldrbeq	r0, [r0], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  54:	000005f4 	strdeq	r0, [r0], -r4
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0a2d0002 	beq	b4007c <startup-0x1f4bff84>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200008ac 	andcs	r0, r0, ip, lsr #17
  7c:	00000306 	andeq	r0, r0, r6, lsl #6
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0db40002 	ldceq	0, cr0, [r4, #8]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000bb4 			; <UNDEFINED> instruction: 0x20000bb4
  9c:	00000508 	andeq	r0, r0, r8, lsl #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	11620002 	cmnne	r2, r2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200010bc 	strhcs	r1, [r0], -ip
  bc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000013b 	andeq	r0, r0, fp, lsr r1
   4:	00f20002 	rscseq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
  20:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  24:	616e735f 	cmnvs	lr, pc, asr r3
  28:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; fffffe84 <player+0xdfffe8d4>
  2c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  30:	616e732f 	cmnvs	lr, pc, lsr #6
  34:	6300656b 	movwvs	r6, #1387	; 0x56b
  38:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  3c:	70706165 	rsbsvc	r6, r0, r5, ror #2
  40:	646f635c 	strbtvs	r6, [pc], #-860	; 48 <startup-0x1fffffb8>
  44:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  48:	6f745c65 	svcvs	0x00745c65
  4c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  50:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  54:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  58:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  5c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  60:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  64:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  68:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  6c:	616d5c65 	cmnvs	sp, r5, ror #24
  70:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  74:	3a630065 	bcc	18c0210 <startup-0x1e73fdf0>
  78:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  7c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  80:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  84:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  88:	6f6f745c 	svcvs	0x006f745c
  8c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  90:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  94:	615c6d72 	cmpvs	ip, r2, ror sp
  98:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  9c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  a4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  a8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  ac:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
  b0:	65500000 	ldrbvs	r0, [r0, #-0]
  b4:	73656c6c 	cmnvc	r5, #108, 24	; 0x6c00
  b8:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
  bc:	676e5272 			; <UNDEFINED> instruction: 0x676e5272
  c0:	0100632e 	tsteq	r0, lr, lsr #6
  c4:	645f0000 	ldrbvs	r0, [pc], #-0	; cc <startup-0x1fffff34>
  c8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  cc:	745f746c 	ldrbvc	r7, [pc], #-1132	; d4 <startup-0x1fffff2c>
  d0:	73657079 	cmnvc	r5, #121	; 0x79
  d4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  d8:	735f0000 	cmpvc	pc, #0
  dc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  e0:	00682e74 	rsbeq	r2, r8, r4, ror lr
  e4:	50000003 	andpl	r0, r0, r3
  e8:	656c6c65 	strbvs	r6, [ip, #-3173]!	; 0xfffff39b
  ec:	70755373 	rsbsvc	r5, r5, r3, ror r3
  f0:	6e527265 	cdpvs	2, 5, cr7, cr2, cr5, {3}
  f4:	00682e67 	rsbeq	r2, r8, r7, ror #28
  f8:	00000001 	andeq	r0, r0, r1
  fc:	10020500 	andne	r0, r2, r0, lsl #10
 100:	17200000 	strne	r0, [r0, -r0]!
 104:	02003d59 	andeq	r3, r0, #5696	; 0x1640
 108:	003d0304 	eorseq	r0, sp, r4, lsl #6
 10c:	49030402 	stmdbmi	r3, {r1, sl}
 110:	01040200 	mrseq	r0, R12_usr
 114:	3f063c06 	svccc	0x00063c06
 118:	3d754b4d 	fldmdbxcc	r5!, {d20-d57}	;@ Deprecated
 11c:	03040200 	movweq	r0, #16896	; 0x4200
 120:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 124:	002f0803 	eoreq	r0, pc, r3, lsl #16
 128:	59030402 	stmdbpl	r3, {r1, sl}
 12c:	03040200 	movweq	r0, #16896	; 0x4200
 130:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 134:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 138:	07022141 	streq	r2, [r2, -r1, asr #2]
 13c:	55010100 	strpl	r0, [r1, #-256]	; 0xffffff00
 140:	02000001 	andeq	r0, r0, #1
 144:	0000fa00 	andeq	pc, r0, r0, lsl #20
 148:	fb010200 	blx	40952 <startup-0x1ffbf6ae>
 14c:	01000d0e 	tsteq	r0, lr, lsl #26
 150:	00010101 	andeq	r0, r1, r1, lsl #2
 154:	00010000 	andeq	r0, r1, r0
 158:	3a5a0100 	bcc	1680560 <startup-0x1e97faa0>
 15c:	4144452f 	cmpmi	r4, pc, lsr #10
 160:	5f323834 	svcpl	0x00323834
 164:	6b616e73 	blvs	185bb38 <startup-0x1e7a44c8>
 168:	616c2f65 	cmnvs	ip, r5, ror #30
 16c:	2f356262 	svccs	0x00356262
 170:	6b616e73 	blvs	185bb44 <startup-0x1e7a44bc>
 174:	3a630065 	bcc	18c0310 <startup-0x1e73fcf0>
 178:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 17c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 180:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 184:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 188:	6f6f745c 	svcvs	0x006f745c
 18c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 190:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 194:	615c6d72 	cmpvs	ip, r2, ror sp
 198:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 19c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 1a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 1a4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 1a8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 1ac:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 1b0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 1b4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 1b8:	61657363 	cmnvs	r5, r3, ror #6
 1bc:	635c7070 	cmpvs	ip, #112	; 0x70
 1c0:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 1c4:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 1c8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 0 <startup-0x20000000>
 1cc:	63675c73 	cmnvs	r7, #29440	; 0x7300
 1d0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 1d4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 1d8:	6f6e2d6d 	svcvs	0x006e2d6d
 1dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 1e0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 1e4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 1e8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 1ec:	00737973 	rsbseq	r7, r3, r3, ror r9
 1f0:	455c3a5a 	ldrbmi	r3, [ip, #-2650]	; 0xfffff5a6
 1f4:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 1f8:	696c5c32 	stmdbvs	ip!, {r1, r4, r5, sl, fp, ip, lr}^
 1fc:	695c7362 	ldmdbvs	ip, {r1, r5, r6, r8, r9, ip, sp, lr}^
 200:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 204:	00006564 	andeq	r6, r0, r4, ror #10
 208:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 20c:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 210:	00000100 	andeq	r0, r0, r0, lsl #2
 214:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 218:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 21c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 220:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 224:	00000200 	andeq	r0, r0, r0, lsl #4
 228:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 22c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 230:	00030068 	andeq	r0, r3, r8, rrx
 234:	62696c00 	rsbvs	r6, r9, #0, 24
 238:	4f495047 	svcmi	0x00495047
 23c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 240:	00000000 	andeq	r0, r0, r0
 244:	00b80205 	adcseq	r0, r8, r5, lsl #4
 248:	4d162000 	ldcmi	0, cr2, [r6, #-0]
 24c:	594b3d2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}^
 250:	753d3e2f 	ldrvc	r3, [sp, #-3631]!	; 0xfffff1d1
 254:	753dbb59 	ldrvc	fp, [sp, #-2905]!	; 0xfffff4a7
 258:	4c917568 	cfldr32mi	mvfx7, [r1], {104}	; 0x68
 25c:	214b834c 	cmpcs	fp, ip, asr #6
 260:	4b5c6491 	blmi	17194ac <startup-0x1e8e6b54>
 264:	0079914c 	rsbseq	r9, r9, ip, asr #2
 268:	06010402 	streq	r0, [r1], -r2, lsl #8
 26c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 270:	02005802 	andeq	r5, r0, #131072	; 0x20000
 274:	06580304 	ldrbeq	r0, [r8], -r4, lsl #6
 278:	0200e659 	andeq	lr, r0, #93323264	; 0x5900000
 27c:	76220104 	strtvc	r0, [r2], -r4, lsl #2
 280:	8391594b 	orrshi	r5, r1, #1228800	; 0x12c000
 284:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 288:	0200e002 	andeq	lr, r0, #2
 28c:	90060104 	andls	r0, r6, r4, lsl #2
 290:	02216d06 	eoreq	r6, r1, #384	; 0x180
 294:	01010004 	tsteq	r1, r4
 298:	000001ec 	andeq	r0, r0, ip, ror #3
 29c:	010f0002 	tsteq	pc, r2
 2a0:	01020000 	mrseq	r0, (UNDEF: 2)
 2a4:	000d0efb 	strdeq	r0, [sp], -fp
 2a8:	01010101 	tsteq	r1, r1, lsl #2
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	5a010000 	bpl	402b8 <startup-0x1ffbfd48>
 2b4:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
 2b8:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 2bc:	616e735f 	cmnvs	lr, pc, asr r3
 2c0:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; 11c <startup-0x1ffffee4>
 2c4:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 2c8:	616e732f 	cmnvs	lr, pc, lsr #6
 2cc:	6300656b 	movwvs	r6, #1387	; 0x56b
 2d0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 2d4:	70706165 	rsbsvc	r6, r0, r5, ror #2
 2d8:	646f635c 	strbtvs	r6, [pc], #-860	; 2e0 <startup-0x1ffffd20>
 2dc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 2e0:	6f745c65 	svcvs	0x00745c65
 2e4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 2e8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 2ec:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 2f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 2f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 300:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 304:	616d5c65 	cmnvs	sp, r5, ror #24
 308:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 30c:	3a630065 	bcc	18c04a8 <startup-0x1e73fb58>
 310:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 314:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 318:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 31c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 320:	6f6f745c 	svcvs	0x006f745c
 324:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 328:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 32c:	615c6d72 	cmpvs	ip, r2, ror sp
 330:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 334:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 338:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 33c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 340:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 344:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 348:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
 34c:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 350:	6c5c3238 	lfmvs	f3, 2, [ip], {56}	; 0x38
 354:	5c736269 	lfmpl	f6, 2, [r3], #-420	; 0xfffffe5c
 358:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 35c:	00656475 	rsbeq	r6, r5, r5, ror r4
 360:	61747300 	cmnvs	r4, r0, lsl #6
 364:	70757472 	rsbsvc	r7, r5, r2, ror r4
 368:	0100632e 	tsteq	r0, lr, lsr #6
 36c:	645f0000 	ldrbvs	r0, [pc], #-0	; 374 <startup-0x1ffffc8c>
 370:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 374:	745f746c 	ldrbvc	r7, [pc], #-1132	; 37c <startup-0x1ffffc84>
 378:	73657079 	cmnvc	r5, #121	; 0x79
 37c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 380:	735f0000 	cmpvc	pc, #0
 384:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 388:	00682e74 	rsbeq	r2, r8, r4, ror lr
 38c:	6c000003 	stcvs	0, cr0, [r0], {3}
 390:	50476269 	subpl	r6, r7, r9, ror #4
 394:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 398:	00000400 	andeq	r0, r0, r0, lsl #8
 39c:	6c6c6550 	cfstr64vs	mvdx6, [ip], #-320	; 0xfffffec0
 3a0:	75537365 	ldrbvc	r7, [r3, #-869]	; 0xfffffc9b
 3a4:	52726570 	rsbspl	r6, r2, #112, 10	; 0x1c000000
 3a8:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 3ac:	00000100 	andeq	r0, r0, r0, lsl #2
 3b0:	02050000 	andeq	r0, r5, #0
 3b4:	20000000 	andcs	r0, r0, r0
 3b8:	13011103 	movwne	r1, #4355	; 0x1103
 3bc:	0003025e 	andeq	r0, r3, lr, asr r2
 3c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 3c4:	0002b802 	andeq	fp, r2, r2, lsl #16
 3c8:	013f0320 	teqeq	pc, r0, lsr #6
 3cc:	31594b69 	cmpcc	r9, r9, ror #22
 3d0:	91913f59 	orrsls	r3, r1, r9, asr pc
 3d4:	5b4c213d 	blpl	13088d0 <startup-0x1ecf7730>
 3d8:	3d4b3f67 	stclcc	15, cr3, [fp, #-412]	; 0xfffffe64
 3dc:	91913d4c 	orrsls	r3, r1, ip, asr #26
 3e0:	4b694c21 	blmi	1a5346c <startup-0x1e5acb94>
 3e4:	3f594d3d 	svccc	0x00594d3d
 3e8:	213d9191 	teqcs	sp, r1	; <illegal shifter operand>
 3ec:	3f675b4d 	svccc	0x00675b4d
 3f0:	3d31594b 			; <UNDEFINED> instruction: 0x3d31594b
 3f4:	52219291 	eorpl	r9, r1, #268435465	; 0x10000009
 3f8:	7583914b 	strvc	r9, [r3, #331]	; 0x14b
 3fc:	4b599168 	blmi	16649a4 <startup-0x1e99b65c>
 400:	ad754c84 	ldclge	12, cr4, [r5, #-528]!	; 0xfffffdf0
 404:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 408:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 40c:	59223d5a 	stmdbpl	r2!, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
 410:	01040200 	mrseq	r0, R12_usr
 414:	bb06ba06 	bllt	1aec34 <startup-0x1fe513cc>
 418:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 41c:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
 420:	82060104 	andhi	r0, r6, #4, 2
 424:	004b6e06 	subeq	r6, fp, r6, lsl #28
 428:	06010402 	streq	r0, [r1], -r2, lsl #8
 42c:	4b750674 	blmi	1d41e04 <startup-0x1e2be1fc>
 430:	4b4b6759 	blmi	12da19c <startup-0x1ed25e64>
 434:	8567d87a 	strbhi	sp, [r7, #-2170]!	; 0xfffff786
 438:	ca939184 	bgt	fe4e4a50 <player+0xde4e34a0>
 43c:	4c4c834b 	mcrrmi	3, 4, r8, ip, cr11
 440:	4c4b9167 	stfmip	f1, [fp], {103}	; 0x67
 444:	4b599f4c 	blmi	166817c <startup-0x1e997e84>
 448:	304a1703 	subcc	r1, sl, r3, lsl #14
 44c:	593e752f 	ldmdbpl	lr!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}
 450:	ca4b2f2f 	bgt	12cc114 <startup-0x1ed33eec>
 454:	592f2f3d 	stmdbpl	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 458:	599f4b4b 	ldmibpl	pc, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
 45c:	303dd83d 	eorscc	sp, sp, sp, lsr r8
 460:	4b4b592f 	blmi	12d6924 <startup-0x1ed296dc>
 464:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 468:	20060104 	andcs	r0, r6, r4, lsl #2
 46c:	4e2f7506 	cfsh64mi	mvdx7, mvdx15, #6
 470:	23674d5c 	cmncs	r7, #92, 26	; 0x1700
 474:	22597675 	subscs	r7, r9, #122683392	; 0x7500000
 478:	4b4b2259 	blmi	12c8de4 <startup-0x1ed3721c>
 47c:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
 480:	02205a03 	eoreq	r5, r0, #12288	; 0x3000
 484:	01010016 	tsteq	r1, r6, lsl r0
 488:	0000016c 	andeq	r0, r0, ip, ror #2
 48c:	00f90002 	rscseq	r0, r9, r2
 490:	01020000 	mrseq	r0, (UNDEF: 2)
 494:	000d0efb 	strdeq	r0, [sp], -fp
 498:	01010101 	tsteq	r1, r1, lsl #2
 49c:	01000000 	mrseq	r0, (UNDEF: 0)
 4a0:	5a010000 	bpl	404a8 <startup-0x1ffbfb58>
 4a4:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
 4a8:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 4ac:	616e735f 	cmnvs	lr, pc, asr r3
 4b0:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; 30c <startup-0x1ffffcf4>
 4b4:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 4b8:	616e732f 	cmnvs	lr, pc, lsr #6
 4bc:	6300656b 	movwvs	r6, #1387	; 0x56b
 4c0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 4c4:	70706165 	rsbsvc	r6, r0, r5, ror #2
 4c8:	646f635c 	strbtvs	r6, [pc], #-860	; 4d0 <startup-0x1ffffb30>
 4cc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 4d0:	6f745c65 	svcvs	0x00745c65
 4d4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 4d8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 4dc:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 4e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 4e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4ec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 4f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 4f4:	616d5c65 	cmnvs	sp, r5, ror #24
 4f8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 4fc:	3a630065 	bcc	18c0698 <startup-0x1e73f968>
 500:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 504:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 508:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 50c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 510:	6f6f745c 	svcvs	0x006f745c
 514:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 518:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 51c:	615c6d72 	cmpvs	ip, r2, ror sp
 520:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 524:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 528:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 52c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 530:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 534:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 538:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
 53c:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 540:	6c5c3238 	lfmvs	f3, 2, [ip], {56}	; 0x38
 544:	5c736269 	lfmpl	f6, 2, [r3], #-420	; 0xfffffe5c
 548:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 54c:	00656475 	rsbeq	r6, r5, r5, ror r4
 550:	63734100 	cmnvs	r3, #0, 2
 554:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 558:	00000100 	andeq	r0, r0, r0, lsl #2
 55c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 560:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 564:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 568:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 56c:	00000200 	andeq	r0, r0, r0, lsl #4
 570:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 574:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 578:	00030068 	andeq	r0, r3, r8, rrx
 57c:	62696c00 	rsbvs	r6, r9, #0, 24
 580:	4f495047 	svcmi	0x00495047
 584:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 588:	00000000 	andeq	r0, r0, r0
 58c:	08ac0205 	stmiaeq	ip!, {r0, r2, r9}
 590:	09032000 	stmdbeq	r3, {sp}
 594:	ad596801 	ldclge	8, cr6, [r9, #-4]
 598:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
 59c:	67684be5 	strbvs	r4, [r8, -r5, ror #23]!
 5a0:	2f3d4b3d 	svccs	0x003d4b3d
 5a4:	2f3d3d68 	svccs	0x003d3d68
 5a8:	2f3d4b2f 	svccs	0x003d4b2f
 5ac:	593d6776 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, r9, sl, sp, lr}
 5b0:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 5b4:	3d3d4c59 	ldccc	12, cr4, [sp, #-356]!	; 0xfffffe9c
 5b8:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 5bc:	3d3dae2f 	ldccc	14, cr10, [sp, #-188]!	; 0xffffff44
 5c0:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 5c4:	0075a02f 	rsbseq	sl, r5, pc, lsr #32
 5c8:	06010402 	streq	r0, [r1], -r2, lsl #8
 5cc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 5d0:	754c4b59 	strbvc	r4, [ip, #-2905]	; 0xfffff4a7
 5d4:	01040200 	mrseq	r0, R12_usr
 5d8:	83062006 	movwhi	r2, #24582	; 0x6006
 5dc:	4c4b593d 	mcrrmi	9, 3, r5, fp, cr13	; <UNPREDICTABLE>
 5e0:	4b4b672f 	blmi	12da2a4 <startup-0x1ed25d5c>
 5e4:	67913f4b 	ldrvs	r3, [r1, fp, asr #30]
 5e8:	4cad684b 	stcmi	8, cr6, [sp], #300	; 0x12c
 5ec:	4b4c6767 	blmi	131a390 <startup-0x1ece5c70>
 5f0:	024d7321 	subeq	r7, sp, #-2080374784	; 0x84000000
 5f4:	01010004 	tsteq	r1, r4
 5f8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5fc:	00fc0002 	rscseq	r0, ip, r2
 600:	01020000 	mrseq	r0, (UNDEF: 2)
 604:	000d0efb 	strdeq	r0, [sp], -fp
 608:	01010101 	tsteq	r1, r1, lsl #2
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	5a010000 	bpl	40618 <startup-0x1ffbf9e8>
 614:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
 618:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 61c:	616e735f 	cmnvs	lr, pc, asr r3
 620:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; 47c <startup-0x1ffffb84>
 624:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 628:	616e732f 	cmnvs	lr, pc, lsr #6
 62c:	6300656b 	movwvs	r6, #1387	; 0x56b
 630:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 634:	70706165 	rsbsvc	r6, r0, r5, ror #2
 638:	646f635c 	strbtvs	r6, [pc], #-860	; 640 <startup-0x1ffff9c0>
 63c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 640:	6f745c65 	svcvs	0x00745c65
 644:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 648:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 64c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 650:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 654:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 658:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 65c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 660:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 664:	616d5c65 	cmnvs	sp, r5, ror #24
 668:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 66c:	3a630065 	bcc	18c0808 <startup-0x1e73f7f8>
 670:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 674:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 678:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 67c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 680:	6f6f745c 	svcvs	0x006f745c
 684:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 688:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 68c:	615c6d72 	cmpvs	ip, r2, ror sp
 690:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 694:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 698:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 69c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 6a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 6a4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 6a8:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
 6ac:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 6b0:	6c5c3238 	lfmvs	f3, 2, [ip], {56}	; 0x38
 6b4:	5c736269 	lfmpl	f6, 2, [r3], #-420	; 0xfffffe5c
 6b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6bc:	00656475 	rsbeq	r6, r5, r5, ror r4
 6c0:	61724700 	cmnvs	r2, r0, lsl #14
 6c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6c8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 6cc:	5f000001 	svcpl	0x00000001
 6d0:	61666564 	cmnvs	r6, r4, ror #10
 6d4:	5f746c75 	svcpl	0x00746c75
 6d8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 6dc:	00682e73 	rsbeq	r2, r8, r3, ror lr
 6e0:	5f000002 	svcpl	0x00000002
 6e4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 6e8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 6ec:	00000300 	andeq	r0, r0, r0, lsl #6
 6f0:	4762696c 	strbmi	r6, [r2, -ip, ror #18]!
 6f4:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
 6f8:	00040068 	andeq	r0, r4, r8, rrx
 6fc:	05000000 	streq	r0, [r0, #-0]
 700:	000bb402 	andeq	fp, fp, r2, lsl #8
 704:	01140320 	tsteq	r4, r0, lsr #6
 708:	4bc95967 	blmi	ff256cac <player+0xdf2556fc>
 70c:	c9596768 	ldmdbgt	r9, {r3, r5, r6, r8, r9, sl, sp, lr}^
 710:	03677659 	cmneq	r7, #93323264	; 0x5900000
 714:	70037410 	andvc	r7, r3, r0, lsl r4
 718:	4a100320 	bmi	4013a0 <startup-0x1fbfec60>
 71c:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 720:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 724:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 728:	3d3d4c22 	ldccc	12, cr4, [sp, #-136]!	; 0xffffff78
 72c:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 730:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
 734:	01040200 	mrseq	r0, R12_usr
 738:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 73c:	02002f01 	andeq	r2, r0, #1, 30
 740:	00750104 	rsbseq	r0, r5, r4, lsl #2
 744:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 748:	01040200 	mrseq	r0, R12_usr
 74c:	3d3d4c2f 	ldccc	12, cr4, [sp, #-188]!	; 0xffffff44
 750:	3d3d67ae 	ldccc	7, cr6, [sp, #-696]!	; 0xfffffd48
 754:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 758:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
 75c:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 760:	ae3d303d 	mrcge	0, 1, r3, cr13, cr13, {1}
 764:	2f594b91 	svccs	0x00594b91
 768:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 76c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 770:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 774:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 778:	914c833d 	cmpls	ip, sp, lsr r3
 77c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 780:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 784:	ade74c67 	stclge	12, cr4, [r7, #412]!	; 0x19c
 788:	4b4b2108 	blmi	12c8bb0 <startup-0x1ed37450>
 78c:	bb5b4b68 	bllt	16d3534 <startup-0x1e92cacc>
 790:	4bad91c9 	blmi	feb64ebc <player+0xdeb6390c>
 794:	689fd8a0 	ldmvs	pc, {r5, r7, fp, ip, lr, pc}	; <UNPREDICTABLE>
 798:	4b9f4b3d 	blmi	fe7d3494 <player+0xde7d1ee4>
 79c:	03040200 	movweq	r0, #16896	; 0x4200
 7a0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 7a4:	02004903 	andeq	r4, r0, #49152	; 0xc000
 7a8:	58060104 	stmdapl	r6, {r2, r8}
 7ac:	02040200 	andeq	r0, r4, #0, 4
 7b0:	02004706 	andeq	r4, r0, #1572864	; 0x180000
 7b4:	58060104 	stmdapl	r6, {r2, r8}
 7b8:	2f4d5106 	svccs	0x004d5106
 7bc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 7c0:	4c4c4b3f 	vmovmi	d31, r4, ip
 7c4:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
 7c8:	01010003 	tsteq	r1, r3
 7cc:	0000010f 	andeq	r0, r0, pc, lsl #2
 7d0:	00e60002 	rsceq	r0, r6, r2
 7d4:	01020000 	mrseq	r0, (UNDEF: 2)
 7d8:	000d0efb 	strdeq	r0, [sp], -fp
 7dc:	01010101 	tsteq	r1, r1, lsl #2
 7e0:	01000000 	mrseq	r0, (UNDEF: 0)
 7e4:	5a010000 	bpl	407ec <startup-0x1ffbf814>
 7e8:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
 7ec:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 7f0:	616e735f 	cmnvs	lr, pc, asr r3
 7f4:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; 650 <startup-0x1ffff9b0>
 7f8:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 7fc:	616e732f 	cmnvs	lr, pc, lsr #6
 800:	6300656b 	movwvs	r6, #1387	; 0x56b
 804:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 808:	70706165 	rsbsvc	r6, r0, r5, ror #2
 80c:	646f635c 	strbtvs	r6, [pc], #-860	; 814 <startup-0x1ffff7ec>
 810:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 814:	6f745c65 	svcvs	0x00745c65
 818:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 81c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 820:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 824:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 828:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 82c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 830:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 834:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 838:	616d5c65 	cmnvs	sp, r5, ror #24
 83c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 840:	3a630065 	bcc	18c09dc <startup-0x1e73f624>
 844:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 848:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 84c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 850:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 854:	6f6f745c 	svcvs	0x006f745c
 858:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 85c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 860:	615c6d72 	cmpvs	ip, r2, ror sp
 864:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 868:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 86c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 870:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 874:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 878:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 87c:	626e0000 	rsbvs	r0, lr, #0
 880:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 884:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 888:	00000100 	andeq	r0, r0, r0, lsl #2
 88c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 890:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 894:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 898:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 89c:	00000200 	andeq	r0, r0, r0, lsl #4
 8a0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 8a4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 8a8:	00030068 	andeq	r0, r3, r8, rrx
 8ac:	5f626e00 	svcpl	0x00626e00
 8b0:	616c6564 	cmnvs	ip, r4, ror #10
 8b4:	00682e79 	rsbeq	r2, r8, r9, ror lr
 8b8:	00000001 	andeq	r0, r0, r1
 8bc:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
 8c0:	19200010 	stmdbne	r0!, {r4}
 8c4:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 8c8:	2f763d3d 	svccs	0x00763d3d
 8cc:	1d334b59 	fldmdbxne	r3!, {d4-d47}	;@ Deprecated
 8d0:	2fa03e3d 	svccs	0x00a03e3d
 8d4:	4ba03d3d 	blmi	fe80fdd0 <player+0xde80e820>
 8d8:	07022f3d 	smladxeq	r2, sp, pc, r2	; <UNPREDICTABLE>
 8dc:	Address 0x000008dc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
   4:	4e470065 	cdpmi	0, 4, cr0, cr7, cr5, {3}
   8:	31432055 	qdaddcc	r2, r5, r3
   c:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
  10:	20312e32 	eorscs	r2, r1, r2, lsr lr
  14:	37313032 			; <UNDEFINED> instruction: 0x37313032
  18:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
  1c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  20:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  24:	5b202965 	blpl	80a5c0 <startup-0x1f7f5a40>
  28:	2f4d5241 	svccs	0x004d5241
  2c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  30:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  34:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
  38:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  3c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  40:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  44:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  48:	30323535 	eorscc	r3, r2, r5, lsr r5
  4c:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
  50:	6f6c666d 	svcvs	0x006c666d
  54:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  58:	733d6962 	teqvc	sp, #1605632	; 0x188000
  5c:	2074666f 	rsbscs	r6, r4, pc, ror #12
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  6c:	613d6863 	teqvs	sp, r3, ror #16
  70:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  74:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  78:	4f2d2067 	svcmi	0x002d2067
  7c:	6e750030 	mrcvs	0, 3, r0, cr5, cr0, {1}
  80:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  84:	63206465 			; <UNDEFINED> instruction: 0x63206465
  88:	00726168 	rsbseq	r6, r2, r8, ror #2
  8c:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
  90:	00676e52 	rsbeq	r6, r7, r2, asr lr
  94:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  98:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
  9c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  a0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  a4:	5f00746e 	svcpl	0x0000746e
  a8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  ac:	5f323374 	svcpl	0x00323374
  b0:	6f6c0074 	svcvs	0x006c0074
  b4:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  b8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  bc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  c0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  c4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  c8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  cc:	6f6c2067 	svcvs	0x006c2067
  d0:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  d4:	5a00746e 	bpl	1d294 <startup-0x1ffe2d6c>
  d8:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
  dc:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  e0:	616e735f 	cmnvs	lr, pc, asr r3
  e4:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; ffffff40 <player+0xdfffe990>
  e8:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  ec:	616e732f 	cmnvs	lr, pc, lsr #6
  f0:	502f656b 	eorpl	r6, pc, fp, ror #10
  f4:	656c6c65 	strbvs	r6, [ip, #-3173]!	; 0xfffff39b
  f8:	70755373 	rsbsvc	r5, r5, r3, ror r3
  fc:	6e527265 	cdpvs	2, 5, cr7, cr2, cr5, {3}
 100:	00632e67 	rsbeq	r2, r3, r7, ror #28
 104:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 108:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 10c:	6e720074 	mrcvs	0, 3, r0, cr2, cr4, {3}
 110:	726f7767 	rsbvc	r7, pc, #27000832	; 0x19c0000
 114:	00745f64 	rsbseq	r5, r4, r4, ror #30
 118:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 11c:	00646e52 	rsbeq	r6, r4, r2, asr lr
 120:	455c3a5a 	ldrbmi	r3, [ip, #-2650]	; 0xfffff5a6
 124:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 128:	6e735f32 	mrcvs	15, 3, r5, cr3, cr2, {1}
 12c:	5c656b61 			; <UNDEFINED> instruction: 0x5c656b61
 130:	6262616c 	rsbvs	r6, r2, #108, 2
 134:	6e735c35 	mrcvs	12, 3, r5, cr3, cr5, {1}
 138:	00656b61 	rsbeq	r6, r5, r1, ror #22
 13c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
 140:	745f3874 	ldrbvc	r3, [pc], #-2164	; 148 <startup-0x1ffffeb8>
 144:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff24c <player+0xdfffdc9c>
 148:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 14c:	6f00745f 	svcvs	0x0000745f
 150:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 154:	616d5f72 	smcvs	54770	; 0xd5f2
 158:	6f006b73 	svcvs	0x00006b73
 15c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 160:	6b007264 	blvs	1caf8 <startup-0x1ffe3508>
 164:	5f79656b 	svcpl	0x0079656b
 168:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 16c:	646f0065 	strbtvs	r0, [pc], #-101	; 174 <startup-0x1ffffe8c>
 170:	69685f72 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 174:	6f006867 	svcvs	0x00006867
 178:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 17c:	6f720072 	svcvs	0x00720072
 180:	756e5f77 	strbvc	r5, [lr, #-3959]!	; 0xfffff089
 184:	7570006d 	ldrbvc	r0, [r0, #-109]!	; 0xffffff93
 188:	5f727064 	svcpl	0x00727064
 18c:	00746573 	rsbseq	r6, r4, r3, ror r5
 190:	5f726469 	svcpl	0x00726469
 194:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
 198:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 19c:	656b5f74 	strbvs	r5, [fp, #-3956]!	; 0xfffff08c
 1a0:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 1a4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 1a8:	7067004f 	rsbvc	r0, r7, pc, asr #32
 1ac:	5f006f69 	svcpl	0x00006f69
 1b0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 1b4:	5f363174 	svcpl	0x00363174
 1b8:	3a5a0074 	bcc	1680390 <startup-0x1e97fc70>
 1bc:	4144452f 	cmpmi	r4, pc, lsr #10
 1c0:	5f323834 	svcpl	0x00323834
 1c4:	6b616e73 	blvs	185bb98 <startup-0x1e7a4468>
 1c8:	616c2f65 	cmnvs	ip, r5, ror #30
 1cc:	2f356262 	svccs	0x00356262
 1d0:	6b616e73 	blvs	185bba4 <startup-0x1e7a445c>
 1d4:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 1d8:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 1dc:	4900632e 	stmdbmi	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 1e0:	525f5244 	subspl	r5, pc, #68, 4	; 0x40000004
 1e4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 1e8:	00444556 	subeq	r4, r4, r6, asr r5
 1ec:	5f72646f 	svcpl	0x0072646f
 1f0:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 1f4:	5f52444f 	svcpl	0x0052444f
 1f8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
 1fc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
 200:	65726b00 	ldrbvs	r6, [r2, #-2816]!	; 0xfffff500
 204:	6b5f6461 	blvs	17d9390 <startup-0x1e826c70>
 208:	61707965 	cmnvs	r0, r5, ror #18
 20c:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
 210:	5f727064 	svcpl	0x00727064
 214:	6b73616d 	blvs	1cd87d0 <startup-0x1e327830>
 218:	65726b00 	ldrbvs	r6, [r2, #-2816]!	; 0xfffff500
 21c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 220:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 224:	7570006e 	ldrbvc	r0, [r0, #-110]!	; 0xffffff92
 228:	00727064 	rsbseq	r7, r2, r4, rrx
 22c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 230:	616d5f72 	smcvs	54770	; 0xd5f2
 234:	6d006b73 	vstrvs	d6, [r0, #-460]	; 0xfffffe34
 238:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 23c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 240:	726f7000 	rsbvc	r7, pc, #0
 244:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
 248:	31432055 	qdaddcc	r2, r5, r3
 24c:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
 250:	20312e32 	eorscs	r2, r1, r2, lsr lr
 254:	37313032 			; <UNDEFINED> instruction: 0x37313032
 258:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
 25c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 260:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 264:	5b202965 	blpl	80a800 <startup-0x1f7f5800>
 268:	2f4d5241 	svccs	0x004d5241
 26c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
 270:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
 274:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
 278:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 27c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 280:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 284:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 288:	30323535 	eorscc	r3, r2, r5, lsr r5
 28c:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
 290:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 294:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 298:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 29c:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 2a0:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 2a4:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
 2a8:	616f6c66 	cmnvs	pc, r6, ror #24
 2ac:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 2b0:	6f733d69 	svcvs	0x00733d69
 2b4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 2b8:	4f2d2067 	svcmi	0x002d2067
 2bc:	616b0030 	cmnvs	fp, r0, lsr r0
 2c0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 2c4:	5f657461 	svcpl	0x00657461
 2c8:	00776f72 	rsbseq	r6, r7, r2, ror pc
 2cc:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 2d0:	746f0072 	strbtvc	r0, [pc], #-114	; 2d8 <startup-0x1ffffd28>
 2d4:	72657079 	rsbvc	r7, r5, #121	; 0x79
 2d8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2dc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 2e0:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
 2e4:	6f6c5f72 	svcvs	0x006c5f72
 2e8:	544f0077 	strbpl	r0, [pc], #-119	; 2f0 <startup-0x1ffffd10>
 2ec:	5345525f 	movtpl	r5, #21087	; 0x525f
 2f0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 2f4:	79730044 	ldmdbvc	r3!, {r2, r6}^
 2f8:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 2fc:	6c665f6b 	stclvs	15, cr5, [r6], #-428	; 0xfffffe54
 300:	63006761 	movwvs	r6, #1889	; 0x761
 304:	75637269 	strbvc	r7, [r3, #-617]!	; 0xfffffd97
 308:	5f72616c 	svcpl	0x0072616c
 30c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 310:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 314:	006e6961 	rsbeq	r6, lr, r1, ror #18
 318:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 31c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
 320:	5f726566 	svcpl	0x00726566
 324:	66696873 			; <UNDEFINED> instruction: 0x66696873
 328:	75620074 	strbvc	r0, [r2, #-116]!	; 0xffffff8c
 32c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 330:	706f705f 	rsbvc	r7, pc, pc, asr r0	; <UNPREDICTABLE>
 334:	63657600 	cmnvs	r5, #0, 12
 338:	00726f74 	rsbseq	r6, r2, r4, ror pc
 33c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 340:	6c630054 	stclvs	0, cr0, [r3], #-336	; 0xfffffeb0
 344:	4d726165 	ldfmie	f6, [r2, #-404]!	; 0xfffffe6c
 348:	65670065 	strbvs	r0, [r7, #-101]!	; 0xffffff9b
 34c:	6f665f6e 	svcvs	0x00665f6e
 350:	7000646f 	andvc	r6, r0, pc, ror #8
 354:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 358:	6e720073 	mrcvs	0, 3, r0, cr2, cr3, {3}
 35c:	61745367 	cmnvs	r4, r7, ror #6
 360:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
 364:	006c6961 	rsbeq	r6, ip, r1, ror #18
 368:	6e6d6f6e 	cdpvs	15, 6, cr6, cr13, cr14, {3}
 36c:	6f6e6d6f 	svcvs	0x006e6d6f
 370:	7061006d 	rsbvc	r0, r1, sp, rrx
 374:	65725f70 	ldrbvs	r5, [r2, #-3952]!	; 0xfffff090
 378:	00746573 	rsbseq	r6, r4, r3, ror r5
 37c:	74746f62 	ldrbtvc	r6, [r4], #-3938	; 0xfffff09e
 380:	73006d6f 	movwvc	r6, #3439	; 0xd6f
 384:	00666c65 	rsbeq	r6, r6, r5, ror #24
 388:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 38c:	755f7265 	ldrbvc	r7, [pc, #-613]	; 12f <startup-0x1ffffed1>
 390:	6968736e 	stmdbvs	r8!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 394:	6d007466 	cfstrsvs	mvf7, [r0, #-408]	; 0xfffffe68
 398:	656c7861 	strbvs	r7, [ip, #-2145]!	; 0xfffff79f
 39c:	656e006e 	strbvs	r0, [lr, #-110]!	; 0xffffff92
 3a0:	47007478 	smlsdxmi	r0, r8, r4, r7
 3a4:	5f454d41 	svcpl	0x00454d41
 3a8:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
 3ac:	656e7300 	strbvs	r7, [lr, #-768]!	; 0xfffffd00
 3b0:	425f006b 	subsmi	r0, pc, #107	; 0x6b
 3b4:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 3b8:	452f3a5a 	strmi	r3, [pc, #-2650]!	; fffff966 <player+0xdfffe3b6>
 3bc:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 3c0:	6e735f32 	mrcvs	15, 3, r5, cr3, cr2, {1}
 3c4:	2f656b61 	svccs	0x00656b61
 3c8:	6262616c 	rsbvs	r6, r2, #108, 2
 3cc:	6e732f35 	mrcvs	15, 3, r2, cr3, cr5, {1}
 3d0:	2f656b61 	svccs	0x00656b61
 3d4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 3d8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 3dc:	4e530063 	cdpmi	0, 5, cr0, cr3, cr3, {3}
 3e0:	645f4b45 	ldrbvs	r4, [pc], #-2885	; 3e8 <startup-0x1ffffc18>
 3e4:	00776172 	rsbseq	r6, r7, r2, ror r1
 3e8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 3ec:	70610074 	rsbvc	r0, r1, r4, ror r0
 3f0:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 3f4:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
 3f8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 3fc:	75705f72 	ldrbvc	r5, [r0, #-3954]!	; 0xfffff08e
 400:	53006873 	movwpl	r6, #2163	; 0x873
 404:	004b454e 	subeq	r4, fp, lr, asr #10
 408:	4b454e53 	blmi	1153d5c <startup-0x1eeac2a4>
 40c:	7275745f 	rsbsvc	r7, r5, #1593835520	; 0x5f000000
 410:	656c5f6e 	strbvs	r5, [ip, #-3950]!	; 0xfffff092
 414:	53007466 	movwpl	r7, #1126	; 0x466
 418:	5f4b454e 	svcpl	0x004b454e
 41c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 420:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 424:	73007468 	movwvc	r7, #1128	; 0x468
 428:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 42c:	53007075 	movwpl	r7, #117	; 0x75
 430:	5f4b454e 	svcpl	0x004b454e
 434:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 438:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 43c:	65685f74 	strbvs	r5, [r8, #-3956]!	; 0xfffff08c
 440:	70006461 	andvc	r6, r0, r1, ror #8
 444:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 448:	656e0072 	strbvs	r0, [lr, #-114]!	; 0xffffff8e
 44c:	65765f77 	ldrbvs	r5, [r6, #-3959]!	; 0xfffff089
 450:	69636f6c 	stmdbvs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 454:	56007974 			; <UNDEFINED> instruction: 0x56007974
 458:	4f544345 	svcmi	0x00544345
 45c:	73610052 	cmnvc	r1, #82	; 0x52
 460:	5f696963 	svcpl	0x00696963
 464:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 468:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 46c:	65645f64 	strbvs	r5, [r4, #-3940]!	; 0xfffff09c
 470:	0079616c 	rsbseq	r6, r9, ip, ror #2
 474:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 478:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 47c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 480:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 484:	61007465 	tstvs	r0, r5, ror #8
 488:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 48c:	746f675f 	strbtvc	r6, [pc], #-1887	; 494 <startup-0x1ffffb6c>
 490:	0079786f 	rsbseq	r7, r9, pc, ror #16
 494:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 498:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 49c:	61007469 	tstvs	r0, r9, ror #8
 4a0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4a4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4a8:	645f6574 	ldrbvs	r6, [pc], #-1396	; 4b0 <startup-0x1ffffb50>
 4ac:	5f617461 	svcpl	0x00617461
 4b0:	616c6564 	cmnvs	ip, r4, ror #10
 4b4:	73610079 	cmnvc	r1, #121	; 0x79
 4b8:	5f696963 	svcpl	0x00696963
 4bc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4c0:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 4c4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 4c8:	63736100 	cmnvs	r3, #0, 2
 4cc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 4d0:	5f6c7274 	svcpl	0x006c7274
 4d4:	5f746962 	svcpl	0x00746962
 4d8:	61656c63 	cmnvs	r5, r3, ror #24
 4dc:	3a5a0072 	bcc	16806ac <startup-0x1e97f954>
 4e0:	4144452f 	cmpmi	r4, pc, lsr #10
 4e4:	5f323834 	svcpl	0x00323834
 4e8:	6b616e73 	blvs	185bebc <startup-0x1e7a4144>
 4ec:	616c2f65 	cmnvs	ip, r5, ror #30
 4f0:	2f356262 	svccs	0x00356262
 4f4:	6b616e73 	blvs	185bec8 <startup-0x1e7a4138>
 4f8:	73412f65 	movtvc	r2, #8037	; 0x1f65
 4fc:	2e696963 	vnmulcs.f16	s13, s18, s7	; <UNPREDICTABLE>
 500:	73610063 	cmnvc	r1, #99	; 0x63
 504:	5f696963 	svcpl	0x00696963
 508:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 50c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 510:	61007261 	tstvs	r0, r1, ror #4
 514:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 518:	6165725f 	cmnvs	r5, pc, asr r2
 51c:	6f635f64 	svcvs	0x00635f64
 520:	6f72746e 	svcvs	0x0072746e
 524:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 528:	72646100 	rsbvc	r6, r4, #0, 2
 52c:	00737365 	rsbseq	r7, r3, r5, ror #6
 530:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 534:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 538:	5f657469 	svcpl	0x00657469
 53c:	61746164 	cmnvs	r4, r4, ror #2
 540:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 544:	73610065 	cmnvc	r1, #101	; 0x65
 548:	5f696963 	svcpl	0x00696963
 54c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 550:	6174735f 	cmnvs	r4, pc, asr r3
 554:	00737574 	rsbseq	r7, r3, r4, ror r5
 558:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 55c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 560:	5f657469 	svcpl	0x00657469
 564:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 568:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 56c:	61007265 	tstvs	r0, r5, ror #4
 570:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 574:	6165725f 	cmnvs	r5, pc, asr r2
 578:	61645f64 	cmnvs	r4, r4, ror #30
 57c:	61006174 	tstvs	r0, r4, ror r1
 580:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 584:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 588:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 58c:	7000646d 	andvc	r6, r0, sp, ror #8
 590:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 594:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 598:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 59c:	00706d65 	rsbseq	r6, r0, r5, ror #26
 5a0:	70617267 	rsbvc	r7, r1, r7, ror #4
 5a4:	5f636968 	svcpl	0x00636968
 5a8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 5ac:	61726700 	cmnvs	r2, r0, lsl #14
 5b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5b4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 5b8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 5bc:	616d6d6f 	cmnvs	sp, pc, ror #26
 5c0:	5a00646e 	bpl	19780 <startup-0x1ffe6880>
 5c4:	44452f3a 	strbmi	r2, [r5], #-3898	; 0xfffff0c6
 5c8:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 5cc:	616e735f 	cmnvs	lr, pc, asr r3
 5d0:	6c2f656b 	cfstr32vs	mvfx6, [pc], #-428	; 42c <startup-0x1ffffbd4>
 5d4:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 5d8:	616e732f 	cmnvs	lr, pc, lsr #6
 5dc:	472f656b 	strmi	r6, [pc, -fp, ror #10]!
 5e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5e4:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 5e8:	72670063 	rsbvc	r0, r7, #99	; 0x63
 5ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5f0:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 5f4:	5f726165 	svcpl	0x00726165
 5f8:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 5fc:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 600:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 604:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 608:	00646165 	rsbeq	r6, r4, r5, ror #2
 60c:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 610:	61726700 	cmnvs	r2, r0, lsl #14
 614:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 618:	6165725f 	cmnvs	r5, pc, asr r2
 61c:	61645f64 	cmnvs	r4, r4, ror #30
 620:	67006174 	smlsdxvs	r0, r4, r1, r6
 624:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 628:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 62c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 630:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 634:	72670061 	rsbvc	r0, r7, #97	; 0x61
 638:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 63c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 640:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 644:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 648:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 64c:	61726700 	cmnvs	r2, r0, lsl #14
 650:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 654:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 658:	67006574 	smlsdxvs	r0, r4, r5, r6
 65c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 660:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 664:	5f6c7274 	svcpl	0x006c7274
 668:	5f746962 	svcpl	0x00746962
 66c:	00746573 	rsbseq	r6, r4, r3, ror r5
 670:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 674:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 678:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 67c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 680:	72670072 	rsbvc	r0, r7, #114	; 0x72
 684:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 688:	61775f63 	cmnvs	r7, r3, ror #30
 68c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 690:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 694:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 698:	766e7275 			; <UNDEFINED> instruction: 0x766e7275
 69c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 6a0:	2f3a5a00 	svccs	0x003a5a00
 6a4:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 6a8:	735f3238 	cmpvc	pc, #56, 4	; 0x80000003
 6ac:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 6b0:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 6b4:	732f3562 			; <UNDEFINED> instruction: 0x732f3562
 6b8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 6bc:	7269632f 	rsbvc	r6, r9, #-1140850688	; 0xbc000000
 6c0:	616c7563 	cmnvs	ip, r3, ror #10
 6c4:	75625f72 	strbvc	r5, [r2, #-3954]!	; 0xfffff08e
 6c8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 6cc:	6e00632e 	cdpvs	3, 0, cr6, cr0, cr14, {1}
 6d0:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
 6d4:	5f79616c 	svcpl	0x0079616c
 6d8:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 6dc:	5f5f006f 	svcpl	0x005f006f
 6e0:	33746e69 	cmncc	r4, #1680	; 0x690
 6e4:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 6e8:	695f626e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
 6ec:	5f74696e 	svcpl	0x0074696e
 6f0:	616c6564 	cmnvs	ip, r4, ror #10
 6f4:	6f6c0079 	svcvs	0x006c0079
 6f8:	63006461 	movwvs	r6, #1121	; 0x461
 6fc:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
 700:	73797300 	cmnvc	r9, #0, 6
 704:	6b636974 	blvs	18dacdc <startup-0x1e725324>
 708:	7172695f 	cmnvc	r2, pc, asr r9
 70c:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 710:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 714:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 718:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 71c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 720:	2f3a5a00 	svccs	0x003a5a00
 724:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 728:	735f3238 	cmpvc	pc, #56, 4	; 0x80000003
 72c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 730:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
 734:	732f3562 			; <UNDEFINED> instruction: 0x732f3562
 738:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 73c:	5f626e2f 	svcpl	0x00626e2f
 740:	616c6564 	cmnvs	ip, r4, ror #10
 744:	00632e79 	rsbeq	r2, r3, r9, ror lr
 748:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 74c:	5f626e00 	svcpl	0x00626e00
 750:	616c6564 	cmnvs	ip, r4, ror #10
 754:	Address 0x00000754 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <player+0xdfffdd5e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	4347005d 	movtmi	r0, #28765	; 0x705d
  80:	28203a43 	stmdacs	r0!, {r0, r1, r6, r9, fp, ip, sp}
  84:	68637241 	stmdavs	r3!, {r0, r6, r9, ip, sp, lr}^
  88:	70655220 	rsbvc	r5, r5, r0, lsr #4
  8c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
  90:	2979726f 	ldmdbcs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  94:	312e3920 			; <UNDEFINED> instruction: 0x312e3920
  98:	Address 0x00000098 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	4b367620 	blmi	d9d89c <startup-0x1f262764>
  18:	07090600 	streq	r0, [r9, -r0, lsl #12]
  1c:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  20:	14041201 	strne	r1, [r4], #-513	; 0xfffffdff
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  2c:	1e011a01 	vmlane.f32	s2, s2, s2
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000032 	andeq	r0, r0, r2, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000042 	andcs	r0, r0, r2, asr #32
  3c:	00000076 	andeq	r0, r0, r6, ror r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	00000020 	andeq	r0, r0, r0, lsr #32
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	200000b8 	strhcs	r0, [r0], -r8
  6c:	00000084 	andeq	r0, r0, r4, lsl #1
  70:	400c0e41 	andmi	r0, ip, r1, asr #28
  74:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  78:	018e4002 	orreq	r4, lr, r2
  7c:	41380e41 	teqmi	r8, r1, asr #28
  80:	0000070d 	andeq	r0, r0, sp, lsl #14
  84:	0000001c 	andeq	r0, r0, ip, lsl r0
  88:	00000050 	andeq	r0, r0, r0, asr r0
  8c:	2000013c 	andcs	r0, r0, ip, lsr r1
  90:	00000028 	andeq	r0, r0, r8, lsr #32
  94:	40080e41 	andmi	r0, r8, r1, asr #28
  98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  9c:	100e4101 	andne	r4, lr, r1, lsl #2
  a0:	00070d41 	andeq	r0, r7, r1, asr #26
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	00000050 	andeq	r0, r0, r0, asr r0
  ac:	20000164 	andcs	r0, r0, r4, ror #2
  b0:	0000005a 	andeq	r0, r0, sl, asr r0
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	180e4101 	stmdane	lr, {r0, r8, lr}
  c0:	00070d41 	andeq	r0, r7, r1, asr #26
  c4:	00000020 	andeq	r0, r0, r0, lsr #32
  c8:	00000050 	andeq	r0, r0, r0, asr r0
  cc:	200001be 			; <UNDEFINED> instruction: 0x200001be
  d0:	00000076 	andeq	r0, r0, r6, ror r0
  d4:	400c0e41 	andmi	r0, ip, r1, asr #28
  d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  dc:	018e4002 	orreq	r4, lr, r2
  e0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  e4:	0000070d 	andeq	r0, r0, sp, lsl #14
  e8:	00000024 	andeq	r0, r0, r4, lsr #32
  ec:	00000050 	andeq	r0, r0, r0, asr r0
  f0:	20000234 	andcs	r0, r0, r4, lsr r2
  f4:	00000084 	andeq	r0, r0, r4, lsl #1
  f8:	40100e41 	andsmi	r0, r0, r1, asr #28
  fc:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 100:	02874003 	addeq	r4, r7, #3
 104:	41018e40 	tstmi	r1, r0, asr #28
 108:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000000c 	andeq	r0, r0, ip
 114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 118:	7c020001 	stcvc	0, cr0, [r2], {1}
 11c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 120:	0000000c 	andeq	r0, r0, ip
 124:	00000110 	andeq	r0, r0, r0, lsl r1
 128:	20000000 	andcs	r0, r0, r0
 12c:	0000000c 	andeq	r0, r0, ip
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000110 	andeq	r0, r0, r0, lsl r1
 138:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 13c:	00000066 	andeq	r0, r0, r6, rrx
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000110 	andeq	r0, r0, r0, lsl r1
 158:	2000031e 	andcs	r0, r0, lr, lsl r3
 15c:	00000066 	andeq	r0, r0, r6, rrx
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	180e4101 	stmdane	lr, {r0, r8, lr}
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000110 	andeq	r0, r0, r0, lsl r1
 178:	20000384 	andcs	r0, r0, r4, lsl #7
 17c:	00000066 	andeq	r0, r0, r6, rrx
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000110 	andeq	r0, r0, r0, lsl r1
 198:	200003ea 	andcs	r0, r0, sl, ror #7
 19c:	00000066 	andeq	r0, r0, r6, rrx
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	00000024 	andeq	r0, r0, r4, lsr #32
 1b4:	00000110 	andeq	r0, r0, r0, lsl r1
 1b8:	20000450 	andcs	r0, r0, r0, asr r4
 1bc:	00000078 	andeq	r0, r0, r8, ror r0
 1c0:	40100e41 	andsmi	r0, r0, r1, asr #28
 1c4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 1c8:	02874003 	addeq	r4, r7, #3
 1cc:	41018e40 	tstmi	r1, r0, asr #28
 1d0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	00000110 	andeq	r0, r0, r0, lsl r1
 1e0:	200004c8 	andcs	r0, r0, r8, asr #9
 1e4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000110 	andeq	r0, r0, r0, lsl r1
 204:	20000668 	andcs	r0, r0, r8, ror #12
 208:	00000020 	andeq	r0, r0, r0, lsr #32
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000110 	andeq	r0, r0, r0, lsl r1
 224:	20000688 	andcs	r0, r0, r8, lsl #13
 228:	00000036 	andeq	r0, r0, r6, lsr r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	180e4101 	stmdane	lr, {r0, r8, lr}
 238:	00070d41 	andeq	r0, r7, r1, asr #26
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000110 	andeq	r0, r0, r0, lsl r1
 244:	200006be 			; <UNDEFINED> instruction: 0x200006be
 248:	00000036 	andeq	r0, r0, r6, lsr r0
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	180e4101 	stmdane	lr, {r0, r8, lr}
 258:	00070d41 	andeq	r0, r7, r1, asr #26
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	00000110 	andeq	r0, r0, r0, lsl r1
 264:	200006f4 	strdcs	r0, [r0], -r4
 268:	00000050 	andeq	r0, r0, r0, asr r0
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000110 	andeq	r0, r0, r0, lsl r1
 280:	20000744 	andcs	r0, r0, r4, asr #14
 284:	00000068 	andeq	r0, r0, r8, rrx
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	00000020 	andeq	r0, r0, r0, lsr #32
 29c:	00000110 	andeq	r0, r0, r0, lsl r1
 2a0:	200007ac 	andcs	r0, r0, ip, lsr #15
 2a4:	00000100 	andeq	r0, r0, r0, lsl #2
 2a8:	400c0e41 	andmi	r0, ip, r1, asr #28
 2ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2b0:	018e4002 	orreq	r4, lr, r2
 2b4:	41180e41 	tstmi	r8, r1, asr #28
 2b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2d4:	200008ac 	andcs	r0, r0, ip, lsr #17
 2d8:	00000044 	andeq	r0, r0, r4, asr #32
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2f4:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2f8:	00000048 	andeq	r0, r0, r8, asr #32
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	180e4101 	stmdane	lr, {r0, r8, lr}
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 314:	20000938 	andcs	r0, r0, r8, lsr r9
 318:	00000030 	andeq	r0, r0, r0, lsr r0
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	100e4101 	andne	r4, lr, r1, lsl #2
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 334:	20000968 	andcs	r0, r0, r8, ror #18
 338:	00000034 	andeq	r0, r0, r4, lsr r0
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 354:	2000099c 	mulcs	r0, ip, r9
 358:	00000024 	andeq	r0, r0, r4, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 374:	200009c0 	andcs	r0, r0, r0, asr #19
 378:	0000002a 	andeq	r0, r0, sl, lsr #32
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	00000020 	andeq	r0, r0, r0, lsr #32
 390:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 394:	200009ea 	andcs	r0, r0, sl, ror #19
 398:	00000042 	andeq	r0, r0, r2, asr #32
 39c:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3a4:	018e4002 	orreq	r4, lr, r2
 3a8:	41180e41 	tstmi	r8, r1, asr #28
 3ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b0:	00000020 	andeq	r0, r0, r0, lsr #32
 3b4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 3b8:	20000a2c 	andcs	r0, r0, ip, lsr #20
 3bc:	00000040 	andeq	r0, r0, r0, asr #32
 3c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 3c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3c8:	018e4002 	orreq	r4, lr, r2
 3cc:	41180e41 	tstmi	r8, r1, asr #28
 3d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 3dc:	20000a6c 	andcs	r0, r0, ip, ror #20
 3e0:	00000040 	andeq	r0, r0, r0, asr #32
 3e4:	40080e41 	andmi	r0, r8, r1, asr #28
 3e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ec:	100e4101 	andne	r4, lr, r1, lsl #2
 3f0:	00070d41 	andeq	r0, r7, r1, asr #26
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 3fc:	20000aac 	andcs	r0, r0, ip, lsr #21
 400:	00000040 	andeq	r0, r0, r0, asr #32
 404:	40080e41 	andmi	r0, r8, r1, asr #28
 408:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 40c:	100e4101 	andne	r4, lr, r1, lsl #2
 410:	00070d41 	andeq	r0, r7, r1, asr #26
 414:	00000018 	andeq	r0, r0, r8, lsl r0
 418:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 41c:	20000aec 	andcs	r0, r0, ip, ror #21
 420:	0000002e 	andeq	r0, r0, lr, lsr #32
 424:	40080e41 	andmi	r0, r8, r1, asr #28
 428:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 42c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 430:	0000001c 	andeq	r0, r0, ip, lsl r0
 434:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 438:	20000b1a 	andcs	r0, r0, sl, lsl fp
 43c:	00000050 	andeq	r0, r0, r0, asr r0
 440:	40080e41 	andmi	r0, r8, r1, asr #28
 444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 448:	180e4101 	stmdane	lr, {r0, r8, lr}
 44c:	00070d41 	andeq	r0, r7, r1, asr #26
 450:	0000001c 	andeq	r0, r0, ip, lsl r0
 454:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 458:	20000b6a 	andcs	r0, r0, sl, ror #22
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	40080e41 	andmi	r0, r8, r1, asr #28
 464:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 468:	100e4101 	andne	r4, lr, r1, lsl #2
 46c:	00070d41 	andeq	r0, r7, r1, asr #26
 470:	0000001c 	andeq	r0, r0, ip, lsl r0
 474:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 478:	20000b8a 	andcs	r0, r0, sl, lsl #23
 47c:	00000028 	andeq	r0, r0, r8, lsr #32
 480:	40080e41 	andmi	r0, r8, r1, asr #28
 484:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 488:	100e4101 	andne	r4, lr, r1, lsl #2
 48c:	00070d41 	andeq	r0, r7, r1, asr #26
 490:	0000000c 	andeq	r0, r0, ip
 494:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 498:	7c020001 	stcvc	0, cr0, [r2], {1}
 49c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	00000490 	muleq	r0, r0, r4
 4a8:	20000bb4 			; <UNDEFINED> instruction: 0x20000bb4
 4ac:	00000044 	andeq	r0, r0, r4, asr #32
 4b0:	40080e41 	andmi	r0, r8, r1, asr #28
 4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4bc:	00070d41 	andeq	r0, r7, r1, asr #26
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000490 	muleq	r0, r0, r4
 4c8:	20000bf8 	strdcs	r0, [r0], -r8
 4cc:	00000048 	andeq	r0, r0, r8, asr #32
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	00000490 	muleq	r0, r0, r4
 4e8:	20000c40 	andcs	r0, r0, r0, asr #24
 4ec:	0000005a 	andeq	r0, r0, sl, asr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	100e4101 	andne	r4, lr, r1, lsl #2
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	00000490 	muleq	r0, r0, r4
 508:	20000c9a 	mulcs	r0, sl, ip
 50c:	0000006e 	andeq	r0, r0, lr, rrx
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	100e4101 	andne	r4, lr, r1, lsl #2
 51c:	00070d41 	andeq	r0, r7, r1, asr #26
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	00000490 	muleq	r0, r0, r4
 528:	20000d08 	andcs	r0, r0, r8, lsl #26
 52c:	00000090 	muleq	r0, r0, r0
 530:	40080e41 	andmi	r0, r8, r1, asr #28
 534:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 538:	180e4101 	stmdane	lr, {r0, r8, lr}
 53c:	00070d41 	andeq	r0, r7, r1, asr #26
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	00000490 	muleq	r0, r0, r4
 548:	20000d98 	mulcs	r0, r8, sp
 54c:	00000080 	andeq	r0, r0, r0, lsl #1
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	100e4101 	andne	r4, lr, r1, lsl #2
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	00000490 	muleq	r0, r0, r4
 568:	20000e18 	andcs	r0, r0, r8, lsl lr
 56c:	00000040 	andeq	r0, r0, r0, asr #32
 570:	40080e41 	andmi	r0, r8, r1, asr #28
 574:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 578:	100e4101 	andne	r4, lr, r1, lsl #2
 57c:	00070d41 	andeq	r0, r7, r1, asr #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	00000490 	muleq	r0, r0, r4
 588:	20000e58 	andcs	r0, r0, r8, asr lr
 58c:	00000046 	andeq	r0, r0, r6, asr #32
 590:	40080e41 	andmi	r0, r8, r1, asr #28
 594:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 598:	100e4101 	andne	r4, lr, r1, lsl #2
 59c:	00070d41 	andeq	r0, r7, r1, asr #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	00000490 	muleq	r0, r0, r4
 5a8:	20000e9e 	mulcs	r0, lr, lr
 5ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 5b0:	40080e41 	andmi	r0, r8, r1, asr #28
 5b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b8:	100e4101 	andne	r4, lr, r1, lsl #2
 5bc:	00070d41 	andeq	r0, r7, r1, asr #26
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	00000490 	muleq	r0, r0, r4
 5c8:	20000ec8 	andcs	r0, r0, r8, asr #29
 5cc:	00000138 	andeq	r0, r0, r8, lsr r1
 5d0:	40100e41 	andsmi	r0, r0, r1, asr #28
 5d4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 5d8:	02874003 	addeq	r4, r7, #3
 5dc:	41018e40 	tstmi	r1, r0, asr #28
 5e0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 5e4:	00000007 	andeq	r0, r0, r7
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	00000490 	muleq	r0, r0, r4
 5f0:	20001000 	andcs	r1, r0, r0
 5f4:	00000066 	andeq	r0, r0, r6, rrx
 5f8:	40080e41 	andmi	r0, r8, r1, asr #28
 5fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 600:	100e4101 	andne	r4, lr, r1, lsl #2
 604:	00070d41 	andeq	r0, r7, r1, asr #26
 608:	00000018 	andeq	r0, r0, r8, lsl r0
 60c:	00000490 	muleq	r0, r0, r4
 610:	20001066 	andcs	r1, r0, r6, rrx
 614:	00000056 	andeq	r0, r0, r6, asr r0
 618:	40080e41 	andmi	r0, r8, r1, asr #28
 61c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 620:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 624:	0000000c 	andeq	r0, r0, ip
 628:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 62c:	7c020001 	stcvc	0, cr0, [r2], {1}
 630:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 634:	00000018 	andeq	r0, r0, r8, lsl r0
 638:	00000624 	andeq	r0, r0, r4, lsr #12
 63c:	200010bc 	strhcs	r1, [r0], -ip
 640:	00000030 	andeq	r0, r0, r0, lsr r0
 644:	40080e41 	andmi	r0, r8, r1, asr #28
 648:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 64c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 650:	00000018 	andeq	r0, r0, r8, lsl r0
 654:	00000624 	andeq	r0, r0, r4, lsr #12
 658:	200010ec 	andcs	r1, r0, ip, ror #1
 65c:	0000003c 	andeq	r0, r0, ip, lsr r0
 660:	40080e41 	andmi	r0, r8, r1, asr #28
 664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 668:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 66c:	00000018 	andeq	r0, r0, r8, lsl r0
 670:	00000624 	andeq	r0, r0, r4, lsr #12
 674:	20001128 	andcs	r1, r0, r8, lsr #2
 678:	00000024 	andeq	r0, r0, r4, lsr #32
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 688:	0000001c 	andeq	r0, r0, ip, lsl r0
 68c:	00000624 	andeq	r0, r0, r4, lsr #12
 690:	2000114c 	andcs	r1, r0, ip, asr #2
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	40080e41 	andmi	r0, r8, r1, asr #28
 69c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a0:	100e4101 	andne	r4, lr, r1, lsl #2
 6a4:	00070d41 	andeq	r0, r7, r1, asr #26
 6a8:	0000000c 	andeq	r0, r0, ip
 6ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6b0:	7c010001 	stcvc	0, cr0, [r1], {1}
 6b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6b8:	0000000c 	andeq	r0, r0, ip
 6bc:	000006a8 	andeq	r0, r0, r8, lsr #13
 6c0:	200013d8 	ldrdcs	r1, [r0], -r8
 6c4:	00000128 	andeq	r0, r0, r8, lsr #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
   4:	200008ac 	andcs	r0, r0, ip, lsr #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
